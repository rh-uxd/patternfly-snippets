{"codeCategories":[{"category":"Components","codeFragments":[{"label":"AboutModal #","content":"<AboutModal\n\tclassName={\"''\"/* optional: Additional classes added to the about modal */}\n\tisOpen={false/* optional: Flag to show the about modal */}\n\tonClose={(): any => undefined/* optional: A callback for when the close button is clicked */}\n\tproductName={\"''\"/* optional: Product name */}\n\ttrademark={\"''\"/* optional: Trademark information */}\n\tbrandImageSrc={\"string\"/* required: The URL of the image for the brand */}\n\tbrandImageAlt={\"string\"/* required: The alternate text of the brand image */}\n\tbackgroundImageSrc={\"''\"/* optional: The URL of the image for the background */}\n\tnoAboutModalBoxContentContainer={false/* optional: Prevents the about modal from rendering content inside a container; allows for more flexible layouts */}\n\tappendTo={null/* optional: The parent container to append the modal to. Defaults to document.body */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the about modal */}\n</AboutModal>"},{"label":"AboutModal","content":"<AboutModal\n\tclassName={\"''\"}\n\tisOpen={false}\n\tonClose={(): any => undefined}\n\tproductName={\"''\"}\n\ttrademark={\"''\"}\n\tbrandImageSrc={\"string\"}\n\tbrandImageAlt={\"string\"}\n\tbackgroundImageSrc={\"''\"}\n\tnoAboutModalBoxContentContainer={false}\n\tappendTo={null}\n>\n\t{<div>ReactNode</div>}\n</AboutModal>"},{"label":"AboutModalBox #","content":"<AboutModalBox\n\tclassName={\"''\"/* optional: additional classes added to the AboutModalBox */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the AboutModelBox. */}\n</AboutModalBox>"},{"label":"AboutModalBox","content":"<AboutModalBox\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</AboutModalBox>"},{"label":"AboutModalBoxBrand #","content":"<AboutModalBoxBrand\n\tclassName={\"''\"/* optional: additional classes added to the About Modal Brand */}\n\tsrc={\"''\"/* optional: the URL of the image for the Brand. */}\n\talt={\"string\"/* required: the alternate text of the Brand image. */}\n/>"},{"label":"AboutModalBoxBrand","content":"<AboutModalBoxBrand\n\tclassName={\"''\"}\n\tsrc={\"''\"}\n\talt={\"string\"}\n/>"},{"label":"AboutModalBoxCloseButton #","content":"<AboutModalBoxCloseButton\n\tclassName={\"''\"/* optional: additional classes added to the About Modal Close button */}\n\tonClose={() => undefined as any/* optional: A callback for when the close button is clicked */}\n/>"},{"label":"AboutModalBoxCloseButton","content":"<AboutModalBoxCloseButton\n\tclassName={\"''\"}\n\tonClose={() => undefined as any}\n/>"},{"label":"AboutModalBoxContent #","content":"<AboutModalBoxContent\n\tclassName={\"''\"/* optional: additional classes added to the AboutModalBoxContent */}\n\tid={\"string\"/* required: id to use for About Modal Box aria described by */}\n\ttrademark={\"string\"/* required: The Trademark info for the product */}\n\tnoAboutModalBoxContentContainer={false/* optional: Prevents the about modal from rendering content inside a container; allows for more flexible layouts */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the AboutModalBoxContent */}\n</AboutModalBoxContent>"},{"label":"AboutModalBoxContent","content":"<AboutModalBoxContent\n\tclassName={\"''\"}\n\tid={\"string\"}\n\ttrademark={\"string\"}\n\tnoAboutModalBoxContentContainer={false}\n>\n\t{<div>ReactNode</div>}\n</AboutModalBoxContent>"},{"label":"AboutModalBoxHeader #","content":"<AboutModalBoxHeader\n\tclassName={\"''\"/* optional: additional classes added to the button */}\n\tproductName={\"''\"/* optional: Name of the Product */}\n\tid={\"string\"/* required: id to used for Modal Box header */}\n/>"},{"label":"AboutModalBoxHeader","content":"<AboutModalBoxHeader\n\tclassName={\"''\"}\n\tproductName={\"''\"}\n\tid={\"string\"}\n/>"},{"label":"AboutModalBoxHero #","content":"<AboutModalBoxHero\n\tclassName={\"string\"/* optional: additional classes added to the About Modal Hero */}\n\tbackgroundImageSrc={\"string\"/* optional: background image data or file path */}\n/>"},{"label":"AboutModalBoxHero","content":"<AboutModalBoxHero\n\tclassName={\"string\"}\n\tbackgroundImageSrc={\"string\"}\n/>"},{"label":"AboutModalContainer #","content":"<AboutModalContainer\n\tclassName={\"''\"/* optional: additional classes added to the About Modal Box */}\n\tisOpen={false/* optional: Flag to show the About Modal */}\n\tonClose={() => undefined/* optional: A callback for when the close button is clicked */}\n\tproductName={\"''\"/* optional: Product Name */}\n\ttrademark={\"string\"/* optional: Trademark information */}\n\tbrandImageSrc={\"string\"/* required: the URL of the image for the Brand. */}\n\tbrandImageAlt={\"string\"/* required: the alternate text of the Brand image. */}\n\tbackgroundImageSrc={\"string\"/* optional: the URL of the image for the background. */}\n\tariaLabelledbyId={\"string\"/* required: id to use for About Modal Box aria labeled by */}\n\tariaDescribedById={\"string\"/* required: id to use for About Modal Box aria described by */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the About Modal Box Content. */}\n</AboutModalContainer>"},{"label":"AboutModalContainer","content":"<AboutModalContainer\n\tclassName={\"''\"}\n\tisOpen={false}\n\tonClose={() => undefined}\n\tproductName={\"''\"}\n\ttrademark={\"string\"}\n\tbrandImageSrc={\"string\"}\n\tbrandImageAlt={\"string\"}\n\tbackgroundImageSrc={\"string\"}\n\tariaLabelledbyId={\"string\"}\n\tariaDescribedById={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</AboutModalContainer>"},{"label":"Accordion #","content":"<Accordion\n\tclassName={\"''\"/* optional: Additional classes added to the Accordion */}\n\taria-label={\"''\"/* optional: Adds accessible text to the Accordion */}\n\theadingLevel={'h3'/* optional: Heading level to use */}\n\tasDefinitionList={true/* optional: Flag to indicate whether use definition list or div */}\n\tnoBoxShadow={false/* optional: Flag to indicate if the box shadow should be removed */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Accordion */}\n</Accordion>"},{"label":"Accordion","content":"<Accordion\n\tclassName={\"''\"}\n\taria-label={\"''\"}\n\theadingLevel={'h3'}\n\tasDefinitionList={true}\n\tnoBoxShadow={false}\n>\n\t{<>ReactNode</>}\n</Accordion>"},{"label":"AccordionContent #","content":"<AccordionContent\n\tclassName={\"''\"/* optional: Additional classes added to the Accordion content */}\n\tid={\"''\"/* optional: Identify the AccordionContent item */}\n\tisHidden={false/* optional: Flag to show if the expanded content of the Accordion item is visible */}\n\tisFixed={false/* optional: Flag to indicate Accordion content is fixed */}\n\taria-label={\"''\"/* optional: Adds accessible text to the Accordion content */}\n\tcomponent={() => <div />/* optional: Component to use as content container */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Accordion */}\n</AccordionContent>"},{"label":"AccordionContent","content":"<AccordionContent\n\tclassName={\"''\"}\n\tid={\"''\"}\n\tisHidden={false}\n\tisFixed={false}\n\taria-label={\"''\"}\n\tcomponent={() => <div />}\n>\n\t{<>ReactNode</>}\n</AccordionContent>"},{"label":"AccordionItem #","content":"<AccordionItem\n\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Accordion item */}\n</AccordionItem>"},{"label":"AccordionItem","content":"<AccordionItem\n\n>\n\t{<>ReactNode</>}\n</AccordionItem>"},{"label":"AccordionToggle #","content":"<AccordionToggle\n\tclassName={\"''\"/* optional: Additional classes added to the Accordion Toggle */}\n\tisExpanded={false/* optional: Flag to show if the expanded content of the Accordion item is visible */}\n\tid={\"string\"/* required: Identify the Accordion toggle number */}\n\tcomponent={() => <div />/* optional: Container to override the default for toggle */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Accordion toggle */}\n</AccordionToggle>"},{"label":"AccordionToggle","content":"<AccordionToggle\n\tclassName={\"''\"}\n\tisExpanded={false}\n\tid={\"string\"}\n\tcomponent={() => <div />}\n>\n\t{<>ReactNode</>}\n</AccordionToggle>"},{"label":"Alert #","content":"<Alert\n\tvariant={'success'/* optional: Adds Alert variant styles */}\n\tisInline={false/* optional: Flag to indicate if the Alert is inline */}\n\ttitle={<div>ReactNode</div>/* required: Title of the Alert */}\n\taction={null/* optional: Action button to put in the Alert. Should be <AlertActionLink> or <AlertActionCloseButton> */}\n\tclassName={\"''\"/* optional: Additional classes added to the Alert */}\n\taria-label={\"string\"/* optional: Adds accessible text to the Alert */}\n\tvariantLabel={\"string\"/* optional: Variant label text for screen readers */}\n\tisLiveRegion={false/* optional: Flag to indicate if the Alert is in a live region */}\n>\n\t{''/* optional: Content rendered inside the Alert */}\n</Alert>"},{"label":"Alert","content":"<Alert\n\tvariant={'success'}\n\tisInline={false}\n\ttitle={<div>ReactNode</div>}\n\taction={null}\n\tclassName={\"''\"}\n\taria-label={\"string\"}\n\tvariantLabel={\"string\"}\n\tisLiveRegion={false}\n>\n\t{''}\n</Alert>"},{"label":"AlertActionCloseButton #","content":"<AlertActionCloseButton\n\tclassName={\"''\"/* optional: Additional classes added to the AlertActionCloseButton */}\n\tonClose={() => undefined as any/* optional: A callback for when the close button is clicked */}\n\taria-label={\"''\"/* optional: Aria Label for the Close button */}\n\tvariantLabel={\"''\"/* optional: Variant Label for the Close button */}\n/>"},{"label":"AlertActionCloseButton","content":"<AlertActionCloseButton\n\tclassName={\"''\"}\n\tonClose={() => undefined as any}\n\taria-label={\"''\"}\n\tvariantLabel={\"''\"}\n/>"},{"label":"AlertActionLink #","content":"<AlertActionLink\n\tclassName={\"''\"/* optional: Additional classes added to the AlertActionLink */}\n>\n\t{\"''\"/* optional: Content rendered inside the AlertLinkAction */}\n</AlertActionLink>"},{"label":"AlertActionLink","content":"<AlertActionLink\n\tclassName={\"''\"}\n>\n\t{\"''\"}\n</AlertActionLink>"},{"label":"AlertIcon #","content":"<AlertIcon\n\tvariant={'success'/* required: variant */}\n\tclassName={\"''\"/* optional: className */}\n/>"},{"label":"AlertIcon","content":"<AlertIcon\n\tvariant={'success'}\n\tclassName={\"''\"}\n/>"},{"label":"AlertGroup #","content":"<AlertGroup\n\tclassName={\"string\"/* optional: Additional classes added to the AlertGroup */}\n\tisToast={true/* optional: Toast notifications are positioned at the top right corner of the viewport */}\n\tappendTo={undefined/* optional: Determine where the alert is appended to */}\n>\n\t{<div>ReactNode</div>/* optional: Alerts to be rendered in the AlertGroup */}\n</AlertGroup>"},{"label":"AlertGroup","content":"<AlertGroup\n\tclassName={\"string\"}\n\tisToast={true}\n\tappendTo={undefined}\n>\n\t{<div>ReactNode</div>}\n</AlertGroup>"},{"label":"AlertGroupInline #","content":"<AlertGroupInline\n\n/>"},{"label":"AlertGroupInline","content":"<AlertGroupInline\n\n/>"},{"label":"ApplicationLauncher #","content":"<ApplicationLauncher\n\tclassName={\"''\"/* optional: Additional element css classes */}\n\tdirection={'up'/* optional: Display menu above or below dropdown toggle */}\n\tdropdownItems={[]/* optional: @deprecated | Use the items prop instead | Array of DropdownItem nodes that will be rendered in the dropdown Menu list */}\n\titems={[]/* optional: Array of application launcher items */}\n\tisDisabled={false/* optional: Render Application launcher toggle as disabled icon */}\n\tisOpen={false/* optional: open bool */}\n\tposition={'right'/* optional: Indicates where menu will be alligned horizontally */}\n\tonSelect={(_event: any): any => undefined/* optional: Function callback called when user selects item */}\n\tonToggle={(_value: boolean): any => undefined/* optional: Callback called when application launcher toggle is clicked */}\n\taria-label={\"'Application launcher'\"/* optional: Adds accessible text to the button. Required for plain buttons */}\n\tisGrouped={false/* optional: Flag to indicate if application launcher has groups */}\n\ttoggleIcon={<div>ReactNode</div>/* optional: Toggle Icon, optional to override the icon used for the toggle */}\n\tfavorites={[]/* optional: ID list of favorited ApplicationLauncherItems */}\n\tonFavorite={(itemId: string, isFavorite: boolean) => undefined as void/* optional: Enables favorites. Callback called when an ApplicationLauncherItem's favorite button is clicked */}\n\tonSearch={(textInput: string) => undefined as void/* optional: Enables search. Callback called when text input is entered into search box */}\n\tsearchPlaceholderText={\"'Filter by name...'\"/* optional: Placeholder text for search input */}\n\tsearchNoResultsText={\"'No results found'\"/* optional: Text for search input when no results are found */}\n\tsearchProps={'any'/* optional: Additional properties for search input */}\n\tfavoritesLabel={\"'Favorites'\"/* optional: Label for the favorites group */}\n\ttoggleId={\"string\"/* optional: ID of toggle */}\n/>"},{"label":"ApplicationLauncher","content":"<ApplicationLauncher\n\tclassName={\"''\"}\n\tdirection={'up'}\n\tdropdownItems={[]}\n\titems={[]}\n\tisDisabled={false}\n\tisOpen={false}\n\tposition={'right'}\n\tonSelect={(_event: any): any => undefined}\n\tonToggle={(_value: boolean): any => undefined}\n\taria-label={\"'Application launcher'\"}\n\tisGrouped={false}\n\ttoggleIcon={<div>ReactNode</div>}\n\tfavorites={[]}\n\tonFavorite={(itemId: string, isFavorite: boolean) => undefined as void}\n\tonSearch={(textInput: string) => undefined as void}\n\tsearchPlaceholderText={\"'Filter by name...'\"}\n\tsearchNoResultsText={\"'No results found'\"}\n\tsearchProps={'any'}\n\tfavoritesLabel={\"'Favorites'\"}\n\ttoggleId={\"string\"}\n/>"},{"label":"ApplicationLauncherContent #","content":"<ApplicationLauncherContent\n\n>\n\t{<div>ReactNode</div>/* required: Main content to be rendered */}\n</ApplicationLauncherContent>"},{"label":"ApplicationLauncherContent","content":"<ApplicationLauncherContent\n\n>\n\t{<div>ReactNode</div>}\n</ApplicationLauncherContent>"},{"label":"ApplicationLauncherGroup #","content":"<ApplicationLauncherGroup\n\n/>"},{"label":"ApplicationLauncherGroup","content":"<ApplicationLauncherGroup\n\n/>"},{"label":"ApplicationLauncherIcon #","content":"<ApplicationLauncherIcon\n\tclassName={\"''\"/* optional: Additional classes added to the icon container */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the icon container */}\n</ApplicationLauncherIcon>"},{"label":"ApplicationLauncherIcon","content":"<ApplicationLauncherIcon\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</ApplicationLauncherIcon>"},{"label":"ApplicationLauncherSeparator #","content":"<ApplicationLauncherSeparator\n\n/>"},{"label":"ApplicationLauncherSeparator","content":"<ApplicationLauncherSeparator\n\n/>"},{"label":"ApplicationLauncherText #","content":"<ApplicationLauncherText\n\tclassName={\"''\"/* optional: Additional classes added to the text container */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the text container */}\n</ApplicationLauncherText>"},{"label":"ApplicationLauncherText","content":"<ApplicationLauncherText\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</ApplicationLauncherText>"},{"label":"Avatar #","content":"<Avatar\n\tclassName={\"''\"/* optional: Additional classes added to the Avatar. */}\n\tsrc={\"''\"/* optional: Attribute that specifies the URL of the image for the Avatar. */}\n\talt={\"string\"/* required: Attribute that specifies the alternate text of the image for the Avatar. */}\n/>"},{"label":"Avatar","content":"<Avatar\n\tclassName={\"''\"}\n\tsrc={\"''\"}\n\talt={\"string\"}\n/>"},{"label":"Backdrop #","content":"<Backdrop\n\tclassName={\"''\"/* optional: additional classes added to the button */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the backdrop */}\n</Backdrop>"},{"label":"Backdrop","content":"<Backdrop\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</Backdrop>"},{"label":"BackgroundImage #","content":"<BackgroundImage\n\tclassName={\"''\"/* optional: Additional classes added to the background. */}\n\tsrc={'string'/* required: Override image styles using a string or BackgroundImageSrc */}\n/>"},{"label":"BackgroundImage","content":"<BackgroundImage\n\tclassName={\"''\"}\n\tsrc={'string'}\n/>"},{"label":"Badge #","content":"<Badge\n\tisRead={false/* optional: Adds styling to the badge to indicate it has been read */}\n\tclassName={\"''\"/* optional: additional classes added to the Badge */}\n>\n\t{''/* optional: content rendered inside the Badge */}\n</Badge>"},{"label":"Badge","content":"<Badge\n\tisRead={false}\n\tclassName={\"''\"}\n>\n\t{''}\n</Badge>"},{"label":"Brand #","content":"<Brand\n\tclassName={\"''\"/* optional: Additional classes added to the Brand. */}\n\tsrc={\"''\"/* optional: Attribute that specifies the URL of the image for the Brand. */}\n\talt={\"string\"/* required: Attribute that specifies the alt text of the image for the Brand. */}\n/>"},{"label":"Brand","content":"<Brand\n\tclassName={\"''\"}\n\tsrc={\"''\"}\n\talt={\"string\"}\n/>"},{"label":"Breadcrumb #","content":"<Breadcrumb\n\tclassName={\"''\"/* optional: Additional classes added to the breadcrumb nav. */}\n\taria-label={\"'Breadcrumb'\"/* optional: Aria label added to the breadcrumb nav. */}\n>\n\t{<>ReactNode</>/* optional: Children nodes be rendered to the BreadCrumb. Should be of type BreadCrumbItem. */}\n</Breadcrumb>"},{"label":"Breadcrumb","content":"<Breadcrumb\n\tclassName={\"''\"}\n\taria-label={\"'Breadcrumb'\"}\n>\n\t{<>ReactNode</>}\n</Breadcrumb>"},{"label":"BreadcrumbHeading #","content":"<BreadcrumbHeading\n\tclassName={\"''\"/* optional: Additional classes added to the breadcrumb item. */}\n\tto={\"null\"/* optional: HREF for breadcrumb link. */}\n\ttarget={\"null\"/* optional: Target for breadcrumb link. */}\n\tcomponent={'a'/* optional: Sets the base component to render. Defaults to <a> */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the breadcrumb title. */}\n</BreadcrumbHeading>"},{"label":"BreadcrumbHeading","content":"<BreadcrumbHeading\n\tclassName={\"''\"}\n\tto={\"null\"}\n\ttarget={\"null\"}\n\tcomponent={'a'}\n>\n\t{<>ReactNode</>}\n</BreadcrumbHeading>"},{"label":"BreadcrumbItem #","content":"<BreadcrumbItem\n\tclassName={\"''\"/* optional: Additional classes added to the breadcrumb item. */}\n\tto={\"null\"/* optional: HREF for breadcrumb link. */}\n\tisActive={false/* optional: Flag indicating whether the item is active. */}\n\ttarget={\"null\"/* optional: Target for breadcrumb link. */}\n\tcomponent={'a'/* optional: Sets the base component to render. Defaults to <a> */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the breadcrumb item. */}\n</BreadcrumbItem>"},{"label":"BreadcrumbItem","content":"<BreadcrumbItem\n\tclassName={\"''\"}\n\tto={\"null\"}\n\tisActive={false}\n\ttarget={\"null\"}\n\tcomponent={'a'}\n>\n\t{<>ReactNode</>}\n</BreadcrumbItem>"},{"label":"Button #","content":"<Button\n\tclassName={\"''\"/* optional: Additional classes added to the button */}\n\tcomponent={'button'/* optional: Sets the base component to render. defaults to button */}\n\tisActive={false/* optional: Adds active styling to button. */}\n\tisBlock={false/* optional: Adds block styling to button */}\n\tisDisabled={false/* optional: Disables the button and adds disabled styling */}\n\tisFocus={false/* optional: Adds focus styling to the button */}\n\tisHover={false/* optional: Adds hover styling to the button */}\n\tisInline={false/* optional: Adds inline styling to a link button */}\n\ttype={'button'/* optional: Sets button type */}\n\tvariant={'primary'/* optional: Adds button variant styles */}\n\taria-label={\"null\"/* optional: Adds accessible text to the button. */}\n\ticon={null/* optional: Icon for the button if variant is a link */}\n\ttabIndex={null/* optional: Set button tab index unless component is not a button and is disabled */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the button */}\n</Button>"},{"label":"Button","content":"<Button\n\tclassName={\"''\"}\n\tcomponent={'button'}\n\tisActive={false}\n\tisBlock={false}\n\tisDisabled={false}\n\tisFocus={false}\n\tisHover={false}\n\tisInline={false}\n\ttype={'button'}\n\tvariant={'primary'}\n\taria-label={\"null\"}\n\ticon={null}\n\ttabIndex={null}\n>\n\t{<>ReactNode</>}\n</Button>"},{"label":"Card #","content":"<Card\n\tclassName={\"''\"/* optional: Additional classes added to the Card */}\n\tcomponent={'article'/* optional: Sets the base component to render. defaults to article */}\n\tisHoverable={false/* optional: Modifies the card to include hover styles on :hover */}\n\tisCompact={false/* optional: Modifies the card to include compact styling */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card */}\n</Card>"},{"label":"Card","content":"<Card\n\tclassName={\"''\"}\n\tcomponent={'article'}\n\tisHoverable={false}\n\tisCompact={false}\n>\n\t{<>ReactNode</>}\n</Card>"},{"label":"CardActions #","content":"<CardActions\n\tclassName={\"''\"/* optional: Additional classes added to the Action */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card Action */}\n</CardActions>"},{"label":"CardActions","content":"<CardActions\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</CardActions>"},{"label":"CardBody #","content":"<CardBody\n\tclassName={\"''\"/* optional: Additional classes added to the Card Body */}\n\tcomponent={'div'/* optional: Sets the base component to render. defaults to div */}\n\tisFilled={true/* optional: Enables the body Content to fill the height of the card */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card Body */}\n</CardBody>"},{"label":"CardBody","content":"<CardBody\n\tclassName={\"''\"}\n\tcomponent={'div'}\n\tisFilled={true}\n>\n\t{<>ReactNode</>}\n</CardBody>"},{"label":"CardFooter #","content":"<CardFooter\n\tclassName={\"''\"/* optional: Additional classes added to the Footer */}\n\tcomponent={'div'/* optional: Sets the base component to render. defaults to div */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card Footer */}\n</CardFooter>"},{"label":"CardFooter","content":"<CardFooter\n\tclassName={\"''\"}\n\tcomponent={'div'}\n>\n\t{<>ReactNode</>}\n</CardFooter>"},{"label":"CardHead #","content":"<CardHead\n\tclassName={\"''\"/* optional: Additional classes added to the Head */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card Head */}\n</CardHead>"},{"label":"CardHead","content":"<CardHead\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</CardHead>"},{"label":"CardHeader #","content":"<CardHeader\n\tclassName={\"''\"/* optional: Additional classes added to the Header */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Card Footer */}\n</CardHeader>"},{"label":"CardHeader","content":"<CardHeader\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</CardHeader>"},{"label":"Checkbox #","content":"<Checkbox\n\tclassName={\"''\"/* optional: Additional classes added to the Checkbox. */}\n\tisValid={true/* optional: Flag to show if the Checkbox selection is valid or invalid. */}\n\tisDisabled={false/* optional: Flag to show if the Checkbox is disabled. */}\n\tisChecked={false/* optional: Flag to show if the Checkbox is checked. */}\n\tchecked={true/* optional:  */}\n\tonChange={() => {}/* optional: A callback for when the Checkbox selection changes. */}\n\tlabel={<div>ReactNode</div>/* optional: Label text of the checkbox. */}\n\tid={\"string\"/* required: Id of the checkbox. */}\n\taria-label={\"string\"/* optional: Aria-label of the checkbox. */}\n\tdescription={<div>ReactNode</div>/* optional: Description text of the checkbox. */}\n/>"},{"label":"Checkbox","content":"<Checkbox\n\tclassName={\"''\"}\n\tisValid={true}\n\tisDisabled={false}\n\tisChecked={false}\n\tchecked={true}\n\tonChange={() => {}}\n\tlabel={<div>ReactNode</div>}\n\tid={\"string\"}\n\taria-label={\"string\"}\n\tdescription={<div>ReactNode</div>}\n/>"},{"label":"Chip #","content":"<Chip\n\tcloseBtnAriaLabel={\"'close'\"/* optional: Aria Label for close button */}\n\tclassName={\"''\"/* optional: Additional classes added to the chip item */}\n\tisOverflowChip={false/* optional: Flag indicating if the chip has overflow */}\n\tisReadOnly={false/* optional: Flag if chip is read only */}\n\tonClick={(_e: React.MouseEvent) => undefined as any/* optional: Function that is called when clicking on the chip button */}\n\tcomponent={'div'/* optional: Internal flag for which component will be used for chip */}\n\ttooltipPosition={'top'/* optional: Position of the tooltip which is displayed if text is longer */}\n>\n\t{<div>ReactNode</div>/* optional: Content rendered inside the chip text */}\n</Chip>"},{"label":"Chip","content":"<Chip\n\tcloseBtnAriaLabel={\"'close'\"}\n\tclassName={\"''\"}\n\tisOverflowChip={false}\n\tisReadOnly={false}\n\tonClick={(_e: React.MouseEvent) => undefined as any}\n\tcomponent={'div'}\n\ttooltipPosition={'top'}\n>\n\t{<div>ReactNode</div>}\n</Chip>"},{"label":"ChipButton #","content":"<ChipButton\n\tariaLabel={\"'close'\"/* optional: Aria label for chip button */}\n\tclassName={\"''\"/* optional: Additional classes added to the chip item */}\n\tonClick={() => undefined/* optional: Function that is called when clicking on the chip button */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the chip item */}\n</ChipButton>"},{"label":"ChipButton","content":"<ChipButton\n\tariaLabel={\"'close'\"}\n\tclassName={\"''\"}\n\tonClick={() => undefined}\n>\n\t{<>ReactNode</>}\n</ChipButton>"},{"label":"ChipGroup #","content":"<ChipGroup\n\tclassName={\"''\"/* optional: Additional classes added to the chip item */}\n\tdefaultIsOpen={false/* optional: Flag for having the chip group default to expanded */}\n\texpandedText={\"'Show Less'\"/* optional: Customizable \"Show Less\" text string */}\n\tcollapsedText={\"'${remaining} more'\"/* optional: Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */}\n\twithToolbar={false/* optional: Flag for grouping with a toolbar & category name */}\n\theadingLevel={'h1'/* optional: Set heading level to the chip item label */}\n\tnumChips={3/* optional: Set number of chips to show before overflow */}\n>\n\t{<div>ReactNode</div>/* optional: Content rendered inside the chip text */}\n</ChipGroup>"},{"label":"ChipGroup","content":"<ChipGroup\n\tclassName={\"''\"}\n\tdefaultIsOpen={false}\n\texpandedText={\"'Show Less'\"}\n\tcollapsedText={\"'${remaining} more'\"}\n\twithToolbar={false}\n\theadingLevel={'h1'}\n\tnumChips={3}\n>\n\t{<div>ReactNode</div>}\n</ChipGroup>"},{"label":"ChipGroupToolbarItem #","content":"<ChipGroupToolbarItem\n\tcategoryName={\"''\"/* optional: Category name text */}\n\tclassName={\"''\"/* optional: Additional classes added to the chip item */}\n\tisClosable={false/* optional: Flag if chip group can be closed */}\n\tonClick={(_e: React.MouseEvent) => undefined as any/* optional: Function that is called when clicking on the chip group button */}\n\tcloseBtnAriaLabel={\"'Close chip group'\"/* optional: Aria label for close button */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the chip text */}\n</ChipGroupToolbarItem>"},{"label":"ChipGroupToolbarItem","content":"<ChipGroupToolbarItem\n\tcategoryName={\"''\"}\n\tclassName={\"''\"}\n\tisClosable={false}\n\tonClick={(_e: React.MouseEvent) => undefined as any}\n\tcloseBtnAriaLabel={\"'Close chip group'\"}\n>\n\t{<>ReactNode</>}\n</ChipGroupToolbarItem>"},{"label":"ClipboardCopy #","content":"<ClipboardCopy\n\tclassName={\"string\"/* optional: Additional classes added to the clipboard copy container. */}\n\thoverTip={\"'Copy to clipboard'\"/* optional: Tooltip message to display when hover the copy button */}\n\tclickTip={\"'Successfully copied to clipboard!'\"/* optional: Tooltip message to display when clicking the copy button */}\n\ttextAriaLabel={\"'Copyable input'\"/* optional: Custom flag to show that the input requires an associated id or aria-label. */}\n\ttoggleAriaLabel={\"'Show content'\"/* optional: Custom flag to show that the toggle button requires an associated id or aria-label. */}\n\tisReadOnly={false/* optional: Flag to show if the input is read only. */}\n\tisExpanded={false/* optional: Flag to determine if clipboard copy is in the expanded state initially */}\n\tisCode={false/* optional: Flag to determine if clipboard copy content includes code */}\n\tvariant={'inline'/* optional: Adds Clipboard Copy variant styles. */}\n\tposition={'auto'/* optional: Copy button popover position. */}\n\tmaxWidth={\"'150px'\"/* optional: Maximum width of the tooltip (default 150px). */}\n\texitDelay={1600/* optional: Delay in ms before the tooltip disappears. */}\n\tentryDelay={100/* optional: Delay in ms before the tooltip appears. */}\n\tswitchDelay={2000/* optional: Delay in ms before the tooltip message switch to hover tip. */}\n\tonCopy={(event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('input');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n}/* optional: A function that is triggered on clicking the copy button. */}\n\tonChange={(): any => undefined/* optional: A function that is triggered on changing the text. */}\n>\n\t{<div>ReactNode</div>/* required: The text which is copied. */}\n</ClipboardCopy>"},{"label":"ClipboardCopy","content":"<ClipboardCopy\n\tclassName={\"string\"}\n\thoverTip={\"'Copy to clipboard'\"}\n\tclickTip={\"'Successfully copied to clipboard!'\"}\n\ttextAriaLabel={\"'Copyable input'\"}\n\ttoggleAriaLabel={\"'Show content'\"}\n\tisReadOnly={false}\n\tisExpanded={false}\n\tisCode={false}\n\tvariant={'inline'}\n\tposition={'auto'}\n\tmaxWidth={\"'150px'\"}\n\texitDelay={1600}\n\tentryDelay={100}\n\tswitchDelay={2000}\n\tonCopy={(event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('input');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n}}\n\tonChange={(): any => undefined}\n>\n\t{<div>ReactNode</div>}\n</ClipboardCopy>"},{"label":"ClipboardCopyButton #","content":"<ClipboardCopyButton\n\tonClick={(event: React.MouseEvent) => undefined as void/* required:  */}\n\tid={\"string\"/* required:  */}\n\ttextId={\"string\"/* required:  */}\n\tclassName={\"''\"/* optional:  */}\n\texitDelay={100/* optional:  */}\n\tentryDelay={100/* optional:  */}\n\tmaxWidth={\"'100px'\"/* optional:  */}\n\tposition={'top'/* optional:  */}\n\taria-label={\"'Copyable input'\"/* optional:  */}\n>\n\t{<div>ReactNode</div>/* required:  */}\n</ClipboardCopyButton>"},{"label":"ClipboardCopyButton","content":"<ClipboardCopyButton\n\tonClick={(event: React.MouseEvent) => undefined as void}\n\tid={\"string\"}\n\ttextId={\"string\"}\n\tclassName={\"''\"}\n\texitDelay={100}\n\tentryDelay={100}\n\tmaxWidth={\"'100px'\"}\n\tposition={'top'}\n\taria-label={\"'Copyable input'\"}\n>\n\t{<div>ReactNode</div>}\n</ClipboardCopyButton>"},{"label":"ClipboardCopyExpanded #","content":"<ClipboardCopyExpanded\n\tclassName={\"''\"/* optional:  */}\n\tonChange={(): any => undefined/* optional:  */}\n\tisReadOnly={false/* optional:  */}\n\tisCode={false/* optional:  */}\n>\n\t{<div>ReactNode</div>/* required:  */}\n</ClipboardCopyExpanded>"},{"label":"ClipboardCopyExpanded","content":"<ClipboardCopyExpanded\n\tclassName={\"''\"}\n\tonChange={(): any => undefined}\n\tisReadOnly={false}\n\tisCode={false}\n>\n\t{<div>ReactNode</div>}\n</ClipboardCopyExpanded>"},{"label":"ClipboardCopyToggle #","content":"<ClipboardCopyToggle\n\tonClick={(event: React.MouseEvent) => undefined as void/* required:  */}\n\tid={\"string\"/* required:  */}\n\ttextId={\"string\"/* required:  */}\n\tcontentId={\"string\"/* required:  */}\n\tisExpanded={false/* optional:  */}\n\tclassName={\"''\"/* optional:  */}\n/>"},{"label":"ClipboardCopyToggle","content":"<ClipboardCopyToggle\n\tonClick={(event: React.MouseEvent) => undefined as void}\n\tid={\"string\"}\n\ttextId={\"string\"}\n\tcontentId={\"string\"}\n\tisExpanded={false}\n\tclassName={\"''\"}\n/>"},{"label":"ContextSelector #","content":"<ContextSelector\n\tclassName={\"''\"/* optional: Classes applied to root element of Context Selector */}\n\tisOpen={false/* optional: Flag to indicate if Context Selector is opened */}\n\tonToggle={() => undefined as any/* optional: Function callback called when user clicks toggle button */}\n\tonSelect={() => undefined as any/* optional: Function callback called when user selects item */}\n\tscreenReaderLabel={\"''\"/* optional: Labels the Context Selector for Screen Readers */}\n\ttoggleText={\"''\"/* optional: Text that appears in the Context Selector Toggle */}\n\tsearchButtonAriaLabel={\"'Search menu items'\"/* optional: aria-label for the Context Selector Search Button */}\n\tsearchInputValue={\"''\"/* optional: Value in the Search field */}\n\tonSearchInputChange={() => undefined as any/* optional: Function callback called when user changes the Search Input */}\n\tsearchInputPlaceholder={\"'Search'\"/* optional: Search Input placeholder */}\n\tonSearchButtonClick={() => undefined as any/* optional: Function callback for when Search Button is clicked */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Context Selector */}\n</ContextSelector>"},{"label":"ContextSelector","content":"<ContextSelector\n\tclassName={\"''\"}\n\tisOpen={false}\n\tonToggle={() => undefined as any}\n\tonSelect={() => undefined as any}\n\tscreenReaderLabel={\"''\"}\n\ttoggleText={\"''\"}\n\tsearchButtonAriaLabel={\"'Search menu items'\"}\n\tsearchInputValue={\"''\"}\n\tonSearchInputChange={() => undefined as any}\n\tsearchInputPlaceholder={\"'Search'\"}\n\tonSearchButtonClick={() => undefined as any}\n>\n\t{<>ReactNode</>}\n</ContextSelector>"},{"label":"ContextSelectorItem #","content":"<ContextSelectorItem\n\tclassName={\"''\"/* optional: Classes applied to root element of the Context Selector item */}\n\tisDisabled={false/* optional: Render Context  Selector item as disabled */}\n\tisHovered={false/* optional: Forces display of the hover state of the element */}\n\tonClick={(): any => undefined/* optional: Callback for click event */}\n\tindex={42/* optional: internal index of the item */}\n\tsendRef={() => {}/* optional: Internal callback for ref tracking */}\n>\n\t{<>ReactNode</>/* optional: Anything which can be rendered as Context Selector item */}\n</ContextSelectorItem>"},{"label":"ContextSelectorItem","content":"<ContextSelectorItem\n\tclassName={\"''\"}\n\tisDisabled={false}\n\tisHovered={false}\n\tonClick={(): any => undefined}\n\tindex={42}\n\tsendRef={() => {}}\n>\n\t{<>ReactNode</>}\n</ContextSelectorItem>"},{"label":"ContextSelectorMenuList #","content":"<ContextSelectorMenuList\n\tclassName={\"''\"/* optional: Classess applied to root element of Context Selector menu */}\n\tisOpen={true/* optional: Flag to indicate if Context Selector menu is opened */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Context Selector Menu */}\n</ContextSelectorMenuList>"},{"label":"ContextSelectorMenuList","content":"<ContextSelectorMenuList\n\tclassName={\"''\"}\n\tisOpen={true}\n>\n\t{<>ReactNode</>}\n</ContextSelectorMenuList>"},{"label":"ContextSelectorToggle #","content":"<ContextSelectorToggle\n\tid={\"string\"/* required: HTML ID of toggle */}\n\tclassName={\"''\"/* optional: Classes applied to root element of toggle */}\n\ttoggleText={\"''\"/* optional: Text that appears in the Context Selector Toggle */}\n\tisOpen={false/* optional: Flag to indicate if menu is opened */}\n\tonToggle={(event: any, value: boolean) => undefined as any/* optional: Callback called when toggle is clicked */}\n\tonEnter={() => undefined as any/* optional: Callback for toggle open on keyboard entry */}\n\tparentRef={null/* optional: Element which wraps toggle */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n/>"},{"label":"ContextSelectorToggle","content":"<ContextSelectorToggle\n\tid={\"string\"}\n\tclassName={\"''\"}\n\ttoggleText={\"''\"}\n\tisOpen={false}\n\tonToggle={(event: any, value: boolean) => undefined as any}\n\tonEnter={() => undefined as any}\n\tparentRef={null}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n/>"},{"label":"DataList #","content":"<DataList\n\tclassName={\"''\"/* optional:  */}\n\taria-label={\"string\"/* required:  */}\n\tonSelectDataListItem={(id: string) => undefined as void/* optional:  */}\n\tselectedDataListItemId={\"''\"/* optional:  */}\n>\n\t{<>ReactNode</>/* optional:  */}\n</DataList>"},{"label":"DataList","content":"<DataList\n\tclassName={\"''\"}\n\taria-label={\"string\"}\n\tonSelectDataListItem={(id: string) => undefined as void}\n\tselectedDataListItemId={\"''\"}\n>\n\t{<>ReactNode</>}\n</DataList>"},{"label":"DataListAction #","content":"<DataListAction\n\tclassName={\"''\"/* optional: Additional classes added to the DataList Action */}\n\tid={\"string\"/* required: Identify the DataList toggle number */}\n\taria-labelledby={\"string\"/* required: Adds accessible text to the DataList Action */}\n\taria-label={\"string\"/* required: Adds accessible text to the DataList Action */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered as DataList Action  (e.g <Button> or <Dropdown>) */}\n</DataListAction>"},{"label":"DataListAction","content":"<DataListAction\n\tclassName={\"''\"}\n\tid={\"string\"}\n\taria-labelledby={\"string\"}\n\taria-label={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DataListAction>"},{"label":"DataListCell #","content":"<DataListCell\n\tclassName={\"''\"/* optional: Additional classes added to the DataList cell */}\n\twidth={1/* optional: Width (from 1-5) to the DataList cell */}\n\tisFilled={true/* optional: Enables the body Content to fill the height of the card */}\n\talignRight={false/* optional: Aligns the cell content to the right of its parent. */}\n\tisIcon={false/* optional: Set to true if the cell content is an Icon */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the DataList cell */}\n</DataListCell>"},{"label":"DataListCell","content":"<DataListCell\n\tclassName={\"''\"}\n\twidth={1}\n\tisFilled={true}\n\talignRight={false}\n\tisIcon={false}\n>\n\t{<>ReactNode</>}\n</DataListCell>"},{"label":"DataListCheck #","content":"<DataListCheck\n\tclassName={\"''\"/* optional: Additional classes added to the DataList item checkbox */}\n\tisValid={true/* optional: Flag to show if the DataList checkbox selection is valid or invalid */}\n\tisDisabled={false/* optional: Flag to show if the DataList checkbox is disabled */}\n\tisChecked={null/* optional: Flag to show if the DataList checkbox is checked */}\n\tchecked={null/* optional: Alternate Flag to show if the DataList checkbox is checked */}\n\tonChange={(checked: boolean, event: React.FormEvent<HTMLInputElement>) => {}/* optional: A callback for when the DataList checkbox selection changes */}\n\taria-labelledby={\"string\"/* required: Aria-labelledby of the DataList checkbox */}\n/>"},{"label":"DataListCheck","content":"<DataListCheck\n\tclassName={\"''\"}\n\tisValid={true}\n\tisDisabled={false}\n\tisChecked={null}\n\tchecked={null}\n\tonChange={(checked: boolean, event: React.FormEvent<HTMLInputElement>) => {}}\n\taria-labelledby={\"string\"}\n/>"},{"label":"DataListContent #","content":"<DataListContent\n\tclassName={\"''\"/* optional: Additional classes added to the DataList cell */}\n\tid={\"''\"/* optional: Identify the DataListContent item */}\n\trowid={\"''\"/* optional: Id for the row */}\n\tisHidden={false/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tnoPadding={false/* optional: Flag to remove padding from the expandable content */}\n\taria-label={\"string\"/* required: Adds accessible text to the DataList toggle */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the DataList item */}\n</DataListContent>"},{"label":"DataListContent","content":"<DataListContent\n\tclassName={\"''\"}\n\tid={\"''\"}\n\trowid={\"''\"}\n\tisHidden={false}\n\tnoPadding={false}\n\taria-label={\"string\"}\n>\n\t{<>ReactNode</>}\n</DataListContent>"},{"label":"DataListItem #","content":"<DataListItem\n\tisExpanded={false/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tclassName={\"''\"/* optional: Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */}\n\taria-labelledby={\"string\"/* required: Adds accessible text to the DataList item */}\n\tid={\"''\"/* optional: Unique id for the DataList item */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the DataList item */}\n</DataListItem>"},{"label":"DataListItem","content":"<DataListItem\n\tisExpanded={false}\n\tclassName={\"''\"}\n\taria-labelledby={\"string\"}\n\tid={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</DataListItem>"},{"label":"DataListItemCells #","content":"<DataListItemCells\n\tclassName={\"''\"/* optional: Additional classes added to the DataList item Content Wrapper.  Children should be one ore more <DataListCell> nodes */}\n\tdataListCells={<div>ReactNode</div>/* optional: Array of <DataListCell> nodes that are rendered one after the other. */}\n\trowid={\"''\"/* optional: Id for the row */}\n/>"},{"label":"DataListItemCells","content":"<DataListItemCells\n\tclassName={\"''\"}\n\tdataListCells={<div>ReactNode</div>}\n\trowid={\"''\"}\n/>"},{"label":"DataListItemRow #","content":"<DataListItemRow\n\tclassName={\"''\"/* optional:  */}\n\trowid={\"''\"/* optional:  */}\n>\n\t{<div>ReactNode</div>/* required:  */}\n</DataListItemRow>"},{"label":"DataListItemRow","content":"<DataListItemRow\n\tclassName={\"''\"}\n\trowid={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</DataListItemRow>"},{"label":"DataListToggle #","content":"<DataListToggle\n\tclassName={\"''\"/* optional: Additional classes added to the DataList cell */}\n\tisExpanded={false/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tid={\"string\"/* required: Identify the DataList toggle number */}\n\trowid={\"''\"/* optional: Id for the row */}\n\taria-labelledby={\"''\"/* optional: Adds accessible text to the DataList toggle */}\n\taria-label={\"'Details'\"/* optional: Adds accessible text to the DataList toggle */}\n\taria-controls={\"''\"/* optional: Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */}\n/>"},{"label":"DataListToggle","content":"<DataListToggle\n\tclassName={\"''\"}\n\tisExpanded={false}\n\tid={\"string\"}\n\trowid={\"''\"}\n\taria-labelledby={\"''\"}\n\taria-label={\"'Details'\"}\n\taria-controls={\"''\"}\n/>"},{"label":"Divider #","content":"<Divider\n\tclassName={\"''\"/* optional: Additional classes added to the divider */}\n\tcomponent={'hr'/* optional: The component type to use */}\n/>"},{"label":"Divider","content":"<Divider\n\tclassName={\"''\"}\n\tcomponent={'hr'}\n/>"},{"label":"Dropdown #","content":"<Dropdown\n\tclassName={\"string\"/* optional: Classes applied to root element of dropdown */}\n\tdropdownItems={[]/* optional: Array of DropdownItem nodes that will be rendered in the dropdown Menu list */}\n\tisOpen={true/* optional: Flag to indicate if menu is opened */}\n\tisPlain={true/* optional: Display the toggle with no border or background */}\n\tposition={'right'/* optional: Indicates where menu will be aligned horizontally */}\n\tdirection={'up'/* optional: Display menu above or below dropdown toggle */}\n\tisGrouped={true/* optional: Flag to indicate if dropdown has groups */}\n\ttoggle={<p>ReactElement</p>/* required: Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */}\n\tonSelect={(event?: React.SyntheticEvent<HTMLDivElement>) => undefined as void/* optional: Function callback called when user selects item */}\n\tautoFocus={true/* optional: Flag to indicate if the first dropdown item should gain initial focus, set false when adding | a specific auto-focus item (like a current selection) otherwise leave as true */}\n>\n\t{<div>ReactNode</div>/* optional: Anything which can be rendered in a dropdown */}\n</Dropdown>"},{"label":"Dropdown","content":"<Dropdown\n\tclassName={\"string\"}\n\tdropdownItems={[]}\n\tisOpen={true}\n\tisPlain={true}\n\tposition={'right'}\n\tdirection={'up'}\n\tisGrouped={true}\n\ttoggle={<p>ReactElement</p>}\n\tonSelect={(event?: React.SyntheticEvent<HTMLDivElement>) => undefined as void}\n\tautoFocus={true}\n>\n\t{<div>ReactNode</div>}\n</Dropdown>"},{"label":"DropdownGroup #","content":"<DropdownGroup\n\tclassName={\"''\"/* optional: Additional classes added to the DropdownGroup control */}\n\tlabel={''/* optional: Group label */}\n>\n\t{<>ReactNode</>/* optional: Checkboxes within group */}\n</DropdownGroup>"},{"label":"DropdownGroup","content":"<DropdownGroup\n\tclassName={\"''\"}\n\tlabel={''}\n>\n\t{<>ReactNode</>}\n</DropdownGroup>"},{"label":"DropdownItem #","content":"<DropdownItem\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown item */}\n\tlistItemClassName={\"string\"/* optional: Class to be applied to list item */}\n\tcomponent={'a'/* optional: Indicates which component will be used as dropdown item */}\n\tvariant={'item'/* optional: Variant of the item. The 'icon' variant should use DropdownItemIcon to wrap contained icons or images. */}\n\tisDisabled={false/* optional: Render dropdown item as disabled option */}\n\tisHovered={false/* optional: Forces display of the hover state of the element */}\n\thref={\"''\"/* optional: Default hyperlink location */}\n\ttooltip={null/* optional: Tooltip to display when hovered over the item */}\n\ttooltipProps={undefined/* optional: Additional tooltip props forwarded to the Tooltip component */}\n\tadditionalChild={<div>ReactNode</div>/* optional: Additional node to include alongside item within the <li> */}\n\tcustomChild={<div>ReactNode</div>/* optional: Custom item rendering that receives the DropdownContext */}\n>\n\t{<>ReactNode</>/* optional: Anything which can be rendered as dropdown item */}\n</DropdownItem>"},{"label":"DropdownItem","content":"<DropdownItem\n\tclassName={\"''\"}\n\tlistItemClassName={\"string\"}\n\tcomponent={'a'}\n\tvariant={'item'}\n\tisDisabled={false}\n\tisHovered={false}\n\thref={\"''\"}\n\ttooltip={null}\n\ttooltipProps={undefined}\n\tadditionalChild={<div>ReactNode</div>}\n\tcustomChild={<div>ReactNode</div>}\n>\n\t{<>ReactNode</>}\n</DropdownItem>"},{"label":"DropdownItemIcon #","content":"<DropdownItemIcon\n\tclassName={\"''\"/* optional: Classes applied to span element of dropdown icon item */}\n>\n\t{<div>ReactNode</div>/* optional: Icon to be rendered in the dropdown item */}\n</DropdownItemIcon>"},{"label":"DropdownItemIcon","content":"<DropdownItemIcon\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</DropdownItemIcon>"},{"label":"DropdownMenu #","content":"<DropdownMenu\n\tclassName={\"''\"/* optional: Classess applied to root element of dropdown menu */}\n\tisOpen={true/* optional: Flag to indicate if menu is opened */}\n\topenedOnEnter={false/* optional: Flag to indicate if menu should be opened on enter */}\n\tautoFocus={true/* optional: Flag to indicate if the first dropdown item should gain initial focus, set false when adding | a specific auto-focus item (like a current selection) otherwise leave as true */}\n\tcomponent={'ul'/* optional: Indicates which component will be used as dropdown menu */}\n\tposition={'right'/* optional: Indicates where menu will be alligned horizontally */}\n\tisGrouped={false/* optional: Flag to indicate if menu is grouped */}\n>\n\t{<div>ReactNode</div>/* optional: Anything which can be rendered as dropdown items */}\n</DropdownMenu>"},{"label":"DropdownMenu","content":"<DropdownMenu\n\tclassName={\"''\"}\n\tisOpen={true}\n\topenedOnEnter={false}\n\tautoFocus={true}\n\tcomponent={'ul'}\n\tposition={'right'}\n\tisGrouped={false}\n>\n\t{<div>ReactNode</div>}\n</DropdownMenu>"},{"label":"DropdownSeparator #","content":"<DropdownSeparator\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown item */}\n\tonClick={(event: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent | MouseEvent) => undefined as void/* optional: Click event to pass to InternalDropdownItem */}\n/>"},{"label":"DropdownSeparator","content":"<DropdownSeparator\n\tclassName={\"''\"}\n\tonClick={(event: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent | MouseEvent) => undefined as void}\n/>"},{"label":"DropdownToggle #","content":"<DropdownToggle\n\tid={\"''\"/* optional: HTML ID of dropdown toggle */}\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown toggle button */}\n\tisOpen={false/* optional: Flag to indicate if menu is opened */}\n\tonToggle={(_isOpen: boolean) => undefined as any/* optional: Callback called when toggle is clicked */}\n\tparentRef={null/* optional: Element which wraps toggle */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n\tisPlain={false/* optional: Display the toggle with no border or background */}\n\tisDisabled={false/* optional: Whether or not the <div> has a disabled state */}\n\tisPrimary={false/* optional: Whether or not the dropdown toggle button should have primary button styling */}\n\ticonComponent={() => <p>ReactElementType</p>/* optional: The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon. */}\n\tsplitButtonItems={[]/* optional: Elements to display before the toggle button. When included, renders the toggle as a split button. */}\n\tsplitButtonVariant={'checkbox'/* optional: Variant of split button toggle */}\n\taria-label={\"string\"/* optional: Accessible label for the dropdown toggle button */}\n\tariaHasPopup={true/* optional: Accessibility property to indicate correct has popup */}\n\ttype={'button'/* optional: Type to put on the button */}\n\tonEnter={(event?: React.MouseEvent<HTMLButtonElement>) => undefined as void/* optional: Callback called when the Enter key is pressed */}\n>\n\t{<>ReactNode</>/* optional: Anything which can be rendered as dropdown toggle button */}\n</DropdownToggle>"},{"label":"DropdownToggle","content":"<DropdownToggle\n\tid={\"''\"}\n\tclassName={\"''\"}\n\tisOpen={false}\n\tonToggle={(_isOpen: boolean) => undefined as any}\n\tparentRef={null}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n\tisPlain={false}\n\tisDisabled={false}\n\tisPrimary={false}\n\ticonComponent={() => <p>ReactElementType</p>}\n\tsplitButtonItems={[]}\n\tsplitButtonVariant={'checkbox'}\n\taria-label={\"string\"}\n\tariaHasPopup={true}\n\ttype={'button'}\n\tonEnter={(event?: React.MouseEvent<HTMLButtonElement>) => undefined as void}\n>\n\t{<>ReactNode</>}\n</DropdownToggle>"},{"label":"DropdownToggleAction #","content":"<DropdownToggleAction\n\tclassName={\"''\"/* optional: Additional classes added to the DropdownToggleAction */}\n\tisDisabled={false/* optional: Flag to show if the action button is disabled */}\n\tonClick={() => {}/* optional: A callback for when the action button is clicked */}\n\tid={\"string\"/* optional: Id of the action button */}\n\taria-label={\"string\"/* optional: Aria-label of the action button */}\n>\n\t{<div>ReactNode</div>/* optional: Element to be rendered inside the <button> */}\n</DropdownToggleAction>"},{"label":"DropdownToggleAction","content":"<DropdownToggleAction\n\tclassName={\"''\"}\n\tisDisabled={false}\n\tonClick={() => {}}\n\tid={\"string\"}\n\taria-label={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DropdownToggleAction>"},{"label":"DropdownToggleCheckbox #","content":"<DropdownToggleCheckbox\n\tclassName={\"''\"/* optional: Additional classes added to the DropdownToggleCheckbox */}\n\tisValid={true/* optional: Flag to show if the checkbox selection is valid or invalid */}\n\tisDisabled={false/* optional: Flag to show if the checkbox is disabled */}\n\tisChecked={true/* optional: Flag to show if the checkbox is checked */}\n\tchecked={true/* optional: Alternate Flag to show if the checkbox is checked */}\n\tonChange={() => undefined as any/* optional: A callback for when the checkbox selection changes */}\n\tid={\"string\"/* required: Id of the checkbox */}\n\taria-label={\"string\"/* required: Aria-label of the checkbox */}\n>\n\t{<div>ReactNode</div>/* optional: Element to be rendered inside the <span> */}\n</DropdownToggleCheckbox>"},{"label":"DropdownToggleCheckbox","content":"<DropdownToggleCheckbox\n\tclassName={\"''\"}\n\tisValid={true}\n\tisDisabled={false}\n\tisChecked={true}\n\tchecked={true}\n\tonChange={() => undefined as any}\n\tid={\"string\"}\n\taria-label={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DropdownToggleCheckbox>"},{"label":"InternalDropdownItem #","content":"<InternalDropdownItem\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown item */}\n\tlistItemClassName={\"string\"/* optional: Class applied to list element */}\n\tcomponent={'a'/* optional: Indicates which component will be used as dropdown item */}\n\tvariant={'item'/* optional: Variant of the item. The 'icon' variant should use DropdownItemIcon to wrap contained icons or images. */}\n\trole={\"'none'\"/* optional: Role for the item */}\n\tisDisabled={false/* optional: Render dropdown item as disabled option */}\n\tisHovered={false/* optional: Forces display of the hover state of the element */}\n\thref={\"''\"/* optional: Default hyperlink location */}\n\ttooltip={<div>ReactNode</div>/* optional: Tooltip to display when hovered over the item */}\n\ttooltipProps={undefined/* optional: Additional tooltip props forwarded to the Tooltip component */}\n\tindex={-1/* optional:  */}\n\tcontext={{\n  keyHandler: () => {},\n  sendRef: () => {}\n}/* optional:  */}\n\tonClick={(event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => undefined as any/* optional: Callback for click event */}\n\tid={\"string\"/* optional: ID for the list element */}\n\tcomponentID={\"string\"/* optional: ID for the component element */}\n\tadditionalChild={<div>ReactNode</div>/* optional: Additional content to include alongside item within the <li> */}\n\tcustomChild={<div>ReactNode</div>/* optional: Custom item rendering that receives the DropdownContext */}\n\tenterTriggersArrowDown={false/* optional: Flag indicating if hitting enter on an item also triggers an arrow down key press */}\n>\n\t{<div>ReactNode</div>/* optional: Anything which can be rendered as dropdown item */}\n</InternalDropdownItem>"},{"label":"InternalDropdownItem","content":"<InternalDropdownItem\n\tclassName={\"''\"}\n\tlistItemClassName={\"string\"}\n\tcomponent={'a'}\n\tvariant={'item'}\n\trole={\"'none'\"}\n\tisDisabled={false}\n\tisHovered={false}\n\thref={\"''\"}\n\ttooltip={<div>ReactNode</div>}\n\ttooltipProps={undefined}\n\tindex={-1}\n\tcontext={{\n  keyHandler: () => {},\n  sendRef: () => {}\n}}\n\tonClick={(event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => undefined as any}\n\tid={\"string\"}\n\tcomponentID={\"string\"}\n\tadditionalChild={<div>ReactNode</div>}\n\tcustomChild={<div>ReactNode</div>}\n\tenterTriggersArrowDown={false}\n>\n\t{<div>ReactNode</div>}\n</InternalDropdownItem>"},{"label":"KebabToggle #","content":"<KebabToggle\n\tid={\"''\"/* optional: HTML ID of dropdown toggle */}\n\tclassName={\"''\"/* optional: Classess applied to root element of dropdown toggle */}\n\tisOpen={false/* optional: Flag to indicate if menu is opened */}\n\taria-label={\"'Actions'\"/* optional: Label Toggle button */}\n\tonToggle={() => undefined as void/* optional: Callback called when toggle is clicked */}\n\tparentRef={null/* optional: Element which wraps toggle */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n\tisDisabled={false/* optional: Disables the dropdown toggle */}\n\tisPlain={false/* optional: Display the toggle with no border or background */}\n\ttype={'button'/* optional: Type to put on the button */}\n>\n\t{<>ReactNode</>/* optional: Anything which can be rendered as dropdown toggle */}\n</KebabToggle>"},{"label":"KebabToggle","content":"<KebabToggle\n\tid={\"''\"}\n\tclassName={\"''\"}\n\tisOpen={false}\n\taria-label={\"'Actions'\"}\n\tonToggle={() => undefined as void}\n\tparentRef={null}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n\tisDisabled={false}\n\tisPlain={false}\n\ttype={'button'}\n>\n\t{<>ReactNode</>}\n</KebabToggle>"},{"label":"Toggle #","content":"<Toggle\n\tid={\"string\"/* required: HTML ID of dropdown toggle */}\n\ttype={'button'/* optional: Type to put on the button */}\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown toggle */}\n\tisOpen={false/* optional: Flag to indicate if menu is opened */}\n\tonToggle={() => {}/* optional: Callback called when toggle is clicked */}\n\tonEnter={() => {}/* optional: Callback called when the Enter key is pressed */}\n\tparentRef={'any'/* optional: Element which wraps toggle */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n\tisDisabled={false/* optional: Disables the dropdown toggle */}\n\tisPlain={false/* optional: Display the toggle with no border or background */}\n\tisPrimary={false/* optional: Display the toggle with a primary button style */}\n\tisSplitButton={false/* optional: Style the toggle as a child of a split button */}\n\tariaHasPopup={true/* optional: Flag for aria popup */}\n>\n\t{<div>ReactNode</div>/* optional: Anything which can be rendered as dropdown toggle */}\n</Toggle>"},{"label":"Toggle","content":"<Toggle\n\tid={\"string\"}\n\ttype={'button'}\n\tclassName={\"''\"}\n\tisOpen={false}\n\tonToggle={() => {}}\n\tonEnter={() => {}}\n\tparentRef={'any'}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n\tisDisabled={false}\n\tisPlain={false}\n\tisPrimary={false}\n\tisSplitButton={false}\n\tariaHasPopup={true}\n>\n\t{<div>ReactNode</div>}\n</Toggle>"},{"label":"EmptyState #","content":"<EmptyState\n\tclassName={\"''\"/* optional: Additional classes added to the EmptyState */}\n\tvariant={'small'/* optional: Modifies EmptyState max-width */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the EmptyState */}\n</EmptyState>"},{"label":"EmptyState","content":"<EmptyState\n\tclassName={\"''\"}\n\tvariant={'small'}\n>\n\t{<div>ReactNode</div>}\n</EmptyState>"},{"label":"EmptyStateBody #","content":"<EmptyStateBody\n\tclassName={\"''\"/* optional: Additional classes added to the EmptyState */}\n>\n\t{<div>ReactNode</div>/* optional: Content rendered inside the EmptyState */}\n</EmptyStateBody>"},{"label":"EmptyStateBody","content":"<EmptyStateBody\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</EmptyStateBody>"},{"label":"EmptyStateIcon #","content":"<EmptyStateIcon\n\tcolor={\"string\"/* optional: deprecated */}\n\tsize={'sm'/* optional: deprecated */}\n\ttitle={\"string\"/* optional: deprecated */}\n\tclassName={\"''\"/* optional: Additional classes added to the EmptyState */}\n\ticon={null/* optional: Icon component to be rendered inside the EmptyState on icon variant */}\n\tcomponent={null/* optional: Component to be rendered inside the EmptyState on container variant */}\n\tvariant={'icon'/* optional: Adds empty state icon variant styles */}\n/>"},{"label":"EmptyStateIcon","content":"<EmptyStateIcon\n\tcolor={\"string\"}\n\tsize={'sm'}\n\ttitle={\"string\"}\n\tclassName={\"''\"}\n\ticon={null}\n\tcomponent={null}\n\tvariant={'icon'}\n/>"},{"label":"EmptyStatePrimary #","content":"<EmptyStatePrimary\n\tclassName={\"''\"/* optional: Additional classes added to the EmptyStatePrimary */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the EmptyStatePrimary */}\n</EmptyStatePrimary>"},{"label":"EmptyStatePrimary","content":"<EmptyStatePrimary\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</EmptyStatePrimary>"},{"label":"EmptyStateSecondaryActions #","content":"<EmptyStateSecondaryActions\n\tclassName={\"''\"/* optional: Additional classes added to the EmptyState */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the EmptyState */}\n</EmptyStateSecondaryActions>"},{"label":"EmptyStateSecondaryActions","content":"<EmptyStateSecondaryActions\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</EmptyStateSecondaryActions>"},{"label":"Expandable #","content":"<Expandable\n\tclassName={\"''\"/* optional: Additional classes added to the Expandable Component */}\n\tisExpanded={true/* optional: Flag to indicate if the content is expanded */}\n\ttoggleText={\"''\"/* optional: Text that appears in the toggle */}\n\ttoggleTextExpanded={\"''\"/* optional: Text that appears in the toggle when expanded (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */}\n\ttoggleTextCollapsed={\"''\"/* optional: Text that appears in the toggle when collapsed (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */}\n\tonToggle={(): any => undefined/* optional: Callback function to toggle the expandable content */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the Expandable Component */}\n</Expandable>"},{"label":"Expandable","content":"<Expandable\n\tclassName={\"''\"}\n\tisExpanded={true}\n\ttoggleText={\"''\"}\n\ttoggleTextExpanded={\"''\"}\n\ttoggleTextCollapsed={\"''\"}\n\tonToggle={(): any => undefined}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n>\n\t{<div>ReactNode</div>}\n</Expandable>"},{"label":"ActionGroup #","content":"<ActionGroup\n\tclassName={\"''\"/* optional: Additional classes added to the ActionGroup. */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as ActionGroup content. */}\n</ActionGroup>"},{"label":"ActionGroup","content":"<ActionGroup\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</ActionGroup>"},{"label":"Form #","content":"<Form\n\tclassName={\"''\"/* optional: Additional classes added to the Form. */}\n\tisHorizontal={false/* optional: Sets the Form to horizontal. */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as Form content. */}\n</Form>"},{"label":"Form","content":"<Form\n\tclassName={\"''\"}\n\tisHorizontal={false}\n>\n\t{<>ReactNode</>}\n</Form>"},{"label":"FormGroup #","content":"<FormGroup\n\tclassName={\"''\"/* optional: Additional classes added to the FormGroup. */}\n\tlabel={<div>ReactNode</div>/* optional: Label text before the field. */}\n\tisRequired={false/* optional: Sets the FormGroup required. */}\n\tisValid={true/* optional: Sets the FormGroup isValid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={'default'/* optional: Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state. | If set to error,  text color of helper text will be modified to indicate error state. */}\n\tisInline={false/* optional: Sets the FormGroup isInline. */}\n\thelperText={<div>ReactNode</div>/* optional: Helper text after the field. It can be a simple text or an object. */}\n\thelperTextInvalid={<div>ReactNode</div>/* optional: Helper text after the field when the field is invalid. It can be a simple text or an object. */}\n\tfieldId={\"string\"/* required: ID of the included field. It has to be the same for proper working. */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as FormGroup content. */}\n</FormGroup>"},{"label":"FormGroup","content":"<FormGroup\n\tclassName={\"''\"}\n\tlabel={<div>ReactNode</div>}\n\tisRequired={false}\n\tisValid={true}\n\tvalidated={'default'}\n\tisInline={false}\n\thelperText={<div>ReactNode</div>}\n\thelperTextInvalid={<div>ReactNode</div>}\n\tfieldId={\"string\"}\n>\n\t{<>ReactNode</>}\n</FormGroup>"},{"label":"FormHelperText #","content":"<FormHelperText\n\tisError={false/* optional: Adds error styling to the Helper Text  * */}\n\tisHidden={true/* optional: Hides the helper text * */}\n\tclassName={\"''\"/* optional: Additional classes added to the Helper Text Item */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Helper Text Item */}\n</FormHelperText>"},{"label":"FormHelperText","content":"<FormHelperText\n\tisError={false}\n\tisHidden={true}\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</FormHelperText>"},{"label":"FormSelect #","content":"<FormSelect\n\tclassName={\"''\"/* optional: additional classes added to the FormSelect control */}\n\tvalue={''/* optional: value of selected option */}\n\tisValid={true/* optional: Flag indicating selection is valid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={'default'/* optional:  */}\n\tisDisabled={false/* optional: Flag indicating the FormSelect is disabled */}\n\tisRequired={false/* optional: Sets the FormSelectrequired. */}\n\tonBlur={(): any => undefined/* optional: Optional callback for updating when selection loses focus */}\n\tonFocus={(): any => undefined/* optional: Optional callback for updating when selection gets focus */}\n\tonChange={(): any => undefined/* optional: Optional callback for updating when selection changes */}\n\taria-label={\"string\"/* optional: Custom flag to show that the FormSelect requires an associated id or aria-label. */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the FormSelect */}\n</FormSelect>"},{"label":"FormSelect","content":"<FormSelect\n\tclassName={\"''\"}\n\tvalue={''}\n\tisValid={true}\n\tvalidated={'default'}\n\tisDisabled={false}\n\tisRequired={false}\n\tonBlur={(): any => undefined}\n\tonFocus={(): any => undefined}\n\tonChange={(): any => undefined}\n\taria-label={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</FormSelect>"},{"label":"FormSelectOption #","content":"<FormSelectOption\n\tclassName={\"''\"/* optional: additional classes added to the Select Option */}\n\tvalue={''/* optional: the value for the option */}\n\tlabel={\"string\"/* required: the label for the option */}\n\tisDisabled={false/* optional: flag indicating if the option is disabled */}\n/>"},{"label":"FormSelectOption","content":"<FormSelectOption\n\tclassName={\"''\"}\n\tvalue={''}\n\tlabel={\"string\"}\n\tisDisabled={false}\n/>"},{"label":"FormSelectOptionGroup #","content":"<FormSelectOptionGroup\n\tclassName={\"''\"/* optional: additional classes added to the Select Option */}\n\tlabel={\"string\"/* required: the label for the option */}\n\tisDisabled={false/* optional: flag indicating if the Option Group is disabled */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Select Option Group */}\n</FormSelectOptionGroup>"},{"label":"FormSelectOptionGroup","content":"<FormSelectOptionGroup\n\tclassName={\"''\"}\n\tlabel={\"string\"}\n\tisDisabled={false}\n>\n\t{<>ReactNode</>}\n</FormSelectOptionGroup>"},{"label":"InputGroup #","content":"<InputGroup\n\tclassName={\"''\"/* optional: Additional classes added to the input group. */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the input group. */}\n</InputGroup>"},{"label":"InputGroup","content":"<InputGroup\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</InputGroup>"},{"label":"InputGroupText #","content":"<InputGroupText\n\tclassName={\"''\"/* optional: Additional classes added to the input group text. */}\n\tcomponent={'span'/* optional: Component that wraps the input group text. */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the input group text. */}\n</InputGroupText>"},{"label":"InputGroupText","content":"<InputGroupText\n\tclassName={\"''\"}\n\tcomponent={'span'}\n>\n\t{<div>ReactNode</div>}\n</InputGroupText>"},{"label":"Label #","content":"<Label\n\tclassName={\"''\"/* optional: Additional classes added to the label. */}\n\tisCompact={false/* optional: Flag to show if the label is compact. */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the label. */}\n</Label>"},{"label":"Label","content":"<Label\n\tclassName={\"''\"}\n\tisCompact={false}\n>\n\t{<div>ReactNode</div>}\n</Label>"},{"label":"ListItem #","content":"<ListItem\n\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered inside of list item */}\n</ListItem>"},{"label":"ListItem","content":"<ListItem\n\n>\n\t{<>ReactNode</>}\n</ListItem>"},{"label":"Login #","content":"<Login\n\tclassName={\"''\"/* optional: Additional classes added to the login layout */}\n\tfooter={null/* optional: Footer component (e.g. <LoginFooter />) */}\n\theader={null/* optional: Header component (e.g. <LoginHeader />) */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the main section of the login layout */}\n</Login>"},{"label":"Login","content":"<Login\n\tclassName={\"''\"}\n\tfooter={null}\n\theader={null}\n>\n\t{<>ReactNode</>}\n</Login>"},{"label":"LoginFooter #","content":"<LoginFooter\n\tclassName={\"''\"/* optional: Additional props are spread to the container <footer> */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the footer of the login layout */}\n</LoginFooter>"},{"label":"LoginFooter","content":"<LoginFooter\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</LoginFooter>"},{"label":"LoginFooterItem #","content":"<LoginFooterItem\n\tclassName={\"''\"/* optional: Additional classes added to the Footer Link Item */}\n\thref={\"'#'\"/* optional: The URL of the Footer Link Item */}\n\ttarget={\"'_blank'\"/* optional: Specifies where to open the linked document */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the footer Link Item */}\n</LoginFooterItem>"},{"label":"LoginFooterItem","content":"<LoginFooterItem\n\tclassName={\"''\"}\n\thref={\"'#'\"}\n\ttarget={\"'_blank'\"}\n>\n\t{<>ReactNode</>}\n</LoginFooterItem>"},{"label":"LoginForm #","content":"<LoginForm\n\tnoAutoFocus={false/* optional: Flag to indicate if the first dropdown item should not gain initial focus */}\n\tclassName={\"''\"/* optional: Additional classes added to the Login Main Body's Form */}\n\tshowHelperText={false/* optional: Flag indicating the Helper Text is visible * */}\n\thelperText={null/* optional: Content displayed in the Helper Text component * */}\n\tusernameLabel={\"'Username'\"/* optional: Label for the Username Input Field */}\n\tusernameValue={\"''\"/* optional: Value for the Username */}\n\tonChangeUsername={() => undefined as any/* optional: Function that handles the onChange event for the Username */}\n\tisValidUsername={true/* optional: Flag indicating if the Username is valid */}\n\tpasswordLabel={\"'Password'\"/* optional: Label for the Password Input Field */}\n\tpasswordValue={\"''\"/* optional: Value for the Password */}\n\tonChangePassword={() => undefined as any/* optional: Function that handles the onChange event for the Password */}\n\tisValidPassword={true/* optional: Flag indicating if the Password is valid */}\n\tloginButtonLabel={\"'Log In'\"/* optional: Label for the Log in Button Input */}\n\tisLoginButtonDisabled={false/* optional: Flag indicating if the Login Button is disabled */}\n\tonLoginButtonClick={() => undefined as any/* optional: Function that is called when the Login button is clicked */}\n\trememberMeLabel={\"''\"/* optional: Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */}\n\tisRememberMeChecked={false/* optional: Flag indicating if the remember me Checkbox is checked. */}\n\tonChangeRememberMe={() => undefined as any/* optional: Function that handles the onChange event for the Remember Me Checkbox */}\n\trememberMeAriaLabel={\"''\"/* optional:  */}\n/>"},{"label":"LoginForm","content":"<LoginForm\n\tnoAutoFocus={false}\n\tclassName={\"''\"}\n\tshowHelperText={false}\n\thelperText={null}\n\tusernameLabel={\"'Username'\"}\n\tusernameValue={\"''\"}\n\tonChangeUsername={() => undefined as any}\n\tisValidUsername={true}\n\tpasswordLabel={\"'Password'\"}\n\tpasswordValue={\"''\"}\n\tonChangePassword={() => undefined as any}\n\tisValidPassword={true}\n\tloginButtonLabel={\"'Log In'\"}\n\tisLoginButtonDisabled={false}\n\tonLoginButtonClick={() => undefined as any}\n\trememberMeLabel={\"''\"}\n\tisRememberMeChecked={false}\n\tonChangeRememberMe={() => undefined as any}\n\trememberMeAriaLabel={\"''\"}\n/>"},{"label":"LoginHeader #","content":"<LoginHeader\n\tclassName={\"''\"/* optional: Additional classes added to the login header */}\n\theaderBrand={null/* optional: Header Brand component (e.g. <LoginHeader />) */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the header of the login layout */}\n</LoginHeader>"},{"label":"LoginHeader","content":"<LoginHeader\n\tclassName={\"''\"}\n\theaderBrand={null}\n>\n\t{<>ReactNode</>}\n</LoginHeader>"},{"label":"LoginMainBody #","content":"<LoginMainBody\n\tclassName={\"''\"/* optional: Additional classes added to the Login Main Body */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Login Main Body */}\n</LoginMainBody>"},{"label":"LoginMainBody","content":"<LoginMainBody\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</LoginMainBody>"},{"label":"LoginMainFooter #","content":"<LoginMainFooter\n\tclassName={\"''\"/* optional: Additional classes added to the Login Main Footer */}\n\tsocialMediaLoginContent={null/* optional: Content rendered inside the Login Main Footer as Social Media Links* */}\n\tsignUpForAccountMessage={null/* optional: Content rendered inside of Login Main Footer Band to display a sign up for account message */}\n\tforgotCredentials={null/* optional: Content rendered inside of Login Main Footer Band do display a forgot credentials link* */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Login Main Footer */}\n</LoginMainFooter>"},{"label":"LoginMainFooter","content":"<LoginMainFooter\n\tclassName={\"''\"}\n\tsocialMediaLoginContent={null}\n\tsignUpForAccountMessage={null}\n\tforgotCredentials={null}\n>\n\t{<>ReactNode</>}\n</LoginMainFooter>"},{"label":"LoginMainFooterBandItem #","content":"<LoginMainFooterBandItem\n\tclassName={\"''\"/* optional: Additional classes added to the Footer Link Item */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the footer Link Item */}\n</LoginMainFooterBandItem>"},{"label":"LoginMainFooterBandItem","content":"<LoginMainFooterBandItem\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</LoginMainFooterBandItem>"},{"label":"LoginMainFooterLinksItem #","content":"<LoginMainFooterLinksItem\n\thref={\"''\"/* optional: HREF for Footer Link Item */}\n\ttarget={\"''\"/* optional: Target for Footer Link Item */}\n\tclassName={\"''\"/* optional: Additional classes added to the Footer Link Item */}\n\tlinkComponent={'a'/* optional: Component used to render the Footer Link Item */}\n\tlinkComponentProps={'any'/* optional: Props for the LinkComponent */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the footer Link Item */}\n</LoginMainFooterLinksItem>"},{"label":"LoginMainFooterLinksItem","content":"<LoginMainFooterLinksItem\n\thref={\"''\"}\n\ttarget={\"''\"}\n\tclassName={\"''\"}\n\tlinkComponent={'a'}\n\tlinkComponentProps={'any'}\n>\n\t{<>ReactNode</>}\n</LoginMainFooterLinksItem>"},{"label":"LoginMainHeader #","content":"<LoginMainHeader\n\tclassName={\"''\"/* optional: Additional classes added to the Login Main Header */}\n\ttitle={\"''\"/* optional: Title for the Login Main Header */}\n\tsubtitle={\"''\"/* optional: Subtitle that contains the Text, URL, and URL Text for the Login Main Header */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Login Main Header */}\n</LoginMainHeader>"},{"label":"LoginMainHeader","content":"<LoginMainHeader\n\tclassName={\"''\"}\n\ttitle={\"''\"}\n\tsubtitle={\"''\"}\n>\n\t{<>ReactNode</>}\n</LoginMainHeader>"},{"label":"LoginPage #","content":"<LoginPage\n\tclassName={\"''\"/* optional: Additional classes added to the LoginPage. */}\n\tbrandImgSrc={\"''\"/* optional: Attribute that specifies the URL of the brand image for the LoginPage */}\n\tbrandImgAlt={\"''\"/* optional: Attribute that specifies the alt text of the brand image for the LoginPage. */}\n\tbackgroundImgSrc={''/* optional: Attribute that specifies the URL of the background image for the LoginPage */}\n\tbackgroundImgAlt={\"''\"/* optional: Attribute that specifies the alt text of the background image for the LoginPage. */}\n\ttextContent={\"''\"/* optional: Content rendered inside of the Text Component of the LoginPage */}\n\tfooterListItems={null/* optional: Items rendered inside of the Footer List Component of the LoginPage */}\n\tfooterListVariants={undefined/* optional: Adds list variant styles for the Footer List component of the LoginPage. The only current value is'inline' */}\n\tloginTitle={\"string\"/* required: Title for the Login Main Body Header of the LoginPage */}\n\tloginSubtitle={\"string\"/* optional: Subtitle for the Login Main Body Header of the LoginPage */}\n\tsignUpForAccountMessage={null/* optional: Content rendered inside of Login Main Footer Band to display a sign up for account message */}\n\tforgotCredentials={null/* optional: Content rendered inside of Login Main Footer Band to display a forgot credentials link* */}\n\tsocialMediaLoginContent={null/* optional: Content rendered inside of Social Media Login footer section . */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered inside of the LoginPage (e.g. <LoginPageForm>) */}\n</LoginPage>"},{"label":"LoginPage","content":"<LoginPage\n\tclassName={\"''\"}\n\tbrandImgSrc={\"''\"}\n\tbrandImgAlt={\"''\"}\n\tbackgroundImgSrc={''}\n\tbackgroundImgAlt={\"''\"}\n\ttextContent={\"''\"}\n\tfooterListItems={null}\n\tfooterListVariants={undefined}\n\tloginTitle={\"string\"}\n\tloginSubtitle={\"string\"}\n\tsignUpForAccountMessage={null}\n\tforgotCredentials={null}\n\tsocialMediaLoginContent={null}\n>\n\t{<>ReactNode</>}\n</LoginPage>"},{"label":"Modal #","content":"<Modal\n\tclassName={\"''\"/* optional: Additional classes added to the Modal */}\n\tisOpen={false/* optional: Flag to show the modal */}\n\theader={<div>ReactNode</div>/* optional: Complex header (more than just text), supersedes title for header content */}\n\ttitle={\"string\"/* required: Simple text content of the Modal Header, also used for aria-label on the body */}\n\thideTitle={false/* optional: Flag to hide the title */}\n\tshowClose={true/* optional: Flag to show the close button in the header area of the modal */}\n\tariaDescribedById={\"''\"/* optional: Id to use for Modal Box description */}\n\tfooter={<div>ReactNode</div>/* optional: Custom footer */}\n\tactions={[]/* optional: Action buttons to add to the standard Modal Footer, ignored if `footer` is given */}\n\tisFooterLeftAligned={false/* optional: Flag to indicate that the Footer content is left aligned */}\n\tonClose={() => undefined as any/* optional: A callback for when the close button is clicked */}\n\twidth={1/* optional: Default width of the Modal. */}\n\tisLarge={false/* optional: Creates a large version of the Modal */}\n\tisSmall={false/* optional: Creates a small version of the Modal */}\n\tappendTo={(typeof document !== 'undefined' && document.body) || null/* optional: The parent container to append the modal to. Defaults to document.body */}\n\tdisableFocusTrap={true/* optional: Flag to disable focus trap */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the Modal. */}\n</Modal>"},{"label":"Modal","content":"<Modal\n\tclassName={\"''\"}\n\tisOpen={false}\n\theader={<div>ReactNode</div>}\n\ttitle={\"string\"}\n\thideTitle={false}\n\tshowClose={true}\n\tariaDescribedById={\"''\"}\n\tfooter={<div>ReactNode</div>}\n\tactions={[]}\n\tisFooterLeftAligned={false}\n\tonClose={() => undefined as any}\n\twidth={1}\n\tisLarge={false}\n\tisSmall={false}\n\tappendTo={(typeof document !== 'undefined' && document.body) || null}\n\tdisableFocusTrap={true}\n>\n\t{<div>ReactNode</div>}\n</Modal>"},{"label":"ModalBox #","content":"<ModalBox\n\tclassName={\"''\"/* optional: Additional classes added to the ModalBox */}\n\tisLarge={false/* optional: Creates a large version of the ModalBox */}\n\tisSmall={false/* optional: Creates a small version of the ModalBox. */}\n\ttitle={\"string\"/* required: String to use for Modal Box aria-label */}\n\tid={\"string\"/* required: Id to use for Modal Box description */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the ModalBox. */}\n</ModalBox>"},{"label":"ModalBox","content":"<ModalBox\n\tclassName={\"''\"}\n\tisLarge={false}\n\tisSmall={false}\n\ttitle={\"string\"}\n\tid={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</ModalBox>"},{"label":"ModalBoxBody #","content":"<ModalBoxBody\n\tclassName={\"''\"/* optional: Additional classes added to the ModalBoxBody */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the ModalBoxBody */}\n</ModalBoxBody>"},{"label":"ModalBoxBody","content":"<ModalBoxBody\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</ModalBoxBody>"},{"label":"ModalBoxCloseButton #","content":"<ModalBoxCloseButton\n\tclassName={\"''\"/* optional: Additional classes added to the close button */}\n\tonClose={() => undefined as any/* optional: A callback for when the close button is clicked */}\n/>"},{"label":"ModalBoxCloseButton","content":"<ModalBoxCloseButton\n\tclassName={\"''\"}\n\tonClose={() => undefined as any}\n/>"},{"label":"ModalBoxFooter #","content":"<ModalBoxFooter\n\tclassName={\"''\"/* optional: Additional classes added to the Footer */}\n\tisLeftAligned={false/* optional: Flag to align buttons to the left */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Footer */}\n</ModalBoxFooter>"},{"label":"ModalBoxFooter","content":"<ModalBoxFooter\n\tclassName={\"''\"}\n\tisLeftAligned={false}\n>\n\t{<>ReactNode</>}\n</ModalBoxFooter>"},{"label":"ModalBoxHeader #","content":"<ModalBoxHeader\n\tclassName={\"''\"/* optional: Additional classes added to the button */}\n\thideTitle={false/* optional: Flag to hide the title */}\n\theadingLevel={'h1'/* optional: The heading level to use */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the Header */}\n</ModalBoxHeader>"},{"label":"ModalBoxHeader","content":"<ModalBoxHeader\n\tclassName={\"''\"}\n\thideTitle={false}\n\theadingLevel={'h1'}\n>\n\t{<>ReactNode</>}\n</ModalBoxHeader>"},{"label":"ModalContent #","content":"<ModalContent\n\tclassName={\"''\"/* optional: Additional classes added to the button */}\n\tisLarge={false/* optional: Creates a large version of the Modal */}\n\tisSmall={false/* optional: Creates a small version of the Modal */}\n\tisOpen={false/* optional: Flag to show the modal */}\n\theader={null/* optional: Complex header (more than just text), supersedes title for header content */}\n\ttitle={\"string\"/* required: Simple text content of the Modal Header, also used for aria-label on the body */}\n\thideTitle={false/* optional: Flag to show the title (ignored for custom headers) */}\n\tshowClose={true/* optional: Flag to show the close button in the header area of the modal */}\n\twidth={-1/* optional: Default width of the content. */}\n\tfooter={null/* optional: Custom footer */}\n\tactions={[]/* optional: Action buttons to add to the standard Modal Footer, ignored if `footer` is given */}\n\tisFooterLeftAligned={false/* optional: Flag to indicate that the Footer content is left aligned */}\n\tonClose={() => undefined as any/* optional: A callback for when the close button is clicked */}\n\tariaDescribedById={\"''\"/* optional: Id to use for Modal Box description */}\n\tid={\"''\"/* optional: Id of the ModalBoxBody */}\n\tdisableFocusTrap={false/* optional: Flag to disable focus trap */}\n>\n\t{<div>ReactNode</div>/* required: Content rendered inside the Modal. */}\n</ModalContent>"},{"label":"ModalContent","content":"<ModalContent\n\tclassName={\"''\"}\n\tisLarge={false}\n\tisSmall={false}\n\tisOpen={false}\n\theader={null}\n\ttitle={\"string\"}\n\thideTitle={false}\n\tshowClose={true}\n\twidth={-1}\n\tfooter={null}\n\tactions={[]}\n\tisFooterLeftAligned={false}\n\tonClose={() => undefined as any}\n\tariaDescribedById={\"''\"}\n\tid={\"''\"}\n\tdisableFocusTrap={false}\n>\n\t{<div>ReactNode</div>}\n</ModalContent>"},{"label":"Nav #","content":"<Nav\n\tclassName={\"''\"/* optional: Additional classes added to the container */}\n\tonSelect={() => undefined/* optional: Callback for updating when item selection changes */}\n\tonToggle={() => undefined/* optional: Callback for when a list is expanded or collapsed */}\n\taria-label={\"''\"/* optional: Accessibility label */}\n\ttheme={'light'/* optional: Indicates which theme color to use */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered inside of the nav */}\n</Nav>"},{"label":"Nav","content":"<Nav\n\tclassName={\"''\"}\n\tonSelect={() => undefined}\n\tonToggle={() => undefined}\n\taria-label={\"''\"}\n\ttheme={'light'}\n>\n\t{<>ReactNode</>}\n</Nav>"},{"label":"NavExpandable #","content":"<NavExpandable\n\ttitle={\"string\"/* required: Title shown for the expandable list */}\n\tsrText={\"''\"/* optional: If defined, screen readers will read this text instead of the list title */}\n\tisExpanded={false/* optional: Boolean to programatically expand or collapse section */}\n\tclassName={\"''\"/* optional: Additional classes added to the container */}\n\tgroupId={null/* optional: Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\tisActive={false/* optional: If true makes the expandable list title active */}\n\tid={\"''\"/* optional: Identifier to use for the section aria label */}\n\tonExpand={(e: React.MouseEvent<HTMLLIElement, MouseEvent>, val: boolean) => undefined as void/* optional: allow consumer to optionally override this callback and manage expand state externally */}\n>\n\t{''/* optional: Anything that can be rendered inside of the expandable list */}\n</NavExpandable>"},{"label":"NavExpandable","content":"<NavExpandable\n\ttitle={\"string\"}\n\tsrText={\"''\"}\n\tisExpanded={false}\n\tclassName={\"''\"}\n\tgroupId={null}\n\tisActive={false}\n\tid={\"''\"}\n\tonExpand={(e: React.MouseEvent<HTMLLIElement, MouseEvent>, val: boolean) => undefined as void}\n>\n\t{''}\n</NavExpandable>"},{"label":"NavGroup #","content":"<NavGroup\n\ttitle={\"string\"/* required: Title shown for the group */}\n\tclassName={\"''\"/* optional: Additional classes added to the container */}\n\tid={\"string\"/* optional: Identifier to use for the section aria label */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered inside of the group */}\n</NavGroup>"},{"label":"NavGroup","content":"<NavGroup\n\ttitle={\"string\"}\n\tclassName={\"''\"}\n\tid={\"string\"}\n>\n\t{<>ReactNode</>}\n</NavGroup>"},{"label":"NavItem #","content":"<NavItem\n\tclassName={\"''\"/* optional: Additional classes added to the nav item */}\n\tto={\"''\"/* optional: Target navigation link */}\n\tisActive={false/* optional: Flag indicating whether the item is active */}\n\tgroupId={null/* optional: Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\titemId={null/* optional: Item identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\tpreventDefault={false/* optional: If true prevents the default anchor link action to occur. Set to true if you want to handle navigation yourself. */}\n\tonClick={null/* optional: Callback for item click */}\n\tcomponent={'a'/* optional: Component used to render NavItems */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the nav item */}\n</NavItem>"},{"label":"NavItem","content":"<NavItem\n\tclassName={\"''\"}\n\tto={\"''\"}\n\tisActive={false}\n\tgroupId={null}\n\titemId={null}\n\tpreventDefault={false}\n\tonClick={null}\n\tcomponent={'a'}\n>\n\t{<>ReactNode</>}\n</NavItem>"},{"label":"NavList #","content":"<NavList\n\tclassName={\"''\"/* optional: Additional classes added to the list */}\n\tvariant={'default'/* optional: Indicates the list type. */}\n\tariaLeftScroll={\"'Scroll left'\"/* optional: aria-label for the left scroll button */}\n\tariaRightScroll={\"'Scroll right'\"/* optional: aria-label for the right scroll button */}\n>\n\t{<>ReactNode</>/* optional: Children nodes */}\n</NavList>"},{"label":"NavList","content":"<NavList\n\tclassName={\"''\"}\n\tvariant={'default'}\n\tariaLeftScroll={\"'Scroll left'\"}\n\tariaRightScroll={\"'Scroll right'\"}\n>\n\t{<>ReactNode</>}\n</NavList>"},{"label":"NotificationBadge #","content":"<NotificationBadge\n\tisRead={false/* optional: Adds styling to the notification badge to indicate it has been read */}\n\tclassName={\"string\"/* optional: additional classes added to the Notification Badge */}\n\taria-label={\"string\"/* optional: Adds accessible text to the Notification Badge. */}\n>\n\t{<div>ReactNode</div>/* optional: content rendered inside the Notification Badge */}\n</NotificationBadge>"},{"label":"NotificationBadge","content":"<NotificationBadge\n\tisRead={false}\n\tclassName={\"string\"}\n\taria-label={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</NotificationBadge>"},{"label":"OptionsMenu #","content":"<OptionsMenu\n\tclassName={\"''\"/* optional: Classes applied to root element of the options menu */}\n\tid={\"string\"/* required: Id of the root element of the options menu */}\n\tmenuItems={[]/* required: Array of OptionsMenuItem and/or OptionMenuGroup nodes that will be rendered in the options menu list */}\n\ttoggle={<p>ReactElement</p>/* required: Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the options menu */}\n\tisPlain={true/* optional: Flag to indicate the toggle has no border or background */}\n\tisOpen={true/* optional: Flag to indicate if menu is open */}\n\tisText={false/* optional: Flag to indicate if toggle is textual toggle */}\n\tisGrouped={false/* optional: Flag to indicate if menu is groupped */}\n\tariaLabelMenu={\"string\"/* optional: Provides an accessible name for the options menu */}\n\tposition={'right'/* optional: Indicates where menu will be aligned horizontally */}\n\tdirection={'up'/* optional: Menu will open up or open down from the options menu toggle */}\n/>"},{"label":"OptionsMenu","content":"<OptionsMenu\n\tclassName={\"''\"}\n\tid={\"string\"}\n\tmenuItems={[]}\n\ttoggle={<p>ReactElement</p>}\n\tisPlain={true}\n\tisOpen={true}\n\tisText={false}\n\tisGrouped={false}\n\tariaLabelMenu={\"string\"}\n\tposition={'right'}\n\tdirection={'up'}\n/>"},{"label":"OptionsMenuItem #","content":"<OptionsMenuItem\n\tclassName={\"string\"/* optional: Classes applied to root element of an options menu item */}\n\tisSelected={false/* optional: Render options menu item as selected */}\n\tisDisabled={true/* optional: Render options menu item as disabled option */}\n\tonSelect={() => null as any/* optional: Callback for when this options menu item is selected */}\n\tid={\"''\"/* optional: Unique id of this options menu item */}\n>\n\t{<>ReactNode</>/* optional: Anything which can be rendered as an options menu item */}\n</OptionsMenuItem>"},{"label":"OptionsMenuItem","content":"<OptionsMenuItem\n\tclassName={\"string\"}\n\tisSelected={false}\n\tisDisabled={true}\n\tonSelect={() => null as any}\n\tid={\"''\"}\n>\n\t{<>ReactNode</>}\n</OptionsMenuItem>"},{"label":"OptionsMenuItemGroup #","content":"<OptionsMenuItemGroup\n\tclassName={\"''\"/* optional: Classes applied to root element of the options menu items group */}\n\tariaLabel={\"''\"/* optional: Provides an accessible name for the options menu items group */}\n\tgroupTitle={''/* optional: Optional title for the options menu items group */}\n\thasSeparator={false/* optional: Flag indicating this options menu items group will be followed by a horizontal separator */}\n>\n\t{<>ReactNode</>/* optional: Content to be rendered in the options menu items component */}\n</OptionsMenuItemGroup>"},{"label":"OptionsMenuItemGroup","content":"<OptionsMenuItemGroup\n\tclassName={\"''\"}\n\tariaLabel={\"''\"}\n\tgroupTitle={''}\n\thasSeparator={false}\n>\n\t{<>ReactNode</>}\n</OptionsMenuItemGroup>"},{"label":"OptionsMenuSeparator #","content":"<OptionsMenuSeparator\n\tclassName={\"''\"/* optional: Classes applied to root element of options menu separator item */}\n/>"},{"label":"OptionsMenuSeparator","content":"<OptionsMenuSeparator\n\tclassName={\"''\"}\n/>"},{"label":"OptionsMenuToggle #","content":"<OptionsMenuToggle\n\tparentId={\"''\"/* optional: Id of the parent options menu component */}\n\tonToggle={(isOpen: boolean) => undefined as void/* optional: Callback for when this options menu is toggled */}\n\tisOpen={false/* optional: Flag to indicate if menu is open */}\n\tisPlain={false/* optional: Flag to indicate if the button is plain */}\n\tisFocused={false/* optional: Forces display of the hover state of the options menu */}\n\tisHovered={false/* optional: Forces display of the hover state of the options menu */}\n\tisSplitButton={false/* optional:  */}\n\tisActive={false/* optional: Forces display of the active state of the options menu */}\n\tisDisabled={false/* optional: Disables the options menu toggle */}\n\thideCaret={false/* optional: hide the toggle caret */}\n\taria-label={\"'Options menu'\"/* optional: Provides an accessible name for the button when an icon is used instead of text */}\n\tonEnter={(event: React.MouseEvent<HTMLButtonElement>) => undefined as void/* optional: Internal function to implement enter click */}\n\tparentRef={document.body/* optional: Internal parent reference */}\n\ttoggleTemplate={<div>ReactNode</div>/* optional: Content to be rendered in the options menu toggle button */}\n/>"},{"label":"OptionsMenuToggle","content":"<OptionsMenuToggle\n\tparentId={\"''\"}\n\tonToggle={(isOpen: boolean) => undefined as void}\n\tisOpen={false}\n\tisPlain={false}\n\tisFocused={false}\n\tisHovered={false}\n\tisSplitButton={false}\n\tisActive={false}\n\tisDisabled={false}\n\thideCaret={false}\n\taria-label={\"'Options menu'\"}\n\tonEnter={(event: React.MouseEvent<HTMLButtonElement>) => undefined as void}\n\tparentRef={document.body}\n\ttoggleTemplate={<div>ReactNode</div>}\n/>"},{"label":"OptionsMenuToggleWithText #","content":"<OptionsMenuToggleWithText\n\tparentId={\"''\"/* optional: Id of the parent options menu component */}\n\ttoggleText={<div>ReactNode</div>/* required: Content to be rendered inside the options menu toggle as text or another non-interactive element */}\n\ttoggleTextClassName={\"''\"/* optional: classes to be added to the options menu toggle text */}\n\ttoggleButtonContents={<div>ReactNode</div>/* optional: Content to be rendered inside the options menu toggle button */}\n\ttoggleButtonContentsClassName={\"''\"/* optional: Classes to be added to the options menu toggle button */}\n\tonToggle={() => null as any/* optional: Callback for when this options menu is toggled */}\n\tonEnter={(event: React.MouseEvent<HTMLButtonElement>) => undefined as void/* optional: Inner function to indicate open on Enter */}\n\tisOpen={false/* optional: Flag to indicate if menu is open */}\n\tisPlain={false/* optional: Flag to indicate if the button is plain */}\n\tisFocused={false/* optional: Forces display of the focused state of the options menu button */}\n\tisHovered={false/* optional: Forces display of the hover state of the options menu button */}\n\tisActive={false/* optional: Forces display of the active state of the options menu button */}\n\tisDisabled={false/* optional: Disables the options menu toggle */}\n\tparentRef={document.body/* optional: Internal parent reference */}\n\tariaHasPopup={true/* optional: Indicates that the element has a popup context menu or sub-level menu */}\n\taria-label={\"'Options menu'\"/* optional: Provides an accessible name for the button when an icon is used instead of text */}\n/>"},{"label":"OptionsMenuToggleWithText","content":"<OptionsMenuToggleWithText\n\tparentId={\"''\"}\n\ttoggleText={<div>ReactNode</div>}\n\ttoggleTextClassName={\"''\"}\n\ttoggleButtonContents={<div>ReactNode</div>}\n\ttoggleButtonContentsClassName={\"''\"}\n\tonToggle={() => null as any}\n\tonEnter={(event: React.MouseEvent<HTMLButtonElement>) => undefined as void}\n\tisOpen={false}\n\tisPlain={false}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n\tisDisabled={false}\n\tparentRef={document.body}\n\tariaHasPopup={true}\n\taria-label={\"'Options menu'\"}\n/>"},{"label":"OverflowMenu #","content":"<OverflowMenu\n\tclassName={\"string\"/* optional: Additional classes added to the OverflowMenu. */}\n\tbreakpoint={'md'/* required: Indicates breakpoint at which to switch between horizontal menu and vertical dropdown */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenu>"},{"label":"OverflowMenu","content":"<OverflowMenu\n\tclassName={\"string\"}\n\tbreakpoint={'md'}\n>\n\t{'any'}\n</OverflowMenu>"},{"label":"OverflowMenuContent #","content":"<OverflowMenuContent\n\tclassName={\"string\"/* optional: Additional classes added to the OverflowMenuContent */}\n\tisPersistent={true/* optional: Modifies the overflow menu content visibility */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenuContent>"},{"label":"OverflowMenuContent","content":"<OverflowMenuContent\n\tclassName={\"string\"}\n\tisPersistent={true}\n>\n\t{'any'}\n</OverflowMenuContent>"},{"label":"OverflowMenuControl #","content":"<OverflowMenuControl\n\tclassName={\"string\"/* optional: Additional classes added to the OverflowMenuControl */}\n\thasAdditionalOptions={true/* optional: Triggers the overflow dropdown to persist at all viewport sizes */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenuControl>"},{"label":"OverflowMenuControl","content":"<OverflowMenuControl\n\tclassName={\"string\"}\n\thasAdditionalOptions={true}\n>\n\t{'any'}\n</OverflowMenuControl>"},{"label":"OverflowMenuDropdownItem #","content":"<OverflowMenuDropdownItem\n\tisShared={false/* optional: Indicates when a dropdown item shows and hides the corresponding list item */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenuDropdownItem>"},{"label":"OverflowMenuDropdownItem","content":"<OverflowMenuDropdownItem\n\tisShared={false}\n>\n\t{'any'}\n</OverflowMenuDropdownItem>"},{"label":"OverflowMenuGroup #","content":"<OverflowMenuGroup\n\tclassName={\"string\"/* optional: Additional classes added to the OverflowMenuGroup */}\n\tisPersistent={false/* optional: Modifies the overflow menu group visibility */}\n\tgroupType={'button'/* optional: Indicates a button or icon group */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenuGroup>"},{"label":"OverflowMenuGroup","content":"<OverflowMenuGroup\n\tclassName={\"string\"}\n\tisPersistent={false}\n\tgroupType={'button'}\n>\n\t{'any'}\n</OverflowMenuGroup>"},{"label":"OverflowMenuItem #","content":"<OverflowMenuItem\n\tclassName={\"string\"/* optional: Additional classes added to the OverflowMenuItem */}\n\tisPersistent={false/* optional: Modifies the overflow menu item visibility */}\n>\n\t{'any'/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenuItem>"},{"label":"OverflowMenuItem","content":"<OverflowMenuItem\n\tclassName={\"string\"}\n\tisPersistent={false}\n>\n\t{'any'}\n</OverflowMenuItem>"},{"label":"Page #","content":"<Page\n\tclassName={\"''\"/* optional: Additional classes added to the page layout */}\n\theader={null/* optional: Header component (e.g. <PageHeader />) */}\n\tsidebar={null/* optional: Sidebar component for a side nav (e.g. <PageSidebar />) */}\n\tskipToContent={null/* optional: Skip to content component for the page */}\n\trole={\"string\"/* optional: Sets the value for role on the <main> element */}\n\tmainContainerId={\"null\"/* optional: an id to use for the [role=\"main\"] element */}\n\tisManagedSidebar={false/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\tdefaultManagedSidebarIsOpen={true/* optional: If true, the managed sidebar is initially open for desktop view */}\n\tonPageResize={(): void => null/* optional: Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px | Returns object { mobileView: boolean, windowSize: number } */}\n\tbreadcrumb={null/* optional: Breadcrumb component for the page */}\n\tmainAriaLabel={\"string\"/* optional: Accessible label, can be used to name main section */}\n>\n\t{<>ReactNode</>/* optional: Content rendered inside the main section of the page layout (e.g. <PageSection />) */}\n</Page>"},{"label":"Page","content":"<Page\n\tclassName={\"''\"}\n\theader={null}\n\tsidebar={null}\n\tskipToContent={null}\n\trole={\"string\"}\n\tmainContainerId={\"null\"}\n\tisManagedSidebar={false}\n\tdefaultManagedSidebarIsOpen={true}\n\tonPageResize={(): void => null}\n\tbreadcrumb={null}\n\tmainAriaLabel={\"string\"}\n>\n\t{<>ReactNode</>}\n</Page>"},{"label":"PageHeader #","content":"<PageHeader\n\tclassName={\"''\"/* optional: Additional classes added to the page header */}\n\tlogo={null/* optional: Component to render the logo/brand (e.g. <Brand />) */}\n\tlogoProps={null/* optional: Additional props passed to the logo anchor container */}\n\tlogoComponent={'a'/* optional: Component to use to wrap the passed <logo> */}\n\ttoolbar={null/* optional: Component to render the toolbar (e.g. <Toolbar />) */}\n\tavatar={null/* optional: Component to render the avatar (e.g. <Avatar /> */}\n\ttopNav={null/* optional: Component to render navigation within the header (e.g. <Nav /> */}\n\tshowNavToggle={false/* optional: True to show the nav toggle button (toggles side nav) */}\n\tisNavOpen={true/* optional: True if the side nav is shown */}\n\tisManagedSidebar={true/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\trole={\"string\"/* optional: Sets the value for role on the <main> element */}\n\tonNavToggle={() => undefined as any/* optional: Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */}\n\taria-label={\"'Global navigation'\"/* optional: Aria Label for the nav toggle button */}\n/>"},{"label":"PageHeader","content":"<PageHeader\n\tclassName={\"''\"}\n\tlogo={null}\n\tlogoProps={null}\n\tlogoComponent={'a'}\n\ttoolbar={null}\n\tavatar={null}\n\ttopNav={null}\n\tshowNavToggle={false}\n\tisNavOpen={true}\n\tisManagedSidebar={true}\n\trole={\"string\"}\n\tonNavToggle={() => undefined as any}\n\taria-label={\"'Global navigation'\"}\n/>"},{"label":"PageSection #","content":"<PageSection\n\tclassName={\"''\"/* optional: Additional classes added to the section */}\n\tvariant={'default'/* optional: Section background color variant */}\n\ttype={'default'/* optional: Section type variant */}\n\tisFilled={true/* optional: Enables the page section to fill the available vertical space */}\n\tnoPadding={false/* optional: Modifies a main page section to have no padding */}\n\tnoPaddingMobile={false/* optional: Modifies a main page section to have no padding on mobile */}\n>\n\t{<div>ReactNode</div>/* optional: Content rendered inside the section */}\n</PageSection>"},{"label":"PageSection","content":"<PageSection\n\tclassName={\"''\"}\n\tvariant={'default'}\n\ttype={'default'}\n\tisFilled={true}\n\tnoPadding={false}\n\tnoPaddingMobile={false}\n>\n\t{<div>ReactNode</div>}\n</PageSection>"},{"label":"PageSidebar #","content":"<PageSidebar\n\tclassName={\"''\"/* optional: Additional classes added to the page sidebar */}\n\tnav={<div>ReactNode</div>/* optional: Component to render the side navigation (e.g. <Nav /> */}\n\tisManagedSidebar={true/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\tisNavOpen={true/* optional: Programmatically manage if the side nav is shown, if isManagedSidebar is set to true in the Page component, this prop is managed */}\n\ttheme={'light'/* optional: Indicates the color scheme of the sidebar */}\n/>"},{"label":"PageSidebar","content":"<PageSidebar\n\tclassName={\"''\"}\n\tnav={<div>ReactNode</div>}\n\tisManagedSidebar={true}\n\tisNavOpen={true}\n\ttheme={'light'}\n/>"},{"label":"Navigation #","content":"<Navigation\n\tclassName={\"''\"/* optional: Additional classes for the container */}\n\tisDisabled={false/* optional: Flag indicating if the pagination is disabled */}\n\tisCompact={false/* optional: Flag indicating if the pagination is compact */}\n\tlastPage={0/* optional: The number of the last page */}\n\tfirstPage={0/* optional: The number of first page where pagination starts */}\n\tpagesTitle={\"''\"/* optional: The title of a page displayed beside the page number */}\n\ttoLastPage={\"'Go to last page'\"/* optional: Accessible label for the button which moves to the last page */}\n\ttoPreviousPage={\"'Go to previous page'\"/* optional: Accessible label for the button which moves to the previous page */}\n\ttoNextPage={\"'Go to next page'\"/* optional: Accessible label for the button which moves to the next page */}\n\ttoFirstPage={\"'Go to first page'\"/* optional: Accessible label for the button which moves to the first page */}\n\tcurrPage={\"'Current page'\"/* optional: Accessible label for the input displaying the current page */}\n\tpaginationTitle={\"'Pagination'\"/* optional: Accessible label for the pagination component */}\n\tpage={42/* required: The number of the current page */}\n\tperPage={42/* optional: Number of items per page. */}\n\tonSetPage={{}/*unrecognizedType OnSetPage undefined*//* required: Function called when page is changed */}\n\tonNextClick={() => undefined as any/* optional: Function called when user clicks to navigate to next page */}\n\tonPreviousClick={() => undefined as any/* optional: Function called when user clicks to navigate to previous page */}\n\tonFirstClick={() => undefined as any/* optional: Function called when user clicks to navigate to first page */}\n\tonLastClick={() => undefined as any/* optional: Function called when user clicks to navigate to last page */}\n\tonPageInput={() => undefined as any/* optional: Function called when user inputs page number */}\n/>"},{"label":"Navigation","content":"<Navigation\n\tclassName={\"''\"}\n\tisDisabled={false}\n\tisCompact={false}\n\tlastPage={0}\n\tfirstPage={0}\n\tpagesTitle={\"''\"}\n\ttoLastPage={\"'Go to last page'\"}\n\ttoPreviousPage={\"'Go to previous page'\"}\n\ttoNextPage={\"'Go to next page'\"}\n\ttoFirstPage={\"'Go to first page'\"}\n\tcurrPage={\"'Current page'\"}\n\tpaginationTitle={\"'Pagination'\"}\n\tpage={42}\n\tperPage={42}\n\tonSetPage={{}/*unrecognizedType OnSetPage undefined*/}\n\tonNextClick={() => undefined as any}\n\tonPreviousClick={() => undefined as any}\n\tonFirstClick={() => undefined as any}\n\tonLastClick={() => undefined as any}\n\tonPageInput={() => undefined as any}\n/>"},{"label":"OptionsToggle #","content":"<OptionsToggle\n\titemsTitle={\"'items'\"/* optional: The type or title of the items being paginated */}\n\toptionsToggle={\"'Select'\"/* optional: The text to be displayed on the Options Toggle */}\n\titemsPerPageTitle={\"'Items per page'\"/* optional: The Title of the Pagination Options Menu */}\n\tfirstIndex={0/* optional: The first index of the items being paginated */}\n\tlastIndex={0/* optional: The last index of the items being paginated */}\n\titemCount={0/* optional: The total number of items being paginated */}\n\twidgetId={\"''\"/* optional: Id added to the title of the Pagination Options Menu */}\n\tshowToggle={true/* optional: showToggle */}\n\tonToggle={(_isOpen: boolean) => undefined as any/* optional: Event function that fires when user clicks the Options Menu toggle */}\n\tisOpen={false/* optional: Flag indicating if the Options Menu dropdown is open or not */}\n\tisDisabled={false/* optional: Flag indicating if the Options Menu is disabled */}\n\tparentRef={null/* optional:  */}\n\ttoggleTemplate={''/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonEnter={null/* optional: Callback for toggle open on keyboard entry */}\n/>"},{"label":"OptionsToggle","content":"<OptionsToggle\n\titemsTitle={\"'items'\"}\n\toptionsToggle={\"'Select'\"}\n\titemsPerPageTitle={\"'Items per page'\"}\n\tfirstIndex={0}\n\tlastIndex={0}\n\titemCount={0}\n\twidgetId={\"''\"}\n\tshowToggle={true}\n\tonToggle={(_isOpen: boolean) => undefined as any}\n\tisOpen={false}\n\tisDisabled={false}\n\tparentRef={null}\n\ttoggleTemplate={''}\n\tonEnter={null}\n/>"},{"label":"Pagination #","content":"<Pagination\n\tclassName={\"''\"/* optional: Additional classes for the container. */}\n\titemCount={42/* required: Total number of items. */}\n\tvariant={'top'/* optional: Position where pagination is rendered. */}\n\tisDisabled={false/* optional: Flag indicating if pagination is disabled */}\n\tisCompact={false/* optional: Flag indicating if pagination is compact */}\n\tperPage={42/* optional: Number of items per page. */}\n\tperPageOptions={[\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n]/* optional: Select from options to number of items per page. */}\n\tdefaultToFullPage={false/* optional: Indicate whether to show last full page of results when user selects perPage value greater than remaining rows */}\n\tfirstPage={1/* optional: Page we start at. */}\n\tpage={0/* optional: Current page number. */}\n\toffset={0/* optional: Start index of rows to display, used in place of providing page */}\n\titemsStart={null/* optional: First index of items on current page. */}\n\titemsEnd={null/* optional: Last index of items on current page. */}\n\twidgetId={\"'pagination-options-menu'\"/* optional: ID to ideintify widget on page. */}\n\tdropDirection={'up'/* optional: Direction of dropdown context menu. */}\n\ttitles={undefined/* optional: Object with titles to display in pagination. */}\n\ttoggleTemplate={'string'/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonSetPage={() => undefined/* optional: Function called when user sets page. */}\n\tonFirstClick={() => undefined/* optional: Function called when user clicks on navigate to first page. */}\n\tonPreviousClick={() => undefined/* optional: Function called when user clicks on navigate to previous page. */}\n\tonNextClick={() => undefined/* optional: Function called when user clicks on navigate to next page. */}\n\tonLastClick={() => undefined/* optional: Function called when user clicks on navigate to last page. */}\n\tonPageInput={() => undefined/* optional: Function called when user inputs page number. */}\n\tonPerPageSelect={() => undefined/* optional: Function called when user selects number of items per page. */}\n>\n\t{<>ReactNode</>/* optional: What should be rendered inside */}\n</Pagination>"},{"label":"Pagination","content":"<Pagination\n\tclassName={\"''\"}\n\titemCount={42}\n\tvariant={'top'}\n\tisDisabled={false}\n\tisCompact={false}\n\tperPage={42}\n\tperPageOptions={[\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n]}\n\tdefaultToFullPage={false}\n\tfirstPage={1}\n\tpage={0}\n\toffset={0}\n\titemsStart={null}\n\titemsEnd={null}\n\twidgetId={\"'pagination-options-menu'\"}\n\tdropDirection={'up'}\n\ttitles={undefined}\n\ttoggleTemplate={'string'}\n\tonSetPage={() => undefined}\n\tonFirstClick={() => undefined}\n\tonPreviousClick={() => undefined}\n\tonNextClick={() => undefined}\n\tonLastClick={() => undefined}\n\tonPageInput={() => undefined}\n\tonPerPageSelect={() => undefined}\n>\n\t{<>ReactNode</>}\n</Pagination>"},{"label":"PaginationOptionsMenu #","content":"<PaginationOptionsMenu\n\tclassName={\"''\"/* optional: Custom class name added to the Pagination Options Menu */}\n\twidgetId={\"''\"/* optional: Id added to the title of the Pagination Options Menu */}\n\tisDisabled={false/* optional: Flag indicating if Pagination Options Menu is disabled */}\n\tdropDirection={'up'/* optional: Menu will open up or open down from the Options menu toggle */}\n\tperPageOptions={[]/* optional: Array of titles and values which will be the options on the Options Menu dropdown */}\n\titemsPerPageTitle={\"'Items per page'\"/* optional: The Title of the Pagination Options Menu */}\n\tpage={42/* optional: Current page number */}\n\tperPageSuffix={\"'per page'\"/* optional: The suffix to be displayed after each option on the Options Menu dropdown */}\n\titemsTitle={\"'items'\"/* optional: The type or title of the items being paginated */}\n\toptionsToggle={\"'Select'\"/* optional: The text to be displayed on the Options Toggle */}\n\titemCount={0/* optional: The total number of items being paginated */}\n\tfirstIndex={0/* optional: The first index of the items being paginated */}\n\tlastIndex={0/* optional: The last index of the items being paginated */}\n\tdefaultToFullPage={false/* optional: Flag to show last full page of results if perPage selected > remaining rows */}\n\tperPage={0/* optional: The number of items to be displayed per page */}\n\tlastPage={42/* optional: The number of the last page */}\n\ttoggleTemplate={({ firstIndex, lastIndex, itemCount, itemsTitle }: ToggleTemplateProps) => (\n  <React.Fragment>\n    <b>\n      {firstIndex} - {lastIndex}\n    </b>{' '}\n    of<b>{itemCount}</b> {itemsTitle}\n  </React.Fragment>\n)/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonPerPageSelect={() => null as any/* optional: Function called when user selects number of items per page. */}\n/>"},{"label":"PaginationOptionsMenu","content":"<PaginationOptionsMenu\n\tclassName={\"''\"}\n\twidgetId={\"''\"}\n\tisDisabled={false}\n\tdropDirection={'up'}\n\tperPageOptions={[]}\n\titemsPerPageTitle={\"'Items per page'\"}\n\tpage={42}\n\tperPageSuffix={\"'per page'\"}\n\titemsTitle={\"'items'\"}\n\toptionsToggle={\"'Select'\"}\n\titemCount={0}\n\tfirstIndex={0}\n\tlastIndex={0}\n\tdefaultToFullPage={false}\n\tperPage={0}\n\tlastPage={42}\n\ttoggleTemplate={({ firstIndex, lastIndex, itemCount, itemsTitle }: ToggleTemplateProps) => (\n  <React.Fragment>\n    <b>\n      {firstIndex} - {lastIndex}\n    </b>{' '}\n    of<b>{itemCount}</b> {itemsTitle}\n  </React.Fragment>\n)}\n\tonPerPageSelect={() => null as any}\n/>"},{"label":"ToggleTemplate #","content":"<ToggleTemplate\n\tfirstIndex={0/* optional: The first index of the items being paginated */}\n\tlastIndex={0/* optional: The last index of the items being paginated */}\n\titemCount={0/* optional: The total number of items being paginated */}\n\titemsTitle={\"'items'\"/* optional: The type or title of the items being paginated */}\n/>"},{"label":"ToggleTemplate","content":"<ToggleTemplate\n\tfirstIndex={0}\n\tlastIndex={0}\n\titemCount={0}\n\titemsTitle={\"'items'\"}\n/>"},{"label":"Popover #","content":"<Popover\n\taria-label={\"''\"/* optional: Accessible label, required when header is not present */}\n\tappendTo={() => document.body/* optional: The element to append the popover to, defaults to body */}\n\tbodyContent={<div>ReactNode</div>/* required: Body content */}\n\tboundary={'window'/* optional: If enableFlip is true, the popover responds to this boundary */}\n\tclassName={\"''\"/* optional: Popover additional class */}\n\tcloseBtnAriaLabel={\"'Close'\"/* optional: Aria label for the Close button */}\n\tdistance={25/* optional: Distance of the popover to its target, defaults to 25 */}\n\tenableFlip={true/* optional: If true, tries to keep the popover in view by flipping it if necessary */}\n\tflipBehavior={['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']/* optional: The desired position to flip the popover to if the initial position is not possible. | By setting this prop to 'flip' it attempts to flip the popover to the opposite side if there is no space. | You can also pass an array of positions that determines the flip order. It should contain the initial position | followed by alternative positions if that position is unavailable. | Example: Initial position is 'top'. Button with popover is in the top right corner. 'flipBehavior' is set to | ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no | space to the right, so it finally shows the popover on the left. */}\n\tfooterContent={null/* optional: Footer content */}\n\theaderContent={null/* optional: Header content, leave empty for no header */}\n\thideOnOutsideClick={true/* optional: Hides the popover when a click occurs outside (only works if isVisible is not controlled by the user) */}\n\tisVisible={null/* optional: True to show the popover programmatically. Used in conjunction with the shouldClose prop. | By default, the popover child element handles click events automatically. If you want to control this programmatically, | the popover will not auto-close if the Close button is clicked, ESC key is used, or if a click occurs outside the popover. | Instead, the consumer is responsible for closing the popover themselves by adding a callback listener for the shouldClose prop. */}\n\tmaxWidth={\"string\"/* optional: Maximum width of the popover (default 18.75rem) */}\n\tonHidden={(): void => null/* optional: Lifecycle function invoked when the popover has fully transitioned out. */}\n\tonHide={(): void => null/* optional: Lifecycle function invoked when the popover begins to transition out. */}\n\tonMount={(): void => null/* optional: Lifecycle function invoked when the popover has been mounted to the DOM. */}\n\tonShow={(): void => null/* optional: Lifecycle function invoked when the popover begins to transition in. */}\n\tonShown={(): void => null/* optional: Lifecycle function invoked when the popover has fully transitioned in. */}\n\tposition={'top'/* optional: Popover position. Note: With 'enableFlip' set to true, | it will change the position if there is not enough space for the starting position. | The behavior of where it flips to can be controlled through the flipBehavior prop. */}\n\tshouldClose={(): void => null/* optional: Callback function that is only invoked when isVisible is also controlled. Called when the popover Close button is | clicked or the ESC key is used */}\n\tzIndex={9999/* optional: z-index of the popover */}\n\ttippyProps={undefined/* optional: additional Props to pass through to tippy.js */}\n>\n\t{<p>ReactElement</p>/* required: The reference element to which the popover is relatively placed to */}\n</Popover>"},{"label":"Popover","content":"<Popover\n\taria-label={\"''\"}\n\tappendTo={() => document.body}\n\tbodyContent={<div>ReactNode</div>}\n\tboundary={'window'}\n\tclassName={\"''\"}\n\tcloseBtnAriaLabel={\"'Close'\"}\n\tdistance={25}\n\tenableFlip={true}\n\tflipBehavior={['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']}\n\tfooterContent={null}\n\theaderContent={null}\n\thideOnOutsideClick={true}\n\tisVisible={null}\n\tmaxWidth={\"string\"}\n\tonHidden={(): void => null}\n\tonHide={(): void => null}\n\tonMount={(): void => null}\n\tonShow={(): void => null}\n\tonShown={(): void => null}\n\tposition={'top'}\n\tshouldClose={(): void => null}\n\tzIndex={9999}\n\ttippyProps={undefined}\n>\n\t{<p>ReactElement</p>}\n</Popover>"},{"label":"PopoverArrow #","content":"<PopoverArrow\n\tclassName={\"''\"/* optional: Popover arrow additional className */}\n/>"},{"label":"PopoverArrow","content":"<PopoverArrow\n\tclassName={\"''\"}\n/>"},{"label":"PopoverBody #","content":"<PopoverBody\n\tid={\"string\"/* required: PopoverBody id */}\n>\n\t{<div>ReactNode</div>/* required: PopoverBody content */}\n</PopoverBody>"},{"label":"PopoverBody","content":"<PopoverBody\n\tid={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</PopoverBody>"},{"label":"PopoverCloseButton #","content":"<PopoverCloseButton\n\tonClose={() => undefined as void/* optional: PopoverCloseButton onClose function */}\n\taria-label={\"string\"/* required: Aria label for the Close button */}\n/>"},{"label":"PopoverCloseButton","content":"<PopoverCloseButton\n\tonClose={() => undefined as void}\n\taria-label={\"string\"}\n/>"},{"label":"PopoverContent #","content":"<PopoverContent\n\tclassName={\"null\"/* optional: PopoverContent additional class */}\n>\n\t{<div>ReactNode</div>/* required: PopoverContent content */}\n</PopoverContent>"},{"label":"PopoverContent","content":"<PopoverContent\n\tclassName={\"null\"}\n>\n\t{<div>ReactNode</div>}\n</PopoverContent>"},{"label":"PopoverDialog #","content":"<PopoverDialog\n\tposition={'top'/* optional: PopoverDialog position */}\n\tclassName={\"null\"/* optional: PopoverDialog additional class */}\n>\n\t{<>ReactNode</>/* optional: PopoverDialog body */}\n</PopoverDialog>"},{"label":"PopoverDialog","content":"<PopoverDialog\n\tposition={'top'}\n\tclassName={\"null\"}\n>\n\t{<>ReactNode</>}\n</PopoverDialog>"},{"label":"PopoverFooter #","content":"<PopoverFooter\n\tclassName={\"''\"/* optional: Additional classes added to the Popover Footer */}\n>\n\t{<div>ReactNode</div>/* required: Footer node */}\n</PopoverFooter>"},{"label":"PopoverFooter","content":"<PopoverFooter\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</PopoverFooter>"},{"label":"PopoverHeader #","content":"<PopoverHeader\n\tid={\"string\"/* required: popover id */}\n>\n\t{<div>ReactNode</div>/* required: header node */}\n</PopoverHeader>"},{"label":"PopoverHeader","content":"<PopoverHeader\n\tid={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</PopoverHeader>"},{"label":"Progress #","content":"<Progress\n\tclassName={\"''\"/* optional: Classname for progress component. */}\n\tsize={null/* optional: Size variant of progress. */}\n\tmeasureLocation={'outside'/* optional: Where the measure percent will be located. */}\n\tvariant={'danger'/* optional: Status variant of progress. */}\n\ttitle={\"''\"/* optional: Title above progress. */}\n\tlabel={null/* optional: Text description of current progress value to display instead of percentage. */}\n\tvalue={0/* optional: Actual value of progress. */}\n\tid={\"''\"/* optional: DOM id for progress component. */}\n\tmin={0/* optional: Minimal value of progress. */}\n\tmax={100/* optional: Maximum value of progress. */}\n\tvalueText={\"null\"/* optional: Accessible text description of current progress value, for when value is not a percentage. Use with label. */}\n/>"},{"label":"Progress","content":"<Progress\n\tclassName={\"''\"}\n\tsize={null}\n\tmeasureLocation={'outside'}\n\tvariant={'danger'}\n\ttitle={\"''\"}\n\tlabel={null}\n\tvalue={0}\n\tid={\"''\"}\n\tmin={0}\n\tmax={100}\n\tvalueText={\"null\"}\n/>"},{"label":"ProgressBar #","content":"<ProgressBar\n\tclassName={\"''\"/* optional: Additional classes for Progres bar. */}\n\tvalue={42/* required: Actual progress value. */}\n\tariaProps={undefined/* optional: Minimal value of progress. */}\n>\n\t{<>ReactNode</>/* optional: What should be rendered inside progress bar. */}\n</ProgressBar>"},{"label":"ProgressBar","content":"<ProgressBar\n\tclassName={\"''\"}\n\tvalue={42}\n\tariaProps={undefined}\n>\n\t{<>ReactNode</>}\n</ProgressBar>"},{"label":"ProgressContainer #","content":"<ProgressContainer\n\tariaProps={undefined/* optional: Properties needed for aria support */}\n\tparentId={\"string\"/* required: Progress component DOM ID. */}\n\ttitle={\"''\"/* optional: Progress title. */}\n\tlabel={null/* optional: Label to indicate what progress is showing. */}\n\tvariant={'danger'/* optional: Type of progress status. */}\n\tmeasureLocation={'outside'/* optional: Location of progress value. */}\n\tvalue={42/* required: Actual progress value. */}\n/>"},{"label":"ProgressContainer","content":"<ProgressContainer\n\tariaProps={undefined}\n\tparentId={\"string\"}\n\ttitle={\"''\"}\n\tlabel={null}\n\tvariant={'danger'}\n\tmeasureLocation={'outside'}\n\tvalue={42}\n/>"},{"label":"Radio #","content":"<Radio\n\tclassName={\"''\"/* optional: Additional classes added to the radio. */}\n\tid={\"string\"/* required: Id of the radio. */}\n\tisLabelWrapped={true/* optional: Flag to show if the radio label is wrapped on small screen. */}\n\tisLabelBeforeButton={true/* optional: Flag to show if the radio label is shown before the radio button. */}\n\tchecked={true/* optional: Flag to show if the radio is checked. */}\n\tisChecked={true/* optional: Flag to show if the radio is checked. */}\n\tisDisabled={false/* optional: Flag to show if the radio is disabled. */}\n\tisValid={true/* optional: Flag to show if the radio selection is valid or invalid. */}\n\tlabel={<div>ReactNode</div>/* optional: Label text of the radio. */}\n\tname={\"string\"/* required: Name for group of radios */}\n\tonChange={() => {}/* optional: A callback for when the radio selection changes. */}\n\taria-label={\"string\"/* optional: Aria label for the radio. */}\n\tdescription={<div>ReactNode</div>/* optional: Description text of the radio. */}\n/>"},{"label":"Radio","content":"<Radio\n\tclassName={\"''\"}\n\tid={\"string\"}\n\tisLabelWrapped={true}\n\tisLabelBeforeButton={true}\n\tchecked={true}\n\tisChecked={true}\n\tisDisabled={false}\n\tisValid={true}\n\tlabel={<div>ReactNode</div>}\n\tname={\"string\"}\n\tonChange={() => {}}\n\taria-label={\"string\"}\n\tdescription={<div>ReactNode</div>}\n/>"},{"label":"CheckboxSelectGroup #","content":"<CheckboxSelectGroup\n\tclassName={\"''\"/* optional: Additional classes added to the CheckboxSelectGroup control */}\n\tlabel={\"''\"/* optional: Group label */}\n\ttitleId={\"''\"/* optional: ID for title label */}\n>\n\t{[]/* optional: Checkboxes within group */}\n</CheckboxSelectGroup>"},{"label":"CheckboxSelectGroup","content":"<CheckboxSelectGroup\n\tclassName={\"''\"}\n\tlabel={\"''\"}\n\ttitleId={\"''\"}\n>\n\t{[]}\n</CheckboxSelectGroup>"},{"label":"CheckboxSelectOption #","content":"<CheckboxSelectOption\n\tclassName={\"''\"/* optional: Additional classes added to the Select Option */}\n\tindex={0/* optional: Internal index of the option */}\n\tvalue={\"''\"/* optional: The value for the option */}\n\tisDisabled={false/* optional: Flag indicating if the option is disabled */}\n\tisChecked={false/* optional: Internal flag indicating if the option is checked */}\n\tsendRef={() => {}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={() => {}/* optional: Internal callback for keyboard navigation */}\n\tonClick={() => {}/* optional: Optional callback for click event */}\n>\n\t{<div>ReactNode</div>/* optional: Optional alternate display for the option */}\n</CheckboxSelectOption>"},{"label":"CheckboxSelectOption","content":"<CheckboxSelectOption\n\tclassName={\"''\"}\n\tindex={0}\n\tvalue={\"''\"}\n\tisDisabled={false}\n\tisChecked={false}\n\tsendRef={() => {}}\n\tkeyHandler={() => {}}\n\tonClick={() => {}}\n>\n\t{<div>ReactNode</div>}\n</CheckboxSelectOption>"},{"label":"Select #","content":"<Select\n\tclassName={\"''\"/* optional: Classes applied to the root of the Select */}\n\tdirection={'up'/* optional: Flag specifying which direction the Select menu expands */}\n\tisExpanded={false/* optional: Flag to indicate if select is expanded */}\n\tisGrouped={false/* optional: Flag to indicate if select options are grouped */}\n\tisPlain={false/* optional: Display the toggle with no border or background */}\n\tisDisabled={false/* optional: Flag to indicate if select is disabled */}\n\tisCreatable={false/* optional: Flag to indicate if the typeahead select allows new items */}\n\tcreateText={\"'Create'\"/* optional: Text displayed in typeahead select to prompt the user to create an item */}\n\tplaceholderText={''/* optional: Title text of Select */}\n\tnoResultsFoundText={\"'No results found'\"/* optional: Text to display in typeahead select when no results are found */}\n\tselections={''/* optional: Selected item for single select variant.  Array of selected items for multi select variants. */}\n\ttoggleId={\"null\"/* optional: Id for select toggle element */}\n\taria-label={\"''\"/* optional: Adds accessible text to Select */}\n\tariaLabelledBy={\"''\"/* optional: Id of label for the Select aria-labelledby */}\n\tariaLabelTypeAhead={\"''\"/* optional: Label for input field of type ahead select variants */}\n\tariaLabelClear={\"'Clear all'\"/* optional: Label for clear selection button of type ahead select variants */}\n\tariaLabelToggle={\"'Options menu'\"/* optional: Label for toggle of type ahead select variants */}\n\tariaLabelRemove={\"'Remove'\"/* optional: Label for remove chip button of multiple type ahead select variant */}\n\tonSelect={(\n  event: React.MouseEvent | React.ChangeEvent,\n  value: string | SelectOptionObject,\n  isPlaceholder?: boolean\n) => undefined as void/* optional: Callback for selection behavior */}\n\tonToggle={(isExpanded: boolean) => undefined as void/* required: Callback for toggle button behavior */}\n\tonClear={() => undefined as void/* optional: Callback for typeahead clear button */}\n\tonFilter={null/* optional: Optional callback for custom filtering */}\n\tonCreateOption={() => undefined as void/* optional: Optional callback for newly created options */}\n\tvariant={'single'/* optional: Variant of rendered Select */}\n\twidth={''/* optional: Width of the select container as a number of px or string percentage */}\n\tmaxHeight={'string'/* optional: Max height of the select container as a number of px or string percentage */}\n\ttoggleIcon={null/* optional: Icon element to render inside the select toggle */}\n\tcustomContent={null/* optional: Custom content to render in the select menu.  If this prop is defined, the variant prop will be ignored and the select will render with a single select toggle */}\n>\n\t{[]/* optional: Content rendered inside the Select */}\n</Select>"},{"label":"Select","content":"<Select\n\tclassName={\"''\"}\n\tdirection={'up'}\n\tisExpanded={false}\n\tisGrouped={false}\n\tisPlain={false}\n\tisDisabled={false}\n\tisCreatable={false}\n\tcreateText={\"'Create'\"}\n\tplaceholderText={''}\n\tnoResultsFoundText={\"'No results found'\"}\n\tselections={''}\n\ttoggleId={\"null\"}\n\taria-label={\"''\"}\n\tariaLabelledBy={\"''\"}\n\tariaLabelTypeAhead={\"''\"}\n\tariaLabelClear={\"'Clear all'\"}\n\tariaLabelToggle={\"'Options menu'\"}\n\tariaLabelRemove={\"'Remove'\"}\n\tonSelect={(\n  event: React.MouseEvent | React.ChangeEvent,\n  value: string | SelectOptionObject,\n  isPlaceholder?: boolean\n) => undefined as void}\n\tonToggle={(isExpanded: boolean) => undefined as void}\n\tonClear={() => undefined as void}\n\tonFilter={null}\n\tonCreateOption={() => undefined as void}\n\tvariant={'single'}\n\twidth={''}\n\tmaxHeight={'string'}\n\ttoggleIcon={null}\n\tcustomContent={null}\n>\n\t{[]}\n</Select>"},{"label":"SelectGroup #","content":"<SelectGroup\n\tclassName={\"''\"/* optional: Additional classes added to the CheckboxSelectGroup control */}\n\tlabel={\"''\"/* optional: Group label */}\n\ttitleId={\"''\"/* optional: ID for title label */}\n>\n\t{[]/* optional: Checkboxes within group */}\n</SelectGroup>"},{"label":"SelectGroup","content":"<SelectGroup\n\tclassName={\"''\"}\n\tlabel={\"''\"}\n\ttitleId={\"''\"}\n>\n\t{[]}\n</SelectGroup>"},{"label":"SelectMenu #","content":"<SelectMenu\n\tisCustomContent={false/* optional: Flag indicating that the children is custom content to render inside the SelectMenu.  If true, variant prop is ignored. */}\n\tclassName={\"''\"/* optional: Additional classes added to the SelectMenu control */}\n\tisExpanded={false/* optional: Flag indicating the Select is expanded */}\n\tisGrouped={false/* optional: Flag indicating the Select options are grouped */}\n\tselected={''/* optional: Currently selected option (for single, typeahead variants) */}\n\tchecked={[]/* optional: Currently checked options (for checkbox variant) */}\n\topenedOnEnter={false/* optional: Internal flag for specifiying how the menu was opened */}\n\tmaxHeight={''/* optional: Flag to specify the  maximum height of the menu, as a string percentage or number of pixels */}\n\tnoResultsFoundText={\"string\"/* optional: Inner prop passed from parent */}\n\tcreateText={\"string\"/* optional: Inner prop passed from parent */}\n\tsendRef={() => {}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={() => {}/* optional: Internal callback for keyboard navigation */}\n>\n\t{[undefined as React.ReactElement]/* required: Content rendered inside the SelectMenu */}\n</SelectMenu>"},{"label":"SelectMenu","content":"<SelectMenu\n\tisCustomContent={false}\n\tclassName={\"''\"}\n\tisExpanded={false}\n\tisGrouped={false}\n\tselected={''}\n\tchecked={[]}\n\topenedOnEnter={false}\n\tmaxHeight={''}\n\tnoResultsFoundText={\"string\"}\n\tcreateText={\"string\"}\n\tsendRef={() => {}}\n\tkeyHandler={() => {}}\n>\n\t{[undefined as React.ReactElement]}\n</SelectMenu>"},{"label":"SelectOption #","content":"<SelectOption\n\tclassName={\"''\"/* optional: Additional classes added to the Select Option */}\n\tindex={0/* optional: Internal index of the option */}\n\tcomponent={'button'/* optional: Indicates which component will be used as select item */}\n\tvalue={''/* optional: The value for the option, can be a string or select option object */}\n\tisDisabled={false/* optional: Flag indicating if the option is disabled */}\n\tisPlaceholder={false/* optional: Flag indicating if the option acts as a placeholder */}\n\tisSelected={false/* optional: Internal flag indicating if the option is selected */}\n\tisChecked={false/* optional: Internal flag indicating if the option is checked */}\n\tisFocused={false/* optional: Internal flag indicating if the option is focused */}\n\tsendRef={() => {}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={() => {}/* optional: Internal callback for keyboard navigation */}\n\tonClick={() => {}/* optional: Optional callback for click event */}\n>\n\t{<div>ReactNode</div>/* optional: Optional alternate display for the option */}\n</SelectOption>"},{"label":"SelectOption","content":"<SelectOption\n\tclassName={\"''\"}\n\tindex={0}\n\tcomponent={'button'}\n\tvalue={''}\n\tisDisabled={false}\n\tisPlaceholder={false}\n\tisSelected={false}\n\tisChecked={false}\n\tisFocused={false}\n\tsendRef={() => {}}\n\tkeyHandler={() => {}}\n\tonClick={() => {}}\n>\n\t{<div>ReactNode</div>}\n</SelectOption>"},{"label":"SelectToggle #","content":"<SelectToggle\n\tid={\"string\"/* required: HTML ID of dropdown toggle */}\n\tclassName={\"''\"/* optional: Classes applied to root element of dropdown toggle */}\n\tisExpanded={false/* optional: Flag to indicate if select is expanded */}\n\tonToggle={() => {}/* optional: Callback called when toggle is clicked */}\n\tonEnter={() => {}/* optional: Callback for toggle open on keyboard entry */}\n\tonClose={() => {}/* optional: Callback for toggle close */}\n\thandleTypeaheadKeys={(position: string) => undefined as void/* optional: Internal callback for toggle keyboard navigation */}\n\tparentRef={{ current: document.createElement('div') }/* required: Element which wraps toggle */}\n\tisFocused={false/* optional: Forces focus state */}\n\tisHovered={false/* optional: Forces hover state */}\n\tisActive={false/* optional: Forces active state */}\n\tisPlain={false/* optional: Display the toggle with no border or background */}\n\tisDisabled={false/* optional: Flag indicating if select is disabled */}\n\ttype={'button'/* optional: Type of the toggle button, defaults to 'button' */}\n\tariaLabelledBy={\"''\"/* optional: Id of label for the Select aria-labelledby */}\n\tariaLabelToggle={\"''\"/* optional: Label for toggle of select variants */}\n\tvariant={'single'/* optional: Flag for variant, determines toggle rules and interaction */}\n>\n\t{<div>ReactNode</div>/* required: Anything which can be rendered as dropdown toggle */}\n</SelectToggle>"},{"label":"SelectToggle","content":"<SelectToggle\n\tid={\"string\"}\n\tclassName={\"''\"}\n\tisExpanded={false}\n\tonToggle={() => {}}\n\tonEnter={() => {}}\n\tonClose={() => {}}\n\thandleTypeaheadKeys={(position: string) => undefined as void}\n\tparentRef={{ current: document.createElement('div') }}\n\tisFocused={false}\n\tisHovered={false}\n\tisActive={false}\n\tisPlain={false}\n\tisDisabled={false}\n\ttype={'button'}\n\tariaLabelledBy={\"''\"}\n\tariaLabelToggle={\"''\"}\n\tvariant={'single'}\n>\n\t{<div>ReactNode</div>}\n</SelectToggle>"},{"label":"SkipToContent #","content":"<SkipToContent\n\tcomponent={'a'/* optional: Sets the base component to render. Defaults to an anchor */}\n\thref={\"string\"/* required: The skip to content link. */}\n\tclassName={\"''\"/* optional: Additional styles to apply to the skip to content component. */}\n\tshow={false/* optional: Forces the skip to component to display. This is primarily for demonstration purposes and would not normally be used. */}\n>\n\t{<div>ReactNode</div>/* optional: Content to display within the skip to content component, typically a string. */}\n</SkipToContent>"},{"label":"SkipToContent","content":"<SkipToContent\n\tcomponent={'a'}\n\thref={\"string\"}\n\tclassName={\"''\"}\n\tshow={false}\n>\n\t{<div>ReactNode</div>}\n</SkipToContent>"},{"label":"Spinner #","content":"<Spinner\n\tclassName={\"''\"/* optional: Additional classes added to the Spinner. */}\n\tsize={'xl'/* optional: Size variant of progress. */}\n\taria-valuetext={\"'Loading...'\"/* optional: Aria value text */}\n/>"},{"label":"Spinner","content":"<Spinner\n\tclassName={\"''\"}\n\tsize={'xl'}\n\taria-valuetext={\"'Loading...'\"}\n/>"},{"label":"Switch #","content":"<Switch\n\tid={\"''\"/* optional: id for the label. */}\n\tclassName={\"''\"/* optional: Additional classes added to the Switch */}\n\tlabel={\"''\"/* optional: Text value for the label when on */}\n\tlabelOff={\"''\"/* optional: Text value for the label when off */}\n\tisChecked={true/* optional: Flag to show if the Switch is checked. */}\n\tisDisabled={false/* optional: Flag to show if the Switch is disabled. */}\n\tonChange={() => undefined as any/* optional: A callback for when the Switch selection changes. (isChecked, event) => {} */}\n\taria-label={\"''\"/* optional: Adds accessible text to the Switch, and should describe the isChecked=\"true\" state. When label is defined, aria-label should be set to the text string that is visible when isChecked is true. */}\n/>"},{"label":"Switch","content":"<Switch\n\tid={\"''\"}\n\tclassName={\"''\"}\n\tlabel={\"''\"}\n\tlabelOff={\"''\"}\n\tisChecked={true}\n\tisDisabled={false}\n\tonChange={() => undefined as any}\n\taria-label={\"''\"}\n/>"},{"label":"TabButton #","content":"<TabButton\n\tclassName={\"''\"/* optional: additional classes added to the Tab */}\n\thref={\"string\"/* optional: URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs variant=\"nav\"> should have an href. */}\n\ttabContentRef={{ current: document.createElement('div') }/* optional: child reference for case in which a TabContent section is defined outside of a Tabs component */}\n>\n\t{<div>ReactNode</div>/* optional: content rendered inside the Tab content area. */}\n</TabButton>"},{"label":"TabButton","content":"<TabButton\n\tclassName={\"''\"}\n\thref={\"string\"}\n\ttabContentRef={{ current: document.createElement('div') }}\n>\n\t{<div>ReactNode</div>}\n</TabButton>"},{"label":"TabContent #","content":"<TabContent\n\tchild={<p>ReactElement</p>/* optional: Child to show in the content area */}\n\tclassName={\"string\"/* optional: class of tab content area if used outside Tabs component */}\n\tactiveKey={1/* optional: Identifies the active Tab */}\n\teventKey={1/* optional: uniquely identifies the controlling Tab if used outside Tabs component */}\n\tinnerRef={() => {}/* optional: Callback for the section ref */}\n\tid={\"string\"/* required: id passed from parent to identify the content section */}\n\taria-label={\"string\"/* optional: title of controlling Tab if used outside Tabs component */}\n>\n\t{'any'/* optional: content rendered inside the tab content area if used outside Tabs component */}\n</TabContent>"},{"label":"TabContent","content":"<TabContent\n\tchild={<p>ReactElement</p>}\n\tclassName={\"string\"}\n\tactiveKey={1}\n\teventKey={1}\n\tinnerRef={() => {}}\n\tid={\"string\"}\n\taria-label={\"string\"}\n>\n\t{'any'}\n</TabContent>"},{"label":"Tabs #","content":"<Tabs\n\tclassName={\"''\"/* optional: additional classes added to the Tabs */}\n\tactiveKey={0/* optional: the index of the active tab */}\n\tonSelect={() => undefined as any/* optional: handle tab selection */}\n\tid={\"string\"/* optional: uniquely identifies the Tabs */}\n\tisFilled={false/* optional: enables the filled tab list layout */}\n\tisSecondary={false/* optional: enables Secondary Tab styling */}\n\tleftScrollAriaLabel={\"'Scroll left'\"/* optional: aria-label for the left Scroll Button */}\n\trightScrollAriaLabel={\"'Scroll right'\"/* optional: aria-label for the right Scroll Button */}\n\tvariant={'div'/* optional: determines what tag is used around the Tabs. Use \"nav\" to define the Tabs inside a navigation region */}\n\taria-label={\"string\"/* optional: provides an accessible label for the Tabs. Labels should be unique for each set of Tabs that are present on a page. When variant is set to nav, this prop should be defined to differentiate the Tabs from other navigation regions on the page. */}\n\tmountOnEnter={false/* optional: waits until the first \"enter\" transition to mount tab children (add them to the DOM) */}\n\tunmountOnExit={false/* optional: unmounts tab children (removes them from the DOM) when they are no longer visible */}\n>\n\t{<div>ReactNode</div>/* required: content rendered inside the Tabs Component. */}\n</Tabs>"},{"label":"Tabs","content":"<Tabs\n\tclassName={\"''\"}\n\tactiveKey={0}\n\tonSelect={() => undefined as any}\n\tid={\"string\"}\n\tisFilled={false}\n\tisSecondary={false}\n\tleftScrollAriaLabel={\"'Scroll left'\"}\n\trightScrollAriaLabel={\"'Scroll right'\"}\n\tvariant={'div'}\n\taria-label={\"string\"}\n\tmountOnEnter={false}\n\tunmountOnExit={false}\n>\n\t{<div>ReactNode</div>}\n</Tabs>"},{"label":"Text #","content":"<Text\n\tcomponent={'h1'/* optional: The text component */}\n\tclassName={\"''\"/* optional: Additional classes added to the Text */}\n>\n\t{<>ReactNode</>/* optional: Content rendered within the Text */}\n</Text>"},{"label":"Text","content":"<Text\n\tcomponent={'h1'}\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</Text>"},{"label":"TextContent #","content":"<TextContent\n\tclassName={\"''\"/* optional: Additional classes added to the TextContent */}\n>\n\t{<>ReactNode</>/* optional: Content rendered within the TextContent */}\n</TextContent>"},{"label":"TextContent","content":"<TextContent\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</TextContent>"},{"label":"TextList #","content":"<TextList\n\tclassName={\"''\"/* optional: Additional classes added to the TextList */}\n\tcomponent={'ul'/* optional: The text list component */}\n>\n\t{<>ReactNode</>/* optional: Content rendered within the TextList */}\n</TextList>"},{"label":"TextList","content":"<TextList\n\tclassName={\"''\"}\n\tcomponent={'ul'}\n>\n\t{<>ReactNode</>}\n</TextList>"},{"label":"TextListItem #","content":"<TextListItem\n\tclassName={\"''\"/* optional: Additional classes added to the TextListItem */}\n\tcomponent={'li'/* optional: The text list item component */}\n>\n\t{<>ReactNode</>/* optional: Content rendered within the TextListItem */}\n</TextListItem>"},{"label":"TextListItem","content":"<TextListItem\n\tclassName={\"''\"}\n\tcomponent={'li'}\n>\n\t{<>ReactNode</>}\n</TextListItem>"},{"label":"TextArea #","content":"<TextArea\n\tclassName={\"''\"/* optional: Additional classes added to the TextArea. */}\n\tisRequired={false/* optional: Flag to show if the TextArea is required. */}\n\tisValid={true/* optional: Flag to show if the TextArea is valid or invalid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={'default'/* optional: Value to indicate if the textarea is modified to show that validation state. | If set to success, textarea will be modified to indicate valid state. | If set to error, textarea will be modified to indicate error state. */}\n\tvalue={'string'/* optional: Value of the TextArea. */}\n\tonChange={(value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => undefined as void/* optional: A callback for when the TextArea value changes. */}\n\tresizeOrientation={'both'/* optional: Sets the orientation to limit the resize to */}\n\taria-label={\"null\"/* optional: Custom flag to show that the TextArea requires an associated id or aria-label. */}\n/>"},{"label":"TextArea","content":"<TextArea\n\tclassName={\"''\"}\n\tisRequired={false}\n\tisValid={true}\n\tvalidated={'default'}\n\tvalue={'string'}\n\tonChange={(value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => undefined as void}\n\tresizeOrientation={'both'}\n\taria-label={\"null\"}\n/>"},{"label":"Title #","content":"<Title\n\tsize={'xs'/* required: the size of the Title */}\n\tclassName={\"''\"/* optional: Additional classes added to the Title */}\n\theadingLevel={'h1'/* optional: the heading level to use */}\n>\n\t{''/* optional: content rendered inside the Title */}\n</Title>"},{"label":"Title","content":"<Title\n\tsize={'xs'}\n\tclassName={\"''\"}\n\theadingLevel={'h1'}\n>\n\t{''}\n</Title>"},{"label":"Tooltip #","content":"<Tooltip\n\tappendTo={() => document.body/* optional: The element to append the tooltip to, defaults to body */}\n\taria={'describedby'/* optional: Aria-labelledby or aria-describedby for tooltip */}\n\tboundary={'window'/* optional: If enableFlip is true, the tooltip responds to this boundary */}\n\tclassName={\"''\"/* optional: Tooltip additional class */}\n\tcontent={<div>ReactNode</div>/* required: Tooltip content */}\n\tdistance={15/* optional: Distance of the tooltip to its target, defaults to 15 */}\n\tenableFlip={true/* optional: If true, tries to keep the tooltip in view by flipping it if necessary */}\n\tentryDelay={500/* optional: Delay in ms before the tooltip appears */}\n\texitDelay={500/* optional: Delay in ms before the tooltip disappears */}\n\tflipBehavior={['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']/* optional: The desired position to flip the tooltip to if the initial position is not possible. | By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space. | You can also pass an array of positions that determines the flip order. It should contain the initial position | followed by alternative positions if that position is unavailable. | Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to | ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no | space to the right, so it finally shows the tooltip on the left. */}\n\tisAppLauncher={false/* optional: If true, displays as an application launcher */}\n\tmaxWidth={\"string\"/* optional: Maximum width of the tooltip (default 12.5rem) */}\n\tposition={'top'/* optional: Tooltip position. Note: With 'enableFlip' set to true, | it will change the position if there is not enough space for the starting position. | The behavior of where it flips to can be controlled through the flipBehavior prop. */}\n\ttrigger={\"'mouseenter focus'\"/* optional: Tooltip trigger: click, mouseenter, focus, manual */}\n\tisContentLeftAligned={false/* optional: Flag to indicate that the text content is left aligned */}\n\tisVisible={false/* optional: value for visibility when trigger is 'manual' */}\n\tzIndex={9999/* optional: z-index of the tooltip */}\n\ttippyProps={undefined/* optional: additional Props to pass through to tippy.js */}\n\tid={\"''\"/* optional: ID */}\n>\n\t{<p>ReactElement</p>/* required: The reference element to which the tooltip is relatively placed to */}\n</Tooltip>"},{"label":"Tooltip","content":"<Tooltip\n\tappendTo={() => document.body}\n\taria={'describedby'}\n\tboundary={'window'}\n\tclassName={\"''\"}\n\tcontent={<div>ReactNode</div>}\n\tdistance={15}\n\tenableFlip={true}\n\tentryDelay={500}\n\texitDelay={500}\n\tflipBehavior={['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']}\n\tisAppLauncher={false}\n\tmaxWidth={\"string\"}\n\tposition={'top'}\n\ttrigger={\"'mouseenter focus'\"}\n\tisContentLeftAligned={false}\n\tisVisible={false}\n\tzIndex={9999}\n\ttippyProps={undefined}\n\tid={\"''\"}\n>\n\t{<p>ReactElement</p>}\n</Tooltip>"},{"label":"TooltipArrow #","content":"<TooltipArrow\n\tclassName={\"string\"/* optional: className */}\n/>"},{"label":"TooltipArrow","content":"<TooltipArrow\n\tclassName={\"string\"}\n/>"},{"label":"TooltipContent #","content":"<TooltipContent\n\tclassName={\"string\"/* optional: PopoverContent additional class */}\n\tisLeftAligned={true/* optional: Flag to align text to the left */}\n>\n\t{<div>ReactNode</div>/* required: PopoverContent content */}\n</TooltipContent>"},{"label":"TooltipContent","content":"<TooltipContent\n\tclassName={\"string\"}\n\tisLeftAligned={true}\n>\n\t{<div>ReactNode</div>}\n</TooltipContent>"},{"label":"Wizard #","content":"<Wizard\n\tisOpen={false/* optional: True to show the wizard (not applicable for isInPage) */}\n\tisInPage={false/* optional: True to show the wizard without the modal */}\n\tisCompactNav={false/* optional: If true makes the navigation more compact */}\n\tisFullHeight={false/* optional: True to set full height wizard */}\n\tisFullWidth={false/* optional: True to set full width wizard */}\n\twidth={null/* optional: Custom width of the wizard */}\n\theight={null/* optional: Custom height of the wizard */}\n\ttitle={\"''\"/* optional: The wizard title (required unless isInPage is used) */}\n\tdescription={\"''\"/* optional: The wizard description */}\n\tonClose={() => undefined as any/* optional: Callback function to close the wizard */}\n\tonGoToStep={null/* optional: Callback function when a step in the nav is clicked */}\n\tclassName={\"''\"/* optional: Additional classes spread to the Wizard */}\n\tsteps={[]/* required: The wizard steps configuration object */}\n\tstartAtStep={1/* optional: The current step the wizard is on (1 or higher) */}\n\tariaLabelNav={\"'Steps'\"/* optional: aria-label for the Nav */}\n\thasBodyPadding={true/* optional: Can remove the default padding around the main body content by setting this to false */}\n\tfooter={null/* optional: (Use to control the footer) Passing in a footer component lets you control the buttons yourself */}\n\tonSave={() => undefined as void/* optional: (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */}\n\tonNext={null/* optional: (Unused if footer is controlled) Callback function after Next button is clicked */}\n\tonBack={null/* optional: (Unused if footer is controlled) Callback function after Back button is clicked */}\n\tnextButtonText={\"'Next'\"/* optional: (Unused if footer is controlled) The Next button text */}\n\tbackButtonText={\"'Back'\"/* optional: (Unused if footer is controlled) The Back button text */}\n\tcancelButtonText={\"'Cancel'\"/* optional: (Unused if footer is controlled) The Cancel button text */}\n\tariaLabelCloseButton={\"'Close'\"/* optional: (Unused if footer is controlled) aria-label for the close button */}\n\tappendTo={null/* optional: The parent container to append the modal to. Defaults to document.body */}\n/>"},{"label":"Wizard","content":"<Wizard\n\tisOpen={false}\n\tisInPage={false}\n\tisCompactNav={false}\n\tisFullHeight={false}\n\tisFullWidth={false}\n\twidth={null}\n\theight={null}\n\ttitle={\"''\"}\n\tdescription={\"''\"}\n\tonClose={() => undefined as any}\n\tonGoToStep={null}\n\tclassName={\"''\"}\n\tsteps={[]}\n\tstartAtStep={1}\n\tariaLabelNav={\"'Steps'\"}\n\thasBodyPadding={true}\n\tfooter={null}\n\tonSave={() => undefined as void}\n\tonNext={null}\n\tonBack={null}\n\tnextButtonText={\"'Next'\"}\n\tbackButtonText={\"'Back'\"}\n\tcancelButtonText={\"'Cancel'\"}\n\tariaLabelCloseButton={\"'Close'\"}\n\tappendTo={null}\n/>"},{"label":"WizardBody #","content":"<WizardBody\n\thasBodyPadding={true/* optional: Set to false to remove the default body padding */}\n>\n\t{'any'/* required: Anything that can be rendered in the Wizard body */}\n</WizardBody>"},{"label":"WizardBody","content":"<WizardBody\n\thasBodyPadding={true}\n>\n\t{'any'}\n</WizardBody>"},{"label":"WizardFooter #","content":"<WizardFooter\n\n>\n\t{'any'/* required: Buttons in the footer */}\n</WizardFooter>"},{"label":"WizardFooter","content":"<WizardFooter\n\n>\n\t{'any'}\n</WizardFooter>"},{"label":"WizardFooterInternal #","content":"<WizardFooterInternal\n\tonNext={'any'/* required:  */}\n\tonBack={'any'/* required:  */}\n\tonClose={'any'/* required:  */}\n\tisValid={true/* required:  */}\n\tfirstStep={true/* required:  */}\n\tactiveStep={{}/*unrecognizedType WizardStep undefined*//* required:  */}\n\tnextButtonText={\"string\"/* required:  */}\n\tbackButtonText={\"string\"/* required:  */}\n\tcancelButtonText={\"string\"/* required:  */}\n/>"},{"label":"WizardFooterInternal","content":"<WizardFooterInternal\n\tonNext={'any'}\n\tonBack={'any'}\n\tonClose={'any'}\n\tisValid={true}\n\tfirstStep={true}\n\tactiveStep={{}/*unrecognizedType WizardStep undefined*/}\n\tnextButtonText={\"string\"}\n\tbackButtonText={\"string\"}\n\tcancelButtonText={\"string\"}\n/>"},{"label":"WizardHeader #","content":"<WizardHeader\n\tonClose={() => undefined/* optional: Callback function called when the X (Close) button is clicked */}\n\ttitle={\"string\"/* required: Title of the wizard */}\n\tdescription={\"string\"/* optional: Description of the wizard */}\n\tariaLabelCloseButton={\"string\"/* optional: aria-label applied to the X (Close) button */}\n\ttitleId={\"string\"/* optional: id for the title */}\n\tdescriptionId={\"string\"/* optional: id for the description */}\n/>"},{"label":"WizardHeader","content":"<WizardHeader\n\tonClose={() => undefined}\n\ttitle={\"string\"}\n\tdescription={\"string\"}\n\tariaLabelCloseButton={\"string\"}\n\ttitleId={\"string\"}\n\tdescriptionId={\"string\"}\n/>"},{"label":"WizardNav #","content":"<WizardNav\n\tariaLabel={\"string\"/* optional: aria-label applied to the nav element */}\n\tisOpen={false/* optional: Whether the nav is expanded */}\n\treturnList={false/* optional: True to return the inner list without the wrapping nav element */}\n>\n\t{'any'/* optional: children should be WizardNavItem components */}\n</WizardNav>"},{"label":"WizardNav","content":"<WizardNav\n\tariaLabel={\"string\"}\n\tisOpen={false}\n\treturnList={false}\n>\n\t{'any'}\n</WizardNav>"},{"label":"WizardNavItem #","content":"<WizardNavItem\n\ttext={\"''\"/* optional: The text to display in the nav item */}\n\tisCurrent={false/* optional: Whether the nav item is the currently active item */}\n\tisDisabled={false/* optional: Whether the nav item is disabled */}\n\tstep={42/* required: The step passed into the onNavItemClick callback */}\n\tonNavItemClick={() => undefined/* optional: Callback for when the nav item is clicked */}\n\tnavItemComponent={'a'/* optional: Component used to render WizardNavItem */}\n>\n\t{<>ReactNode</>/* optional: Can nest a WizardNav component for substeps */}\n</WizardNavItem>"},{"label":"WizardNavItem","content":"<WizardNavItem\n\ttext={\"''\"}\n\tisCurrent={false}\n\tisDisabled={false}\n\tstep={42}\n\tonNavItemClick={() => undefined}\n\tnavItemComponent={'a'}\n>\n\t{<>ReactNode</>}\n</WizardNavItem>"},{"label":"WizardToggle #","content":"<WizardToggle\n\tnav={(isWizardNavOpen: boolean) => undefined as React.ReactElement/* required: Function that returns the WizardNav component */}\n\tsteps={[]/* required: The wizard steps */}\n\tactiveStep={{}/*unrecognizedType WizardStep undefined*//* required: The currently active WizardStep */}\n\thasBodyPadding={true/* optional: Set to false to remove body padding */}\n\tisNavOpen={true/* required: If the nav is open */}\n\tonNavToggle={(isOpen: boolean) => undefined as void/* required: Callback function for when the nav is toggled */}\n>\n\t{<div>ReactNode</div>/* required: The WizardFooter */}\n</WizardToggle>"},{"label":"WizardToggle","content":"<WizardToggle\n\tnav={(isWizardNavOpen: boolean) => undefined as React.ReactElement}\n\tsteps={[]}\n\tactiveStep={{}/*unrecognizedType WizardStep undefined*/}\n\thasBodyPadding={true}\n\tisNavOpen={true}\n\tonNavToggle={(isOpen: boolean) => undefined as void}\n>\n\t{<div>ReactNode</div>}\n</WizardToggle>"}]},{"category":"Layouts","codeFragments":[{"label":"Bullseye #","content":"<Bullseye\n\tclassName={\"''\"/* optional: additional classes added to the Bullseye layout */}\n\tcomponent={'div'/* optional: Sets the base component to render. defaults to div */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Bullseye layout */}\n</Bullseye>"},{"label":"Bullseye","content":"<Bullseye\n\tclassName={\"''\"}\n\tcomponent={'div'}\n>\n\t{<>ReactNode</>}\n</Bullseye>"},{"label":"Flex #","content":"<Flex\n\tclassName={\"''\"/* optional: additional classes added to the Flex layout */}\n\tbreakpointMods={[]/* optional: An array of objects representing the various modifiers to apply to the flex component at various breakpoints */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Flex layout */}\n</Flex>"},{"label":"Flex","content":"<Flex\n\tclassName={\"''\"}\n\tbreakpointMods={[]}\n>\n\t{<>ReactNode</>}\n</Flex>"},{"label":"FlexItem #","content":"<FlexItem\n\tclassName={\"''\"/* optional: additional classes added to the Flex layout */}\n\tbreakpointMods={[]/* optional: An array of objects representing the various modifiers to apply to the flex item at various breakpoints */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Flex layout */}\n</FlexItem>"},{"label":"FlexItem","content":"<FlexItem\n\tclassName={\"''\"}\n\tbreakpointMods={[]}\n>\n\t{<>ReactNode</>}\n</FlexItem>"},{"label":"Gallery #","content":"<Gallery\n\tclassName={\"''\"/* optional: additional classes added to the Gallery layout */}\n\tgutter={null/* optional: Adds space between children. */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Gallery layout */}\n</Gallery>"},{"label":"Gallery","content":"<Gallery\n\tclassName={\"''\"}\n\tgutter={null}\n>\n\t{<>ReactNode</>}\n</Gallery>"},{"label":"GalleryItem #","content":"<GalleryItem\n\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Gallery Item */}\n</GalleryItem>"},{"label":"GalleryItem","content":"<GalleryItem\n\n>\n\t{<>ReactNode</>}\n</GalleryItem>"},{"label":"Grid #","content":"<Grid\n\tclassName={\"''\"/* optional: additional classes added to the Grid layout */}\n\tgutter={null/* optional: Adds space between children. */}\n\tspan={null/* optional: The number of rows a column in the grid should span.  Value should be a number 1-12 */}\n\tsm={1/* optional: the number of columns all grid items should span on a small device */}\n\tmd={1/* optional: the number of columns all grid items should span on a medium device */}\n\tlg={1/* optional: the number of columns all grid items should span on a large device */}\n\txl={1/* optional: the number of columns all grid items should span on a xLarge device */}\n\txl2={1/* optional: the number of columns all grid items should span on a 2xLarge device */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Grid layout */}\n</Grid>"},{"label":"Grid","content":"<Grid\n\tclassName={\"''\"}\n\tgutter={null}\n\tspan={null}\n\tsm={1}\n\tmd={1}\n\tlg={1}\n\txl={1}\n\txl2={1}\n>\n\t{<>ReactNode</>}\n</Grid>"},{"label":"GridItem #","content":"<GridItem\n\tclassName={\"''\"/* optional: additional classes added to the Grid Layout Item */}\n\tspan={null/* optional: the number of columns the grid item spans. Value should be a number 1-12 */}\n\trowSpan={null/* optional: the number of rows the grid item spans. Value should be a number 1-12 */}\n\toffset={null/* optional: the number of columns a grid item is offset */}\n\tsm={1/* optional: the number of columns the grid item spans on small device. Value should be a number 1-12 */}\n\tsmRowSpan={1/* optional: the number of rows the grid item spans on medium device. Value should be a number 1-12 */}\n\tsmOffset={1/* optional: the number of columns the grid item is offset on small device. Value should be a number 1-12 */}\n\tmd={1/* optional: the number of columns the grid item spans on medium device. Value should be a number 1-12 */}\n\tmdRowSpan={1/* optional: the number of rows the grid item spans on medium device. Value should be a number 1-12 */}\n\tmdOffset={1/* optional: the number of columns the grid item is offset on medium device. Value should be a number 1-12 */}\n\tlg={1/* optional: the number of columns the grid item spans on large device. Value should be a number 1-12 */}\n\tlgRowSpan={1/* optional: the number of rows the grid item spans on large device. Value should be a number 1-12 */}\n\tlgOffset={1/* optional: the number of columns the grid item is offset on large device. Value should be a number 1-12 */}\n\txl={1/* optional: the number of columns the grid item spans on xLarge device. Value should be a number 1-12 */}\n\txlRowSpan={1/* optional: the number of rows the grid item spans on large device. Value should be a number 1-12 */}\n\txlOffset={1/* optional: the number of columns the grid item is offset on xLarge device. Value should be a number 1-12 */}\n\txl2={1/* optional: the number of columns the grid item spans on 2xLarge device. Value should be a number 1-12 */}\n\txl2RowSpan={1/* optional: the number of rows the grid item spans on 2xLarge device. Value should be a number 1-12 */}\n\txl2Offset={1/* optional: the number of columns the grid item is offset on 2xLarge device. Value should be a number 1-12 */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Grid Layout Item */}\n</GridItem>"},{"label":"GridItem","content":"<GridItem\n\tclassName={\"''\"}\n\tspan={null}\n\trowSpan={null}\n\toffset={null}\n\tsm={1}\n\tsmRowSpan={1}\n\tsmOffset={1}\n\tmd={1}\n\tmdRowSpan={1}\n\tmdOffset={1}\n\tlg={1}\n\tlgRowSpan={1}\n\tlgOffset={1}\n\txl={1}\n\txlRowSpan={1}\n\txlOffset={1}\n\txl2={1}\n\txl2RowSpan={1}\n\txl2Offset={1}\n>\n\t{<>ReactNode</>}\n</GridItem>"},{"label":"Level #","content":"<Level\n\tgutter={null/* optional: Adds space between children. */}\n\tclassName={\"''\"/* optional: additional classes added to the Level layout */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Level layout */}\n</Level>"},{"label":"Level","content":"<Level\n\tgutter={null}\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</Level>"},{"label":"LevelItem #","content":"<LevelItem\n\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Level Layout Item */}\n</LevelItem>"},{"label":"LevelItem","content":"<LevelItem\n\n>\n\t{<>ReactNode</>}\n</LevelItem>"},{"label":"Split #","content":"<Split\n\tgutter={null/* optional: Adds space between children. */}\n\tclassName={\"''\"/* optional: additional classes added to the Split layout */}\n\tcomponent={'div'/* optional: Sets the base component to render. defaults to div */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Split layout */}\n</Split>"},{"label":"Split","content":"<Split\n\tgutter={null}\n\tclassName={\"''\"}\n\tcomponent={'div'}\n>\n\t{<>ReactNode</>}\n</Split>"},{"label":"SplitItem #","content":"<SplitItem\n\tisFilled={false/* optional: Flag indicating if this Split Layout item should fill the available horizontal space. */}\n\tclassName={\"''\"/* optional: additional classes added to the Split Layout Item */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Split Layout Item */}\n</SplitItem>"},{"label":"SplitItem","content":"<SplitItem\n\tisFilled={false}\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</SplitItem>"},{"label":"Stack #","content":"<Stack\n\tgutter={null/* optional: Adds space between children. */}\n\tclassName={\"''\"/* optional: additional classes added to the Stack layout */}\n\tcomponent={'div'/* optional: Sets the base component to render. defaults to div */}\n>\n\t{<>ReactNode</>/* optional: content rendered inside the Stack layout */}\n</Stack>"},{"label":"Stack","content":"<Stack\n\tgutter={null}\n\tclassName={\"''\"}\n\tcomponent={'div'}\n>\n\t{<>ReactNode</>}\n</Stack>"},{"label":"StackItem #","content":"<StackItem\n\tisFilled={false/* optional: Flag indicating if this Stack Layout item should fill the available vertical space. */}\n\tclassName={\"''\"/* optional: content rendered inside the Stack Layout Item */}\n>\n\t{<>ReactNode</>/* optional: additional classes added to the Stack Layout Item */}\n</StackItem>"},{"label":"StackItem","content":"<StackItem\n\tisFilled={false}\n\tclassName={\"''\"}\n>\n\t{<>ReactNode</>}\n</StackItem>"},{"label":"Toolbar #","content":"<Toolbar\n\tclassName={\"null\"/* optional: Classes applied to toolbar parent */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as toolbar content */}\n</Toolbar>"},{"label":"Toolbar","content":"<Toolbar\n\tclassName={\"null\"}\n>\n\t{<>ReactNode</>}\n</Toolbar>"},{"label":"ToolbarGroup #","content":"<ToolbarGroup\n\tclassName={\"null\"/* optional: Classes applied to toolbar group */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as one toolbar group */}\n</ToolbarGroup>"},{"label":"ToolbarGroup","content":"<ToolbarGroup\n\tclassName={\"null\"}\n>\n\t{<>ReactNode</>}\n</ToolbarGroup>"},{"label":"ToolbarItem #","content":"<ToolbarItem\n\tclassName={\"null\"/* optional: Classes applied to toolbar item */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as toolbar item content */}\n</ToolbarItem>"},{"label":"ToolbarItem","content":"<ToolbarItem\n\tclassName={\"null\"}\n>\n\t{<>ReactNode</>}\n</ToolbarItem>"},{"label":"ToolbarSection #","content":"<ToolbarSection\n\tclassName={\"null\"/* optional: Classes applied to toolbar section */}\n\taria-label={\"string\"/* optional: Aria label applied to toolbar section */}\n>\n\t{<>ReactNode</>/* optional: Anything that can be rendered as toolbar section */}\n</ToolbarSection>"},{"label":"ToolbarSection","content":"<ToolbarSection\n\tclassName={\"null\"}\n\taria-label={\"string\"}\n>\n\t{<>ReactNode</>}\n</ToolbarSection>"}]},{"category":"Beta","codeFragments":[{"label":"DataToolbar #","content":"<DataToolbar\n\tclearAllFilters={() => undefined as void/* optional: Optional callback for clearing all filters in the toolbar */}\n\tclearFiltersButtonText={\"string\"/* optional: Text to display in the clear all filters button */}\n\tcollapseListedFiltersBreakpoint={'md'/* optional: The breakpoint at which the listed fitlers in chip groups are collapsed down to a summary */}\n\tisExpanded={true/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\ttoggleIsExpanded={() => undefined as void/* optional: A callback for setting the isExpanded flag */}\n\tclassName={\"string\"/* optional: Classes applied to root element of the data toolbar */}\n\tid={\"string\"/* required: Id of the data toolbar */}\n>\n\t{<div>ReactNode</div>/* optional: Content to be rendered as rows in the data toolbar */}\n</DataToolbar>"},{"label":"DataToolbar","content":"<DataToolbar\n\tclearAllFilters={() => undefined as void}\n\tclearFiltersButtonText={\"string\"}\n\tcollapseListedFiltersBreakpoint={'md'}\n\tisExpanded={true}\n\ttoggleIsExpanded={() => undefined as void}\n\tclassName={\"string\"}\n\tid={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DataToolbar>"},{"label":"DataToolbarChipGroupContent #","content":"<DataToolbarChipGroupContent\n\tclassName={\"string\"/* optional: Classes applied to root element of the data toolbar content row */}\n\tisExpanded={true/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\tchipGroupContentRef={{ current: document.createElement('div') }/* optional: Chip group content reference for passing to data toolbar children */}\n\tclearAllFilters={() => undefined as void/* optional: optional callback for clearing all filters in the toolbar */}\n\tshowClearFiltersButton={true/* required: Flag indicating that the clear all filters button should be visible */}\n\tclearFiltersButtonText={\"'Clear all filters'\"/* optional: Text to display in the clear all filters button */}\n\tnumberOfFilters={42/* required: Total number of filters currently being applied across all DataToolbarFilter components */}\n\tcollapseListedFiltersBreakpoint={'lg'/* optional: The breakpoint at which the listed filters in chip groups are collapsed down to a summary */}\n/>"},{"label":"DataToolbarChipGroupContent","content":"<DataToolbarChipGroupContent\n\tclassName={\"string\"}\n\tisExpanded={true}\n\tchipGroupContentRef={{ current: document.createElement('div') }}\n\tclearAllFilters={() => undefined as void}\n\tshowClearFiltersButton={true}\n\tclearFiltersButtonText={\"'Clear all filters'\"}\n\tnumberOfFilters={42}\n\tcollapseListedFiltersBreakpoint={'lg'}\n/>"},{"label":"DataToolbarContent #","content":"<DataToolbarContent\n\tclassName={\"string\"/* optional: Classes applied to root element of the data toolbar content row */}\n\tbreakpointMods={[]/* optional: An array of objects representing the various modifiers to apply to the content row at various breakpoints */}\n\tisExpanded={false/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\tclearAllFilters={() => undefined as void/* optional: Optional callback for clearing all filters in the toolbar */}\n\tshowClearFiltersButton={false/* optional: Flag indicating that the clear all filters button should be visible */}\n\tclearFiltersButtonText={\"string\"/* optional: Text to display in the clear all filters button */}\n\ttoolbarId={\"string\"/* optional: Id of the parent DataToolbar component */}\n>\n\t{<div>ReactNode</div>/* optional: Content to be rendered as children of the content row */}\n</DataToolbarContent>"},{"label":"DataToolbarContent","content":"<DataToolbarContent\n\tclassName={\"string\"}\n\tbreakpointMods={[]}\n\tisExpanded={false}\n\tclearAllFilters={() => undefined as void}\n\tshowClearFiltersButton={false}\n\tclearFiltersButtonText={\"string\"}\n\ttoolbarId={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DataToolbarContent>"},{"label":"DataToolbarExpandableContent #","content":"<DataToolbarExpandableContent\n\tclassName={\"string\"/* optional: Classes added to the root element of the data toolbar expandable content */}\n\tisExpanded={false/* optional: Flag indicating the expandable content is expanded */}\n\texpandableContentRef={{ current: document.createElement('div') }/* optional: Expandable content reference for passing to data toolbar children */}\n\tchipContainerRef={{ current: document.createElement('div') }/* optional: Chip container reference for passing to data toolbar children */}\n\tclearAllFilters={() => undefined as void/* optional: optional callback for clearing all filters in the toolbar */}\n\tclearFiltersButtonText={\"'Clear all filters'\"/* optional: Text to display in the clear all filters button */}\n\tshowClearFiltersButton={true/* required: Flag indicating that the clear all filters button should be visible */}\n/>"},{"label":"DataToolbarExpandableContent","content":"<DataToolbarExpandableContent\n\tclassName={\"string\"}\n\tisExpanded={false}\n\texpandableContentRef={{ current: document.createElement('div') }}\n\tchipContainerRef={{ current: document.createElement('div') }}\n\tclearAllFilters={() => undefined as void}\n\tclearFiltersButtonText={\"'Clear all filters'\"}\n\tshowClearFiltersButton={true}\n/>"},{"label":"DataToolbarFilter #","content":"<DataToolbarFilter\n\tchips={[]/* optional: An array of strings to be displayed as chips in the expandable content */}\n\tdeleteChip={(category: string, chip: DataToolbarChip | string) => undefined as void/* optional: Callback passed by consumer used to delete a chip from the chips[] */}\n\tcategoryName={\"string\"/* required: Unique category name to be used as a label for the chip group */}\n\tshowToolbarItem={true/* optional: Flag to show the toolbar item */}\n>\n\t{<div>ReactNode</div>/* required: Content to be rendered inside the data toolbar item associated with the chip group */}\n</DataToolbarFilter>"},{"label":"DataToolbarFilter","content":"<DataToolbarFilter\n\tchips={[]}\n\tdeleteChip={(category: string, chip: DataToolbarChip | string) => undefined as void}\n\tcategoryName={\"string\"}\n\tshowToolbarItem={true}\n>\n\t{<div>ReactNode</div>}\n</DataToolbarFilter>"},{"label":"DataToolbarGroup #","content":"<DataToolbarGroup\n\tclassName={\"string\"/* optional: Classes applied to root element of the data toolbar group */}\n\tvariant={'filter-group'/* optional: A type modifier which modifies spacing specifically depending on the type of group */}\n\tbreakpointMods={[]/* optional: Array of objects representing the various modifiers to apply to the data toolbar group at various breakpoints */}\n\tinnerRef={{ current: document.createElement('div') }/* optional: Reference to pass to this group if it has .pf-m-chip-container modifier */}\n>\n\t{<div>ReactNode</div>/* optional: Content to be rendered inside the data toolbar group */}\n</DataToolbarGroup>"},{"label":"DataToolbarGroup","content":"<DataToolbarGroup\n\tclassName={\"string\"}\n\tvariant={'filter-group'}\n\tbreakpointMods={[]}\n\tinnerRef={{ current: document.createElement('div') }}\n>\n\t{<div>ReactNode</div>}\n</DataToolbarGroup>"},{"label":"DataToolbarItem #","content":"<DataToolbarItem\n\tclassName={\"string\"/* optional: Classes applied to root element of the data toolbar item */}\n\tvariant={'separator'/* optional: A type modifier which modifies spacing specifically depending on the type of item */}\n\tbreakpointMods={[]/* optional: An array of objects representing the various modifiers to apply to the data toolbar item at various breakpoints */}\n\tid={\"string\"/* optional: id for this data toolbar item */}\n>\n\t{<div>ReactNode</div>/* optional: Content to be rendered inside the data toolbar item */}\n</DataToolbarItem>"},{"label":"DataToolbarItem","content":"<DataToolbarItem\n\tclassName={\"string\"}\n\tvariant={'separator'}\n\tbreakpointMods={[]}\n\tid={\"string\"}\n>\n\t{<div>ReactNode</div>}\n</DataToolbarItem>"},{"label":"DataToolbarToggleGroup #","content":"<DataToolbarToggleGroup\n\ttoggleIcon={<div>ReactNode</div>/* required: An icon to be rendered when the toggle group has collapsed down */}\n\tbreakpoint={'md'/* required: The breakpoint at which the toggle group is collapsed down */}\n\tbreakpointMods={[]/* optional: An array of objects representing the various modifiers to apply to the data toolbar toggle group at various breakpoints */}\n/>"},{"label":"DataToolbarToggleGroup","content":"<DataToolbarToggleGroup\n\ttoggleIcon={<div>ReactNode</div>}\n\tbreakpoint={'md'}\n\tbreakpointMods={[]}\n/>"},{"label":"Drawer #","content":"<Drawer\n\tclassName={\"''\"/* optional: Additional classes added to the Drawer. */}\n\tisExpanded={false/* optional: Indicate if the drawer is expanded */}\n\tisInline={false/* optional: Indicates if the content element and panel element are displayed side by side. */}\n>\n\t{<div>ReactNode</div>/* optional: Content rendered in the left hand panel */}\n</Drawer>"},{"label":"Drawer","content":"<Drawer\n\tclassName={\"''\"}\n\tisExpanded={false}\n\tisInline={false}\n>\n\t{<div>ReactNode</div>}\n</Drawer>"},{"label":"DrawerContent #","content":"<DrawerContent\n\tclassName={\"''\"/* optional: Additional classes added to the Drawer. */}\n>\n\t{<div>ReactNode</div>/* optional: Content to rendered in the drawer */}\n</DrawerContent>"},{"label":"DrawerContent","content":"<DrawerContent\n\tclassName={\"''\"}\n>\n\t{<div>ReactNode</div>}\n</DrawerContent>"},{"label":"DrawerPanelContent #","content":"<DrawerPanelContent\n\tclassName={\"''\"/* optional: Additional classes added to the Drawer. */}\n\tnoPadding={false/* optional: Indicates if there should be padding around the drawer */}\n>\n\t{<div>ReactNode</div>/* optional: Content to rendered in the drawer */}\n</DrawerPanelContent>"},{"label":"DrawerPanelContent","content":"<DrawerPanelContent\n\tclassName={\"''\"}\n\tnoPadding={false}\n>\n\t{<div>ReactNode</div>}\n</DrawerPanelContent>"}]}]}