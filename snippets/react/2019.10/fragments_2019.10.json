{"codeCategories":[{"category":"Components","codeFragments":[{"group":"AboutModal","children":[{"label":"AboutModal","content":"<AboutModal\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the about modal */}\n\tisOpen={${2:false}/* optional: Flag to show the about modal */}\n\tonClose={${3:(): any => undefined}/* optional: A callback for when the close button is clicked */}\n\tproductName={${4:\"''\"}/* optional: Product name */}\n\ttrademark={${5:\"''\"}/* optional: Trademark information */}\n\tbrandImageSrc={${6:\"string\"}/* required: The URL of the image for the brand */}\n\tbrandImageAlt={${7:\"string\"}/* required: The alternate text of the brand image */}\n\tbackgroundImageSrc={${8:\"''\"}/* optional: The URL of the image for the background */}\n\tnoAboutModalBoxContentContainer={${9:false}/* optional: Prevents the about modal from rendering content inside a container; allows for more flexible layouts */}\n\tappendTo={${10:null}/* optional: The parent container to append the modal to. Defaults to document.body */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the about modal */}\n</AboutModal>"},{"label":"AboutModalBox","content":"<AboutModalBox\n\tclassName={${1:\"''\"}/* optional: additional classes added to the AboutModalBox */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the AboutModelBox. */}\n</AboutModalBox>"},{"label":"AboutModalBoxBrand","content":"<AboutModalBoxBrand\n\tclassName={${1:\"''\"}/* optional: additional classes added to the About Modal Brand */}\n\tsrc={${2:\"''\"}/* optional: the URL of the image for the Brand. */}\n\talt={${3:\"string\"}/* required: the alternate text of the Brand image. */}\n/>"},{"label":"AboutModalBoxCloseButton","content":"<AboutModalBoxCloseButton\n\tclassName={${1:\"''\"}/* optional: additional classes added to the About Modal Close button */}\n\tonClose={${2:() => undefined as any}/* optional: A callback for when the close button is clicked */}\n/>"},{"label":"AboutModalBoxContent","content":"<AboutModalBoxContent\n\tclassName={${1:\"''\"}/* optional: additional classes added to the AboutModalBoxContent */}\n\tid={${2:\"string\"}/* required: id to use for About Modal Box aria described by */}\n\ttrademark={${3:\"string\"}/* required: The Trademark info for the product */}\n\tnoAboutModalBoxContentContainer={${4:false}/* optional: Prevents the about modal from rendering content inside a container; allows for more flexible layouts */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the AboutModalBoxContent */}\n</AboutModalBoxContent>"},{"label":"AboutModalBoxHeader","content":"<AboutModalBoxHeader\n\tclassName={${1:\"''\"}/* optional: additional classes added to the button */}\n\tproductName={${2:\"''\"}/* optional: Name of the Product */}\n\tid={${3:\"string\"}/* required: id to used for Modal Box header */}\n/>"},{"label":"AboutModalBoxHero","content":"<AboutModalBoxHero\n\tclassName={${1:\"string\"}/* optional: additional classes added to the About Modal Hero */}\n\tbackgroundImageSrc={${2:\"string\"}/* optional: background image data or file path */}\n/>"},{"label":"AboutModalContainer","content":"<AboutModalContainer\n\tclassName={${1:\"''\"}/* optional: additional classes added to the About Modal Box */}\n\tisOpen={${2:false}/* optional: Flag to show the About Modal */}\n\tonClose={${3:() => undefined}/* optional: A callback for when the close button is clicked */}\n\tproductName={${4:\"''\"}/* optional: Product Name */}\n\ttrademark={${5:\"string\"}/* optional: Trademark information */}\n\tbrandImageSrc={${6:\"string\"}/* required: the URL of the image for the Brand. */}\n\tbrandImageAlt={${7:\"string\"}/* required: the alternate text of the Brand image. */}\n\tbackgroundImageSrc={${8:\"string\"}/* optional: the URL of the image for the background. */}\n\tariaLabelledbyId={${9:\"string\"}/* required: id to use for About Modal Box aria labeled by */}\n\tariaDescribedById={${10:\"string\"}/* required: id to use for About Modal Box aria described by */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the About Modal Box Content. */}\n</AboutModalContainer>"}]},{"group":"Accordion","children":[{"label":"Accordion","content":"<Accordion\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Accordion */}\n\taria-label={${2:\"''\"}/* optional: Adds accessible text to the Accordion */}\n\theadingLevel={${3:'h3'}/* optional: Heading level to use */}\n\tasDefinitionList={${4:true}/* optional: Flag to indicate whether use definition list or div */}\n\tnoBoxShadow={${5:false}/* optional: Flag to indicate if the box shadow should be removed */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Accordion */}\n</Accordion>"},{"label":"AccordionContent","content":"<AccordionContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Accordion content */}\n\tid={${2:\"''\"}/* optional: Identify the AccordionContent item */}\n\tisHidden={${3:false}/* optional: Flag to show if the expanded content of the Accordion item is visible */}\n\tisFixed={${4:false}/* optional: Flag to indicate Accordion content is fixed */}\n\taria-label={${5:\"''\"}/* optional: Adds accessible text to the Accordion content */}\n\tcomponent={${6:() => <div />}/* optional: Component to use as content container */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Accordion */}\n</AccordionContent>"},{"label":"AccordionItem","content":"<AccordionItem\n\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Accordion item */}\n</AccordionItem>"},{"label":"AccordionToggle","content":"<AccordionToggle\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Accordion Toggle */}\n\tisExpanded={${2:false}/* optional: Flag to show if the expanded content of the Accordion item is visible */}\n\tid={${3:\"string\"}/* required: Identify the Accordion toggle number */}\n\tcomponent={${4:() => <div />}/* optional: Container to override the default for toggle */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Accordion toggle */}\n</AccordionToggle>"}]},{"group":"Alert","children":[{"label":"Alert","content":"<Alert\n\tvariant={${1:'success'}/* optional: Adds Alert variant styles */}\n\tisInline={${2:false}/* optional: Flag to indicate if the Alert is inline */}\n\ttitle={${3:<div>ReactNode</div>}/* required: Title of the Alert */}\n\taction={${4:null}/* optional: Action button to put in the Alert. Should be <AlertActionLink> or <AlertActionCloseButton> */}\n\tclassName={${5:\"''\"}/* optional: Additional classes added to the Alert */}\n\taria-label={${6:\"string\"}/* optional: Adds accessible text to the Alert */}\n\tvariantLabel={${7:\"string\"}/* optional: Variant label text for screen readers */}\n>\n\t{${0:''}/* optional: Content rendered inside the Alert */}\n</Alert>"},{"label":"AlertActionCloseButton","content":"<AlertActionCloseButton\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the AlertActionCloseButton */}\n\tonClose={${2:() => undefined as any}/* optional: A callback for when the close button is clicked */}\n\taria-label={${3:\"''\"}/* optional: Aria Label for the Close button */}\n\tvariantLabel={${4:\"''\"}/* optional: Variant Label for the Close button */}\n/>"},{"label":"AlertActionLink","content":"<AlertActionLink\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the AlertActionLink */}\n>\n\t{${0:\"''\"}/* optional: Content rendered inside the AlertLinkAction */}\n</AlertActionLink>"},{"label":"AlertIcon","content":"<AlertIcon\n\tvariant={${1:'success'}/* required: variant */}\n\tclassName={${2:\"''\"}/* optional: className */}\n/>"}]},{"group":"ApplicationLauncher","children":[{"label":"ApplicationLauncher","content":"<ApplicationLauncher\n\tclassName={${1:\"''\"}/* optional: Additional element css classes */}\n\tdirection={${2:undefined}/* optional: Display menu above or below dropdown toggle */}\n\tdropdownItems={${3:[]}/* optional: @deprecated | Use the items prop instead | Array of DropdownItem nodes that will be rendered in the dropdown Menu list */}\n\titems={${4:[]}/* optional: Array of application launcher items */}\n\tisDisabled={${5:false}/* optional: Render Application launcher toggle as disabled icon */}\n\tisOpen={${6:false}/* optional: open bool */}\n\tposition={${7:undefined}/* optional: Indicates where menu will be alligned horizontally */}\n\tonSelect={${8:(_event: any): any => undefined}/* optional: Function callback called when user selects item */}\n\tonToggle={${9:(_value: boolean): any => undefined}/* optional: Callback called when application launcher toggle is clicked */}\n\taria-label={${10:\"'Application launcher'\"}/* optional: Adds accessible text to the button. Required for plain buttons */}\n\tisGrouped={${11:false}/* optional: Flag to indicate if application launcher has groups */}\n\ttoggleIcon={${12:<div>ReactNode</div>}/* optional: Toggle Icon, optional to override the icon used for the toggle */}\n/>"},{"label":"ApplicationLauncherContent","content":"<ApplicationLauncherContent\n\n>\n\t{${0:<div>ReactNode</div>}/* required: Main content to be rendered */}\n</ApplicationLauncherContent>"},{"label":"ApplicationLauncherGroup","content":"<ApplicationLauncherGroup\n\n/>"},{"label":"ApplicationLauncherIcon","content":"<ApplicationLauncherIcon\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the icon container */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the icon container */}\n</ApplicationLauncherIcon>"},{"label":"ApplicationLauncherSeparator","content":"<ApplicationLauncherSeparator\n\n/>"},{"label":"ApplicationLauncherText","content":"<ApplicationLauncherText\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the text container */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the text container */}\n</ApplicationLauncherText>"}]},{"group":"Avatar","children":[{"label":"Avatar","content":"<Avatar\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Avatar. */}\n\tsrc={${2:\"''\"}/* optional: Attribute that specifies the URL of the image for the Avatar. */}\n\talt={${3:\"string\"}/* required: Attribute that specifies the alternate text of the image for the Avatar. */}\n/>"}]},{"group":"Backdrop","children":[{"label":"Backdrop","content":"<Backdrop\n\tclassName={${1:\"''\"}/* optional: additional classes added to the button */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the backdrop */}\n</Backdrop>"}]},{"group":"BackgroundImage","children":[{"label":"BackgroundImage","content":"<BackgroundImage\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the background. */}\n\tsrc={${2:'string'}/* required: Override image styles using a string or BackgroundImageSrc */}\n/>"}]},{"group":"Badge","children":[{"label":"Badge","content":"<Badge\n\tisRead={${1:false}/* optional: Adds styling to the badge to indicate it has been read */}\n\tclassName={${2:\"''\"}/* optional: additional classes added to the Badge */}\n>\n\t{${0:''}/* optional: content rendered inside the Badge */}\n</Badge>"}]},{"group":"Breadcrumb","children":[{"label":"Breadcrumb","content":"<Breadcrumb\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the breadcrumb nav. */}\n\taria-label={${2:\"'Breadcrumb'\"}/* optional: Aria label added to the breadcrumb nav. */}\n>\n\t{${0:<>ReactNode</>}/* optional: Children nodes be rendered to the BreadCrumb. Should be of type BreadCrumbItem. */}\n</Breadcrumb>"},{"label":"BreadcrumbHeading","content":"<BreadcrumbHeading\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the breadcrumb item. */}\n\tto={${2:\"null\"}/* optional: HREF for breadcrumb link. */}\n\ttarget={${3:\"null\"}/* optional: Target for breadcrumb link. */}\n\tcomponent={${4:'a'}/* optional: Sets the base component to render. Defaults to <a> */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the breadcrumb title. */}\n</BreadcrumbHeading>"},{"label":"BreadcrumbItem","content":"<BreadcrumbItem\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the breadcrumb item. */}\n\tto={${2:\"null\"}/* optional: HREF for breadcrumb link. */}\n\tisActive={${3:false}/* optional: Flag indicating whether the item is active. */}\n\ttarget={${4:\"null\"}/* optional: Target for breadcrumb link. */}\n\tcomponent={${5:'a'}/* optional: Sets the base component to render. Defaults to <a> */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the breadcrumb item. */}\n</BreadcrumbItem>"}]},{"group":"Button","children":[{"label":"Button","content":"<Button\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the button */}\n\tcomponent={${2:'button'}/* optional: Sets the base component to render. defaults to button */}\n\tisActive={${3:false}/* optional: Adds active styling to button. */}\n\tisBlock={${4:false}/* optional: Adds block styling to button */}\n\tisDisabled={${5:false}/* optional: Disables the button and adds disabled styling */}\n\tisFocus={${6:false}/* optional: Adds focus styling to the button */}\n\tisHover={${7:false}/* optional: Adds hover styling to the button */}\n\tisInline={${8:false}/* optional: Adds inline styling to a link button */}\n\ttype={${9:'button'}/* optional: Sets button type */}\n\tvariant={${10:'primary'}/* optional: Adds button variant styles */}\n\taria-label={${11:\"null\"}/* optional: Adds accessible text to the button. */}\n\ticon={${12:null}/* optional: Icon for the button if variant is a link */}\n\ttabIndex={${13:null}/* optional: Set button tab index unless component is not a button and is disabled */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the button */}\n</Button>"}]},{"group":"Card","children":[{"label":"Card","content":"<Card\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Card */}\n\tcomponent={${2:'article'}/* optional: Sets the base component to render. defaults to article */}\n\tisHoverable={${3:false}/* optional: Modifies the card to include hover styles on :hover */}\n\tisCompact={${4:false}/* optional: Modifies the card to include compact styling */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card */}\n</Card>"},{"label":"CardActions","content":"<CardActions\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Action */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card Action */}\n</CardActions>"},{"label":"CardBody","content":"<CardBody\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Card Body */}\n\tcomponent={${2:'div'}/* optional: Sets the base component to render. defaults to div */}\n\tisFilled={${3:true}/* optional: Enables the body Content to fill the height of the card */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card Body */}\n</CardBody>"},{"label":"CardFooter","content":"<CardFooter\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Footer */}\n\tcomponent={${2:'div'}/* optional: Sets the base component to render. defaults to div */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card Footer */}\n</CardFooter>"},{"label":"CardHead","content":"<CardHead\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Head */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card Head */}\n</CardHead>"},{"label":"CardHeader","content":"<CardHeader\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Header */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Card Footer */}\n</CardHeader>"}]},{"group":"Checkbox","children":[{"label":"Checkbox","content":"<Checkbox\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Checkbox. */}\n\tisValid={${2:true}/* optional: Flag to show if the Checkbox selection is valid or invalid. */}\n\tisDisabled={${3:false}/* optional: Flag to show if the Checkbox is disabled. */}\n\tisChecked={${4:false}/* optional: Flag to show if the Checkbox is checked. */}\n\tchecked={${5:true}/* optional:  */}\n\tonChange={${6:() => {}}/* optional: A callback for when the Checkbox selection changes. */}\n\tlabel={${7:<div>ReactNode</div>}/* optional: Label text of the checkbox. */}\n\tid={${8:\"string\"}/* required: Id of the checkbox. */}\n\taria-label={${9:\"string\"}/* optional: Aria-label of the checkbox. */}\n/>"}]},{"group":"ChipGroup","children":[{"label":"Chip","content":"<Chip\n\tcloseBtnAriaLabel={${1:\"'close'\"}/* optional: Aria Label for close button */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the chip item */}\n\tisOverflowChip={${3:false}/* optional: Flag indicating if the chip has overflow */}\n\tisReadOnly={${4:false}/* optional: Flag if chip is read only */}\n\tonClick={${5:(_e: React.MouseEvent) => undefined as any}/* optional: Function that is called when clicking on the chip button */}\n\tcomponent={${6:'div'}/* optional: Internal flag for which component will be used for chip */}\n\ttooltipPosition={${7:'top'}/* optional: Position of the tooltip which is displayed if text is longer */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content rendered inside the chip text */}\n</Chip>"},{"label":"ChipButton","content":"<ChipButton\n\tariaLabel={${1:\"'close'\"}/* optional: Aria label for chip button */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the chip item */}\n\tonClick={${3:() => undefined}/* optional: Function that is called when clicking on the chip button */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the chip item */}\n</ChipButton>"},{"label":"ChipGroup","content":"<ChipGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the chip item */}\n\tdefaultIsOpen={${2:false}/* optional: Flag for having the chip group default to expanded */}\n\texpandedText={${3:\"'Show Less'\"}/* optional: Customizable \"Show Less\" text string */}\n\tcollapsedText={${4:\"'${remaining} more'\"}/* optional: Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */}\n\twithToolbar={${5:false}/* optional: Flag for grouping with a toolbar & category name */}\n\theadingLevel={${6:'h1'}/* optional: Set heading level to the chip item label */}\n\tnumChips={${7:3}/* optional: Set number of chips to show before overflow */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content rendered inside the chip text */}\n</ChipGroup>"},{"label":"ChipGroupToolbarItem","content":"<ChipGroupToolbarItem\n\tcategoryName={${1:\"''\"}/* optional: Category name text */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the chip item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the chip text */}\n</ChipGroupToolbarItem>"}]},{"group":"ClipboardCopy","children":[{"label":"ClipboardCopy","content":"<ClipboardCopy\n\tclassName={${1:\"string\"}/* optional: Additional classes added to the clipboard copy container. */}\n\thoverTip={${2:\"'Copy to clipboard'\"}/* optional: Tooltip message to display when hover the copy button */}\n\tclickTip={${3:\"'Successfully copied to clipboard!'\"}/* optional: Tooltip message to display when clicking the copy button */}\n\ttextAriaLabel={${4:\"'Copyable input'\"}/* optional: Custom flag to show that the input requires an associated id or aria-label. */}\n\ttoggleAriaLabel={${5:\"'Show content'\"}/* optional: Custom flag to show that the toggle button requires an associated id or aria-label. */}\n\tisReadOnly={${6:false}/* optional: Flag to show if the input is read only. */}\n\tisExpanded={${7:false}/* optional: Flag to determine if clipboard copy is in the expanded state initially */}\n\tisCode={${8:false}/* optional: Flag to determine if clipboard copy content includes code */}\n\tvariant={${9:'inline'}/* optional: Adds Clipboard Copy variant styles. */}\n\tposition={${10:undefined}/* optional: Copy button popover position. */}\n\tmaxWidth={${11:\"'150px'\"}/* optional: Maximum width of the tooltip (default 150px). */}\n\texitDelay={${12:1600}/* optional: Delay in ms before the tooltip disappears. */}\n\tentryDelay={${13:100}/* optional: Delay in ms before the tooltip appears. */}\n\tswitchDelay={${14:2000}/* optional: Delay in ms before the tooltip message switch to hover tip. */}\n\tonCopy={${15:(event: any, text: string) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('input');\n  el.value = text;\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n}}/* optional: A function that is triggered on clicking the copy button. */}\n\tonChange={${16:(): any => undefined}/* optional: A function that is triggered on changing the text. */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: The text which is copied. */}\n</ClipboardCopy>"},{"label":"ClipboardCopyButton","content":"<ClipboardCopyButton\n\tonClick={${1:(event: React.MouseEvent) => undefined as void}/* required:  */}\n\tid={${2:\"string\"}/* required:  */}\n\ttextId={${3:\"string\"}/* required:  */}\n\tclassName={${4:\"''\"}/* optional:  */}\n\texitDelay={${5:100}/* optional:  */}\n\tentryDelay={${6:100}/* optional:  */}\n\tmaxWidth={${7:\"'100px'\"}/* optional:  */}\n\tposition={${8:'top'}/* optional:  */}\n\taria-label={${9:\"'Copyable input'\"}/* optional:  */}\n>\n\t{${0:<div>ReactNode</div>}/* required:  */}\n</ClipboardCopyButton>"},{"label":"ClipboardCopyExpanded","content":"<ClipboardCopyExpanded\n\tclassName={${1:\"''\"}/* optional:  */}\n\tonChange={${2:(): any => undefined}/* optional:  */}\n\tisReadOnly={${3:false}/* optional:  */}\n\tisCode={${4:false}/* optional:  */}\n>\n\t{${0:<div>ReactNode</div>}/* required:  */}\n</ClipboardCopyExpanded>"},{"label":"ClipboardCopyToggle","content":"<ClipboardCopyToggle\n\tonClick={${1:(event: React.MouseEvent) => undefined as void}/* required:  */}\n\tid={${2:\"string\"}/* required:  */}\n\ttextId={${3:\"string\"}/* required:  */}\n\tcontentId={${4:\"string\"}/* required:  */}\n\tisExpanded={${5:false}/* optional:  */}\n\tclassName={${6:\"''\"}/* optional:  */}\n/>"}]},{"group":"ContextSelector","children":[{"label":"ContextSelectorItem","content":"<ContextSelectorItem\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of the Context Selector item */}\n\tisDisabled={${2:false}/* optional: Render Context  Selector item as disabled */}\n\tisHovered={${3:false}/* optional: Forces display of the hover state of the element */}\n\tonClick={${4:(): any => undefined}/* optional: Callback for click event */}\n\tindex={${5:42}/* optional: internal index of the item */}\n\tsendRef={${6:(index: number, current: any) => undefined as void}/* optional: Internal callback for ref tracking */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything which can be rendered as Context Selector item */}\n</ContextSelectorItem>"},{"label":"ContextSelectorMenuList","content":"<ContextSelectorMenuList\n\tclassName={${1:\"''\"}/* optional: Classess applied to root element of Context Selector menu */}\n\tisOpen={${2:true}/* optional: Flag to indicate if Context Selector menu is opened */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Context Selector Menu */}\n</ContextSelectorMenuList>"},{"label":"ContextSelectorToggle","content":"<ContextSelectorToggle\n\tid={${1:\"string\"}/* required: HTML ID of toggle */}\n\tclassName={${2:\"''\"}/* optional: Classes applied to root element of toggle */}\n\ttoggleText={${3:\"''\"}/* optional: Text that appears in the Context Selector Toggle */}\n\tisOpen={${4:false}/* optional: Flag to indicate if menu is opened */}\n\tonToggle={${5:(event: any, value: boolean) => undefined as any}/* optional: Callback called when toggle is clicked */}\n\tonEnter={${6:() => undefined as any}/* optional: Callback for toggle open on keyboard entry */}\n\tparentRef={${7:null}/* optional: Element which wraps toggle */}\n\tisFocused={${8:false}/* optional: Forces focus state */}\n\tisHovered={${9:false}/* optional: Forces hover state */}\n\tisActive={${10:false}/* optional: Forces active state */}\n/>"}]},{"group":"DataList","children":[{"label":"DataList","content":"<DataList\n\tclassName={${1:\"''\"}/* optional:  */}\n\taria-label={${2:\"string\"}/* required:  */}\n>\n\t{${0:<>ReactNode</>}/* optional:  */}\n</DataList>"},{"label":"DataListAction","content":"<DataListAction\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList Action */}\n\tid={${2:\"string\"}/* required: Identify the DataList toggle number */}\n\taria-labelledby={${3:\"string\"}/* required: Adds accessible text to the DataList Action */}\n\taria-label={${4:\"string\"}/* required: Adds accessible text to the DataList Action */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered as DataList Action  (e.g <Button> or <Dropdown>) */}\n</DataListAction>"},{"label":"DataListCell","content":"<DataListCell\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList cell */}\n\twidth={${2:1}/* optional: Width (from 1-5) to the DataList cell */}\n\tisFilled={${3:true}/* optional: Enables the body Content to fill the height of the card */}\n\talignRight={${4:false}/* optional: Aligns the cell content to the right of its parent. */}\n\tisIcon={${5:false}/* optional: Set to true if the cell content is an Icon */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the DataList cell */}\n</DataListCell>"},{"label":"DataListCheck","content":"<DataListCheck\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList item checkbox */}\n\tisValid={${2:true}/* optional: Flag to show if the DataList checkbox selection is valid or invalid */}\n\tisDisabled={${3:false}/* optional: Flag to show if the DataList checkbox is disabled */}\n\tisChecked={${4:null}/* optional: Flag to show if the DataList checkbox is checked */}\n\tchecked={${5:null}/* optional: Alternate Flag to show if the DataList checkbox is checked */}\n\tonChange={${6:(checked: boolean, event: React.FormEvent<HTMLInputElement>) => undefined as void}/* optional: A callback for when the DataList checkbox selection changes */}\n\taria-labelledby={${7:\"string\"}/* required: Aria-labelledby of the DataList checkbox */}\n/>"},{"label":"DataListContent","content":"<DataListContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList cell */}\n\tid={${2:\"''\"}/* optional: Identify the DataListContent item */}\n\trowid={${3:\"''\"}/* optional: Id for the row */}\n\tisHidden={${4:false}/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tnoPadding={${5:false}/* optional: Flag to remove padding from the expandable content */}\n\taria-label={${6:\"string\"}/* required: Adds accessible text to the DataList toggle */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the DataList item */}\n</DataListContent>"},{"label":"DataListItem","content":"<DataListItem\n\tisExpanded={${1:false}/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */}\n\taria-labelledby={${3:\"string\"}/* required: Adds accessible text to the DataList item */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the DataList item */}\n</DataListItem>"},{"label":"DataListItemCells","content":"<DataListItemCells\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList item Content Wrapper.  Children should be one ore more <DataListCell> nodes */}\n\tdataListCells={${2:<div>ReactNode</div>}/* optional: Array of <DataListCell> nodes that are rendered one after the other. */}\n\trowid={${3:\"''\"}/* optional: Id for the row */}\n/>"},{"label":"DataListItemRow","content":"<DataListItemRow\n\tclassName={${1:\"''\"}/* optional:  */}\n\trowid={${2:\"''\"}/* optional:  */}\n>\n\t{${0:<div>ReactNode</div>}/* required:  */}\n</DataListItemRow>"},{"label":"DataListToggle","content":"<DataListToggle\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DataList cell */}\n\tisExpanded={${2:false}/* optional: Flag to show if the expanded content of the DataList item is visible */}\n\tid={${3:\"string\"}/* required: Identify the DataList toggle number */}\n\trowid={${4:\"''\"}/* optional: Id for the row */}\n\taria-labelledby={${5:\"''\"}/* optional: Adds accessible text to the DataList toggle */}\n\taria-label={${6:\"'Details'\"}/* optional: Adds accessible text to the DataList toggle */}\n\taria-controls={${7:\"''\"}/* optional: Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */}\n/>"}]},{"group":"Dropdown","children":[{"label":"Dropdown","content":"<Dropdown\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of dropdown */}\n\tdropdownItems={${2:[]}/* optional: Array of DropdownItem nodes that will be rendered in the dropdown Menu list */}\n\tisOpen={${3:true}/* optional: Flag to indicate if menu is opened */}\n\tisPlain={${4:true}/* optional: Display the toggle with no border or background */}\n\tposition={${5:'right'}/* optional: Indicates where menu will be aligned horizontally */}\n\tdirection={${6:'up'}/* optional: Display menu above or below dropdown toggle */}\n\tisGrouped={${7:true}/* optional: Flag to indicate if dropdown has groups */}\n\ttoggle={${8:<p>ReactElement</p>}/* required: Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */}\n\tautoFocus={${9:true}/* optional: Flag to indicate if the first dropdown item should gain initial focus, set false when adding | a specific auto-focus item (like a current selection) otherwise leave as true */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Anything which can be rendered in a dropdown */}\n</Dropdown>"},{"label":"DropdownGroup","content":"<DropdownGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the DropdownGroup control */}\n\tlabel={${2:''}/* optional: Group label */}\n>\n\t{${0:<>ReactNode</>}/* optional: Checkboxes within group */}\n</DropdownGroup>"},{"label":"DropdownItem","content":"<DropdownItem\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of dropdown item */}\n\tlistItemClassName={${2:\"string\"}/* optional: Class to be applied to list item */}\n\tcomponent={${3:'a'}/* optional: Indicates which component will be used as dropdown item */}\n\tvariant={${4:'item'}/* optional: Variant of the item. The 'icon' variant should use DropdownItemIcon to wrap contained icons or images. */}\n\tisDisabled={${5:false}/* optional: Render dropdown item as disabled option */}\n\tisHovered={${6:false}/* optional: Forces display of the hover state of the element */}\n\thref={${7:\"''\"}/* optional: Default hyperlink location */}\n\ttooltip={${8:null}/* optional: Tooltip to display when hovered over the item */}\n\ttooltipProps={${9:undefined}/* optional: Additional tooltip props forwarded to the Tooltip component */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything which can be rendered as dropdown item */}\n</DropdownItem>"},{"label":"DropdownItemIcon","content":"<DropdownItemIcon\n\tclassName={${1:\"''\"}/* optional: Classes applied to span element of dropdown icon item */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Icon to be rendered in the dropdown item */}\n</DropdownItemIcon>"},{"label":"DropdownMenu","content":"<DropdownMenu\n\tclassName={${1:\"''\"}/* optional: Classess applied to root element of dropdown menu */}\n\tisOpen={${2:true}/* optional: Flag to indicate if menu is opened */}\n\topenedOnEnter={${3:false}/* optional: Flag to indicate if menu should be opened on enter */}\n\tautoFocus={${4:true}/* optional: Flag to indicate if the first dropdown item should gain initial focus, set false when adding | a specific auto-focus item (like a current selection) otherwise leave as true */}\n\tcomponent={${5:'ul'}/* optional: Indicates which component will be used as dropdown menu */}\n\tposition={${6:'right'}/* optional: Indicates where menu will be alligned horizontally */}\n\tisGrouped={${7:false}/* optional: Flag to indicate if menu is grouped */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Anything which can be rendered as dropdown items */}\n</DropdownMenu>"},{"label":"DropdownToggle","content":"<DropdownToggle\n\tid={${1:\"''\"}/* optional: HTML ID of dropdown toggle */}\n\tclassName={${2:\"''\"}/* optional: Classes applied to root element of dropdown toggle button */}\n\tisOpen={${3:false}/* optional: Flag to indicate if menu is opened */}\n\tonToggle={${4:(_isOpen: boolean) => undefined as any}/* optional: Callback called when toggle is clicked */}\n\tparentRef={${5:null}/* optional: Element which wraps toggle */}\n\tisFocused={${6:false}/* optional: Forces focus state */}\n\tisHovered={${7:false}/* optional: Forces hover state */}\n\tisActive={${8:false}/* optional: Forces active state */}\n\tisPlain={${9:false}/* optional: Display the toggle with no border or background */}\n\tisDisabled={${10:false}/* optional: Whether or not the <div> has a disabled state */}\n\tisPrimary={${11:false}/* optional: Whether or not the dropdown toggle button should have primary button styling */}\n\ticonComponent={${12:() => <p>ReactElementType</p>}/* optional: The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon. */}\n\tsplitButtonItems={${13:[]}/* optional: Elements to display before the toggle button. When included, renders the toggle as a split button. */}\n\tsplitButtonVariant={${14:'checkbox'}/* optional: Variant of split button toggle */}\n\taria-label={${15:\"string\"}/* optional: Accessible label for the dropdown toggle button */}\n\tariaHasPopup={${16:true}/* optional: Accessibility property to indicate correct has popup */}\n\ttype={${17:'button'}/* optional: Type to put on the button */}\n\tonEnter={${18:(event?: React.MouseEvent<HTMLButtonElement>) => undefined as void}/* optional: Callback called when the Enter key is pressed */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything which can be rendered as dropdown toggle button */}\n</DropdownToggle>"},{"label":"KebabToggle","content":"<KebabToggle\n\tid={${1:\"''\"}/* optional: HTML ID of dropdown toggle */}\n\tclassName={${2:\"''\"}/* optional: Classess applied to root element of dropdown toggle */}\n\tisOpen={${3:false}/* optional: Flag to indicate if menu is opened */}\n\taria-label={${4:\"'Actions'\"}/* optional: Label Toggle button */}\n\tonToggle={${5:() => undefined as void}/* optional: Callback called when toggle is clicked */}\n\tparentRef={${6:null}/* optional: Element which wraps toggle */}\n\tisFocused={${7:false}/* optional: Forces focus state */}\n\tisHovered={${8:false}/* optional: Forces hover state */}\n\tisActive={${9:false}/* optional: Forces active state */}\n\tisDisabled={${10:false}/* optional: Disables the dropdown toggle */}\n\tisPlain={${11:false}/* optional: Display the toggle with no border or background */}\n\ttype={${12:'button'}/* optional: Type to put on the button */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything which can be rendered as dropdown toggle */}\n</KebabToggle>"},{"label":"Separator","content":"<Separator\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of dropdown item */}\n\tonClick={${2:(event: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent | MouseEvent) => undefined as void}/* optional: Click event to pass to InternalDropdownItem */}\n/>"},{"label":"Toggle","content":"<Toggle\n\tid={${1:\"string\"}/* required: HTML ID of dropdown toggle */}\n\ttype={${2:'button'}/* optional: Type to put on the button */}\n\tclassName={${3:\"''\"}/* optional: Classes applied to root element of dropdown toggle */}\n\tisOpen={${4:false}/* optional: Flag to indicate if menu is opened */}\n\tonToggle={${5:(\n  isOpen: boolean,\n  event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>\n) => undefined as void}/* optional: Callback called when toggle is clicked */}\n\tonEnter={${6:() => undefined as void}/* optional: Callback called when the Enter key is pressed */}\n\tparentRef={${7:'any'}/* optional: Element which wraps toggle */}\n\tisFocused={${8:false}/* optional: Forces focus state */}\n\tisHovered={${9:false}/* optional: Forces hover state */}\n\tisActive={${10:false}/* optional: Forces active state */}\n\tisDisabled={${11:false}/* optional: Disables the dropdown toggle */}\n\tisPlain={${12:false}/* optional: Display the toggle with no border or background */}\n\tisPrimary={${13:false}/* optional: Display the toggle with a primary button style */}\n\tisSplitButton={${14:false}/* optional: Style the toggle as a child of a split button */}\n\tariaHasPopup={${15:true}/* optional: Flag for aria popup */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Anything which can be rendered as dropdown toggle */}\n</Toggle>"}]},{"group":"EmptyState","children":[{"label":"EmptyState","content":"<EmptyState\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the EmptyState */}\n\tvariant={${2:'small'}/* optional: Modifies EmptyState max-width */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the EmptyState */}\n</EmptyState>"},{"label":"EmptyStateBody","content":"<EmptyStateBody\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the EmptyState */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content rendered inside the EmptyState */}\n</EmptyStateBody>"},{"label":"EmptyStateIcon","content":"<EmptyStateIcon\n\tcolor={${1:\"string\"}/* optional:  */}\n\tsize={${2:'sm'}/* optional:  */}\n\ttitle={${3:\"string\"}/* optional:  */}\n\tclassName={${4:\"''\"}/* optional: Additional classes added to the EmptyState */}\n\ticon={${5:null}/* optional: Icon component to be rendered inside the EmptyState on icon variant */}\n\tcomponent={${6:null}/* optional: Component to be rendered inside the EmptyState on container variant */}\n\tvariant={${7:'icon'}/* optional: Adds empty state icon variant styles */}\n/>"},{"label":"EmptyStatePrimary","content":"<EmptyStatePrimary\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the EmptyStatePrimary */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the EmptyStatePrimary */}\n</EmptyStatePrimary>"},{"label":"EmptyStateSecondaryActions","content":"<EmptyStateSecondaryActions\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the EmptyState */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the EmptyState */}\n</EmptyStateSecondaryActions>"}]},{"group":"Expandable","children":[{"label":"Expandable","content":"<Expandable\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Expandable Component */}\n\tisExpanded={${2:true}/* optional: Flag to indicate if the content is expanded */}\n\ttoggleText={${3:\"''\"}/* optional: Text that appears in the toggle */}\n\ttoggleTextExpanded={${4:\"''\"}/* optional: Text that appears in the toggle when expanded (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */}\n\ttoggleTextCollapsed={${5:\"''\"}/* optional: Text that appears in the toggle when collapsed (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */}\n\tonToggle={${6:(): any => undefined}/* optional: Callback function to toggle the expandable content */}\n\tisFocused={${7:false}/* optional: Forces focus state */}\n\tisHovered={${8:false}/* optional: Forces hover state */}\n\tisActive={${9:false}/* optional: Forces active state */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the Expandable Component */}\n</Expandable>"}]},{"group":"Form","children":[{"label":"ActionGroup","content":"<ActionGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the ActionGroup. */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as ActionGroup content. */}\n</ActionGroup>"},{"label":"Form","content":"<Form\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Form. */}\n\tisHorizontal={${2:false}/* optional: Sets the Form to horizontal. */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as Form content. */}\n</Form>"},{"label":"FormGroup","content":"<FormGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the FormGroup. */}\n\tlabel={${2:<div>ReactNode</div>}/* optional: Label text before the field. */}\n\tisRequired={${3:false}/* optional: Sets the FormGroup required. */}\n\tisValid={${4:true}/* optional: Sets the FormGroup isValid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={${5:'default'}/* optional: Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state. | If set to error,  text color of helper text will be modified to indicate error state. */}\n\tisInline={${6:false}/* optional: Sets the FormGroup isInline. */}\n\thelperText={${7:<div>ReactNode</div>}/* optional: Helper text after the field. It can be a simple text or an object. */}\n\thelperTextInvalid={${8:<div>ReactNode</div>}/* optional: Helper text after the field when the field is invalid. It can be a simple text or an object. */}\n\tfieldId={${9:\"string\"}/* required: ID of the included field. It has to be the same for proper working. */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as FormGroup content. */}\n</FormGroup>"},{"label":"FormHelperText","content":"<FormHelperText\n\tisError={${1:false}/* optional: Adds error styling to the Helper Text  * */}\n\tisHidden={${2:true}/* optional: Hides the helper text * */}\n\tclassName={${3:\"''\"}/* optional: Additional classes added to the Helper Text Item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Helper Text Item */}\n</FormHelperText>"}]},{"group":"FormSelect","children":[{"label":"FormSelect","content":"<FormSelect\n\tclassName={${1:\"''\"}/* optional: additional classes added to the FormSelect control */}\n\tvalue={${2:''}/* optional: value of selected option */}\n\tisValid={${3:true}/* optional: Flag indicating selection is valid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={${4:'default'}/* optional:  */}\n\tisDisabled={${5:false}/* optional: Flag indicating the FormSelect is disabled */}\n\tisRequired={${6:false}/* optional: Sets the FormSelectrequired. */}\n\tonBlur={${7:(): any => undefined}/* optional: Optional callback for updating when selection loses focus */}\n\tonFocus={${8:(): any => undefined}/* optional: Optional callback for updating when selection gets focus */}\n\tonChange={${9:(): any => undefined}/* optional: Optional callback for updating when selection changes */}\n\taria-label={${10:\"string\"}/* optional: Custom flag to show that the FormSelect requires an associated id or aria-label. */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the FormSelect */}\n</FormSelect>"},{"label":"FormSelectOption","content":"<FormSelectOption\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Select Option */}\n\tvalue={${2:''}/* optional: the value for the option */}\n\tlabel={${3:\"string\"}/* required: the label for the option */}\n\tisDisabled={${4:false}/* optional: flag indicating if the option is disabled */}\n/>"},{"label":"FormSelectOptionGroup","content":"<FormSelectOptionGroup\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Select Option */}\n\tlabel={${2:\"string\"}/* required: the label for the option */}\n\tisDisabled={${3:false}/* optional: flag indicating if the Option Group is disabled */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Select Option Group */}\n</FormSelectOptionGroup>"}]},{"group":"InputGroup","children":[{"label":"InputGroup","content":"<InputGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the input group. */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the input group. */}\n</InputGroup>"},{"label":"InputGroupText","content":"<InputGroupText\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the input group text. */}\n\tcomponent={${2:'span'}/* optional: Component that wraps the input group text. */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the input group text. */}\n</InputGroupText>"}]},{"group":"LoginPage","children":[{"label":"Login","content":"<Login\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the login layout */}\n\tfooter={${2:null}/* optional: Footer component (e.g. <LoginFooter />) */}\n\theader={${3:null}/* optional: Header component (e.g. <LoginHeader />) */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the main section of the login layout */}\n</Login>"},{"label":"LoginFooter","content":"<LoginFooter\n\tclassName={${1:\"''\"}/* optional: Additional props are spread to the container <footer> */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the footer of the login layout */}\n</LoginFooter>"},{"label":"LoginFooterItem","content":"<LoginFooterItem\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Footer Link Item */}\n\thref={${2:\"'#'\"}/* optional: The URL of the Footer Link Item */}\n\ttarget={${3:\"'_blank'\"}/* optional: Specifies where to open the linked document */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the footer Link Item */}\n</LoginFooterItem>"},{"label":"LoginForm","content":"<LoginForm\n\tnoAutoFocus={${1:false}/* optional: Flag to indicate if the first dropdown item should not gain initial focus */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the Login Main Body's Form */}\n\tshowHelperText={${3:false}/* optional: Flag indicating the Helper Text is visible * */}\n\thelperText={${4:null}/* optional: Content displayed in the Helper Text component * */}\n\tusernameLabel={${5:\"'Username'\"}/* optional: Label for the Username Input Field */}\n\tusernameValue={${6:\"''\"}/* optional: Value for the Username */}\n\tonChangeUsername={${7:() => undefined as any}/* optional: Function that handles the onChange event for the Username */}\n\tisValidUsername={${8:true}/* optional: Flag indicating if the Username is valid */}\n\tpasswordLabel={${9:\"'Password'\"}/* optional: Label for the Password Input Field */}\n\tpasswordValue={${10:\"''\"}/* optional: Value for the Password */}\n\tonChangePassword={${11:() => undefined as any}/* optional: Function that handles the onChange event for the Password */}\n\tisValidPassword={${12:true}/* optional: Flag indicating if the Password is valid */}\n\tloginButtonLabel={${13:\"'Log In'\"}/* optional: Label for the Log in Button Input */}\n\tisLoginButtonDisabled={${14:false}/* optional: Flag indicating if the Login Button is disabled */}\n\tonLoginButtonClick={${15:() => undefined as any}/* optional: Function that is called when the Login button is clicked */}\n\trememberMeLabel={${16:\"''\"}/* optional: Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */}\n\tisRememberMeChecked={${17:false}/* optional: Flag indicating if the remember me Checkbox is checked. */}\n\tonChangeRememberMe={${18:() => undefined as any}/* optional: Function that handles the onChange event for the Remember Me Checkbox */}\n\trememberMeAriaLabel={${19:\"''\"}/* optional:  */}\n/>"},{"label":"LoginHeader","content":"<LoginHeader\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the login header */}\n\theaderBrand={${2:null}/* optional: Header Brand component (e.g. <LoginHeader />) */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the header of the login layout */}\n</LoginHeader>"},{"label":"LoginMainBody","content":"<LoginMainBody\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Login Main Body */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Login Main Body */}\n</LoginMainBody>"},{"label":"LoginMainFooter","content":"<LoginMainFooter\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Login Main Footer */}\n\tsocialMediaLoginContent={${2:null}/* optional: Content rendered inside the Login Main Footer as Social Media Links* */}\n\tsignUpForAccountMessage={${3:null}/* optional: Content rendered inside of Login Main Footer Band to display a sign up for account message */}\n\tforgotCredentials={${4:null}/* optional: Content rendered inside of Login Main Footer Band do display a forgot credentials link* */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Login Main Footer */}\n</LoginMainFooter>"},{"label":"LoginMainFooterBandItem","content":"<LoginMainFooterBandItem\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Footer Link Item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the footer Link Item */}\n</LoginMainFooterBandItem>"},{"label":"LoginMainFooterLinksItem","content":"<LoginMainFooterLinksItem\n\thref={${1:\"''\"}/* optional: HREF for Footer Link Item */}\n\ttarget={${2:\"''\"}/* optional: Target for Footer Link Item */}\n\tclassName={${3:\"''\"}/* optional: Additional classes added to the Footer Link Item */}\n\tlinkComponent={${4:'a'}/* optional: Component used to render the Footer Link Item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the footer Link Item */}\n</LoginMainFooterLinksItem>"},{"label":"LoginMainHeader","content":"<LoginMainHeader\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Login Main Header */}\n\ttitle={${2:\"''\"}/* optional: Title for the Login Main Header */}\n\tsubtitle={${3:\"''\"}/* optional: Subtitle that contains the Text, URL, and URL Text for the Login Main Header */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Login Main Header */}\n</LoginMainHeader>"},{"label":"LoginPage","content":"<LoginPage\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the LoginPage. */}\n\tbrandImgSrc={${2:\"''\"}/* optional: Attribute that specifies the URL of the brand image for the LoginPage */}\n\tbrandImgAlt={${3:\"''\"}/* optional: Attribute that specifies the alt text of the brand image for the LoginPage. */}\n\tbackgroundImgSrc={${4:''}/* optional: Attribute that specifies the URL of the background image for the LoginPage */}\n\tbackgroundImgAlt={${5:\"''\"}/* optional: Attribute that specifies the alt text of the background image for the LoginPage. */}\n\ttextContent={${6:\"''\"}/* optional: Content rendered inside of the Text Component of the LoginPage */}\n\tfooterListItems={${7:null}/* optional: Items rendered inside of the Footer List Component of the LoginPage */}\n\tfooterListVariants={${8:() => {}}/* optional: Adds list variant styles for the Footer List component of the LoginPage. The only current value is'inline' */}\n\tloginTitle={${9:\"string\"}/* required: Title for the Login Main Body Header of the LoginPage */}\n\tloginSubtitle={${10:\"string\"}/* optional: Subtitle for the Login Main Body Header of the LoginPage */}\n\tsignUpForAccountMessage={${11:null}/* optional: Content rendered inside of Login Main Footer Band to display a sign up for account message */}\n\tforgotCredentials={${12:null}/* optional: Content rendered inside of Login Main Footer Band to display a forgot credentials link* */}\n\tsocialMediaLoginContent={${13:null}/* optional: Content rendered inside of Social Media Login footer section . */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered inside of the LoginPage (e.g. <LoginPageForm>) */}\n</LoginPage>"}]},{"group":"Modal","children":[{"label":"Modal","content":"<Modal\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Modal */}\n\tisOpen={${2:false}/* optional: Flag to show the modal */}\n\theader={${3:<div>ReactNode</div>}/* optional: Complex header (more than just text), supersedes title for header content */}\n\ttitle={${4:\"string\"}/* required: Simple text content of the Modal Header, also used for aria-label on the body */}\n\thideTitle={${5:false}/* optional: Flag to hide the title */}\n\tshowClose={${6:true}/* optional: Flag to show the close button in the header area of the modal */}\n\tariaDescribedById={${7:\"''\"}/* optional: Id to use for Modal Box description */}\n\tfooter={${8:<div>ReactNode</div>}/* optional: Custom footer */}\n\tactions={${9:[]}/* optional: Action buttons to add to the standard Modal Footer, ignored if `footer` is given */}\n\tisFooterLeftAligned={${10:false}/* optional: Flag to indicate that the Footer content is left aligned */}\n\tonClose={${11:() => undefined as any}/* optional: A callback for when the close button is clicked */}\n\twidth={${12:1}/* optional: Default width of the Modal. */}\n\tisLarge={${13:false}/* optional: Creates a large version of the Modal */}\n\tisSmall={${14:false}/* optional: Creates a small version of the Modal */}\n\tappendTo={${15:(typeof document !== 'undefined' && document.body) || null}/* optional: The parent container to append the modal to. Defaults to document.body */}\n\tdisableFocusTrap={${16:true}/* optional: Flag to disable focus trap */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the Modal. */}\n</Modal>"},{"label":"ModalBox","content":"<ModalBox\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the ModalBox */}\n\tisLarge={${2:false}/* optional: Creates a large version of the ModalBox */}\n\tisSmall={${3:false}/* optional: Creates a small version of the ModalBox. */}\n\ttitle={${4:\"string\"}/* required: String to use for Modal Box aria-label */}\n\tid={${5:\"string\"}/* required: Id to use for Modal Box description */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the ModalBox. */}\n</ModalBox>"},{"label":"ModalBoxBody","content":"<ModalBoxBody\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the ModalBoxBody */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the ModalBoxBody */}\n</ModalBoxBody>"},{"label":"ModalBoxCloseButton","content":"<ModalBoxCloseButton\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the close button */}\n\tonClose={${2:() => undefined as any}/* optional: A callback for when the close button is clicked */}\n/>"},{"label":"ModalBoxFooter","content":"<ModalBoxFooter\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Footer */}\n\tisLeftAligned={${2:false}/* optional: Flag to align buttons to the left */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Footer */}\n</ModalBoxFooter>"},{"label":"ModalBoxHeader","content":"<ModalBoxHeader\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the button */}\n\thideTitle={${2:false}/* optional: Flag to hide the title */}\n\theadingLevel={${3:'h1'}/* optional: The heading level to use */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the Header */}\n</ModalBoxHeader>"},{"label":"ModalContent","content":"<ModalContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the button */}\n\tisLarge={${2:false}/* optional: Creates a large version of the Modal */}\n\tisSmall={${3:false}/* optional: Creates a small version of the Modal */}\n\tisOpen={${4:false}/* optional: Flag to show the modal */}\n\theader={${5:null}/* optional: Complex header (more than just text), supersedes title for header content */}\n\ttitle={${6:\"string\"}/* required: Simple text content of the Modal Header, also used for aria-label on the body */}\n\thideTitle={${7:false}/* optional: Flag to show the title (ignored for custom headers) */}\n\tshowClose={${8:true}/* optional: Flag to show the close button in the header area of the modal */}\n\twidth={${9:-1}/* optional: Default width of the content. */}\n\tfooter={${10:null}/* optional: Custom footer */}\n\tactions={${11:[]}/* optional: Action buttons to add to the standard Modal Footer, ignored if `footer` is given */}\n\tisFooterLeftAligned={${12:false}/* optional: Flag to indicate that the Footer content is left aligned */}\n\tonClose={${13:() => undefined as any}/* optional: A callback for when the close button is clicked */}\n\tariaDescribedById={${14:\"''\"}/* optional: Id to use for Modal Box description */}\n\tid={${15:\"''\"}/* optional: Id of the ModalBoxBody */}\n\tdisableFocusTrap={${16:false}/* optional: Flag to disable focus trap */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content rendered inside the Modal. */}\n</ModalContent>"}]},{"group":"Nav","children":[{"label":"Nav","content":"<Nav\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the container */}\n\tonSelect={${2:() => undefined}/* optional: Callback for updating when item selection changes */}\n\tonToggle={${3:() => undefined}/* optional: Callback for when a list is expanded or collapsed */}\n\taria-label={${4:\"''\"}/* optional: Accessibility label */}\n\ttheme={${5:'light'}/* optional: Indicates which theme color to use */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered inside of the nav */}\n</Nav>"},{"label":"NavExpandable","content":"<NavExpandable\n\ttitle={${1:\"string\"}/* required: Title shown for the expandable list */}\n\tsrText={${2:\"''\"}/* optional: If defined, screen readers will read this text instead of the list title */}\n\tisExpanded={${3:false}/* optional: Boolean to programatically expand or collapse section */}\n\tclassName={${4:\"''\"}/* optional: Additional classes added to the container */}\n\tgroupId={${5:null}/* optional: Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\tisActive={${6:false}/* optional: If true makes the expandable list title active */}\n\tid={${7:\"''\"}/* optional: Identifier to use for the section aria label */}\n\tonExpand={${8:(e: React.MouseEvent<HTMLLIElement, MouseEvent>, val: boolean) => undefined as void}/* optional: allow consumer to optionally override this callback and manage expand state externally */}\n>\n\t{${0:''}/* optional: Anything that can be rendered inside of the expandable list */}\n</NavExpandable>"},{"label":"NavGroup","content":"<NavGroup\n\ttitle={${1:\"string\"}/* required: Title shown for the group */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the container */}\n\tid={${3:\"string\"}/* optional: Identifier to use for the section aria label */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered inside of the group */}\n</NavGroup>"},{"label":"NavItem","content":"<NavItem\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the nav item */}\n\tto={${2:\"''\"}/* optional: Target navigation link */}\n\tisActive={${3:false}/* optional: Flag indicating whether the item is active */}\n\tgroupId={${4:null}/* optional: Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\titemId={${5:null}/* optional: Item identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */}\n\tpreventDefault={${6:false}/* optional: If true prevents the default anchor link action to occur. Set to true if you want to handle navigation yourself. */}\n\tonClick={${7:null}/* optional: Callback for item click */}\n\tcomponent={${8:'a'}/* optional: Component used to render NavItems */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the nav item */}\n</NavItem>"},{"label":"NavList","content":"<NavList\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the list */}\n\tvariant={${2:'default'}/* optional: Indicates the list type. */}\n\tariaLeftScroll={${3:\"'Scroll left'\"}/* optional: aria-label for the left scroll button */}\n\tariaRightScroll={${4:\"'Scroll right'\"}/* optional: aria-label for the right scroll button */}\n>\n\t{${0:<>ReactNode</>}/* optional: Children nodes */}\n</NavList>"}]},{"group":"NotificationBadge","children":[{"label":"NotificationBadge","content":"<NotificationBadge\n\tisRead={${1:false}/* optional: Adds styling to the notification badge to indicate it has been read */}\n\tclassName={${2:\"string\"}/* optional: additional classes added to the Notification Badge */}\n\taria-label={${3:\"string\"}/* optional: Adds accessible text to the Notification Badge. */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: content rendered inside the Notification Badge */}\n</NotificationBadge>"}]},{"group":"OptionsMenu","children":[{"label":"OptionsMenu","content":"<OptionsMenu\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of the Options menu */}\n\tid={${2:\"string\"}/* required: Id of the root element of the Options menu */}\n\tmenuItems={${3:[]}/* required: Array of OptionsMenuItem and/or OptionMenuItemGroup nodes that will be rendered in the Options menu list */}\n\ttoggle={${4:<p>ReactElement</p>}/* required: Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the Options menu */}\n\tisPlain={${5:true}/* optional: Flag to indicate the toggle has no border or background */}\n\tisOpen={${6:true}/* optional: Flag to indicate if menu is open */}\n\tisText={${7:false}/* optional: Flag to indicate if toggle is textual toggle */}\n\tisGrouped={${8:false}/* optional: Flag to indicate if menu is groupped */}\n\tariaLabelMenu={${9:\"string\"}/* optional: Provides an accessible name for the Options menu */}\n\tposition={${10:'right'}/* optional: Indicates where menu will be aligned horizontally */}\n\tdirection={${11:'up'}/* optional: Menu will open up or open down from the Options menu toggle */}\n/>"},{"label":"OptionsMenuItem","content":"<OptionsMenuItem\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of an Options menu item */}\n\tisSelected={${2:false}/* optional: Render Options menu item as selected */}\n\tisDisabled={${3:true}/* optional: Render Options menu item as disabled option */}\n\tonSelect={${4:() => null as any}/* optional: Callback for when this Options menu item is selected */}\n\tid={${5:\"''\"}/* optional: Unique id of this Options menu item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything which can be rendered as an Options menu item */}\n</OptionsMenuItem>"},{"label":"OptionsMenuItemGroup","content":"<OptionsMenuItemGroup\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of the Options menu items group */}\n\tariaLabel={${2:\"''\"}/* optional: Provides an accessible name for the Options menu items group */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content to be rendered in the Options menu items component */}\n</OptionsMenuItemGroup>"},{"label":"OptionsMenuSeparator","content":"<OptionsMenuSeparator\n\tclassName={${1:\"''\"}/* optional: Classes applied to root element of Options menu separator item */}\n/>"},{"label":"OptionsMenuToggle","content":"<OptionsMenuToggle\n\tparentId={${1:\"''\"}/* optional: Id of the parent Options menu component */}\n\tonToggle={${2:(isOpen: boolean) => undefined as void}/* optional: Callback for when this Options menu is toggled */}\n\tisOpen={${3:false}/* optional: Flag to indicate if menu is open */}\n\tisPlain={${4:false}/* optional: Flag to indicate if the button is plain */}\n\tisFocused={${5:false}/* optional: Forces display of the hover state of the Options menu */}\n\tisHovered={${6:false}/* optional: Forces display of the hover state of the Options menu */}\n\tisSplitButton={${7:false}/* optional:  */}\n\tisActive={${8:false}/* optional: Forces display of the active state of the Options menu */}\n\tisDisabled={${9:false}/* optional: Disables the options menu toggle */}\n\thideCaret={${10:false}/* optional: hide the toggle caret */}\n\taria-label={${11:\"'Options menu'\"}/* optional: Provides an accessible name for the button when an icon is used instead of text */}\n\tonEnter={${12:(event: React.MouseEvent<HTMLButtonElement>) => undefined as void}/* optional: Internal function to implement enter click */}\n\tparentRef={${13:document.body}/* optional: Internal parent reference */}\n\ttoggleTemplate={${14:<div>ReactNode</div>}/* optional: Content to be rendered in the Options menu toggle button */}\n/>"},{"label":"OptionsMenuToggleWithText","content":"<OptionsMenuToggleWithText\n\tparentId={${1:\"''\"}/* optional: Id of the parent Options menu component */}\n\ttoggleText={${2:<div>ReactNode</div>}/* required: Content to be rendered inside the Options menu toggle as text or another non-interactive element */}\n\ttoggleTextClassName={${3:\"''\"}/* optional: classes to be added to the Options menu toggle text */}\n\ttoggleButtonContents={${4:<div>ReactNode</div>}/* optional: Content to be rendered inside the Options menu toggle button */}\n\ttoggleButtonContentsClassName={${5:\"''\"}/* optional: Classes to be added to the Options menu toggle button */}\n\tonToggle={${6:() => null as any}/* optional: Callback for when this Options menu is toggled */}\n\tonEnter={${7:(event: React.MouseEvent<HTMLButtonElement>) => undefined as void}/* optional: Inner function to indicate open on Enter */}\n\tisOpen={${8:false}/* optional: Flag to indicate if menu is open */}\n\tisPlain={${9:false}/* optional: Flag to indicate if the button is plain */}\n\tisFocused={${10:false}/* optional: Forces display of the focused state of the Options menu button */}\n\tisHovered={${11:false}/* optional: Forces display of the hover state of the Options menu button */}\n\tisActive={${12:false}/* optional: Forces display of the active state of the Options menu button */}\n\tisDisabled={${13:false}/* optional: Disables the options menu toggle */}\n\tparentRef={${14:document.body}/* optional: Internal parent reference */}\n\tariaHasPopup={${15:true}/* optional: Indicates that the element has a popup context menu or sub-level menu */}\n\taria-label={${16:\"'Options menu'\"}/* optional: Provides an accessible name for the button when an icon is used instead of text */}\n/>"}]},{"group":"Page","children":[{"label":"Page","content":"<Page\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the page layout */}\n\theader={${2:null}/* optional: Header component (e.g. <PageHeader />) */}\n\tsidebar={${3:null}/* optional: Sidebar component for a side nav (e.g. <PageSidebar />) */}\n\tskipToContent={${4:null}/* optional: Skip to content component for the page */}\n\tmainContainerId={${5:\"null\"}/* optional: an id to use for the [role=\"main\"] element */}\n\tisManagedSidebar={${6:false}/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\tdefaultManagedSidebarIsOpen={${7:true}/* optional: If true, the managed sidebar is initially open for desktop view */}\n\tonPageResize={${8:(): void => null}/* optional: Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px | Returns object { mobileView: boolean, windowSize: number } */}\n\tbreadcrumb={${9:null}/* optional: Breadcrumb component for the page */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered inside the main section of the page layout (e.g. <PageSection />) */}\n</Page>"},{"label":"PageHeader","content":"<PageHeader\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the page header */}\n\tlogo={${2:null}/* optional: Component to render the logo/brand (e.g. <Brand />) */}\n\tlogoProps={${3:null}/* optional: Additional props passed to the logo anchor container */}\n\tlogoComponent={${4:'a'}/* optional: Component to use to wrap the passed <logo> */}\n\ttoolbar={${5:null}/* optional: Component to render the toolbar (e.g. <Toolbar />) */}\n\tavatar={${6:null}/* optional: Component to render the avatar (e.g. <Avatar /> */}\n\ttopNav={${7:null}/* optional: Component to render navigation within the header (e.g. <Nav /> */}\n\tshowNavToggle={${8:false}/* optional: True to show the nav toggle button (toggles side nav) */}\n\tisNavOpen={${9:true}/* optional: True if the side nav is shown */}\n\tisManagedSidebar={${10:true}/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\tonNavToggle={${11:() => undefined as any}/* optional: Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */}\n\taria-label={${12:\"'Global navigation'\"}/* optional: Aria Label for the nav toggle button */}\n/>"},{"label":"PageSection","content":"<PageSection\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the section */}\n\tvariant={${2:'default'}/* optional: Section background color variant */}\n\ttype={${3:'default'}/* optional: Section type variant */}\n\tisFilled={${4:true}/* optional: Enables the page section to fill the available vertical space */}\n\tnoPadding={${5:false}/* optional: Modifies a main page section to have no padding */}\n\tnoPaddingMobile={${6:false}/* optional: Modifies a main page section to have no padding on mobile */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content rendered inside the section */}\n</PageSection>"},{"label":"PageSidebar","content":"<PageSidebar\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the page sidebar */}\n\tnav={${2:<div>ReactNode</div>}/* optional: Component to render the side navigation (e.g. <Nav /> */}\n\tisManagedSidebar={${3:true}/* optional: If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into | the sidebar component or add a callback onNavToggle function into the PageHeader component */}\n\tisNavOpen={${4:true}/* optional: Programmatically manage if the side nav is shown, if isManagedSidebar is set to true in the Page component, this prop is managed */}\n\ttheme={${5:'light'}/* optional: Indicates the color scheme of the sidebar */}\n/>"}]},{"group":"Pagination","children":[{"label":"Navigation","content":"<Navigation\n\tclassName={${1:\"''\"}/* optional: Additional classes for the container */}\n\tisDisabled={${2:false}/* optional: Flag indicating if the pagination is disabled */}\n\tisCompact={${3:false}/* optional: Flag indicating if the pagination is compact */}\n\tlastPage={${4:0}/* optional: The number of the last page */}\n\tfirstPage={${5:0}/* optional: The number of first page where pagination starts */}\n\tpagesTitle={${6:\"''\"}/* optional: The title of a page displayed beside the page number */}\n\ttoLastPage={${7:\"'Go to last page'\"}/* optional: Accessible label for the button which moves to the last page */}\n\ttoPreviousPage={${8:\"'Go to previous page'\"}/* optional: Accessible label for the button which moves to the previous page */}\n\ttoNextPage={${9:\"'Go to next page'\"}/* optional: Accessible label for the button which moves to the next page */}\n\ttoFirstPage={${10:\"'Go to first page'\"}/* optional: Accessible label for the button which moves to the first page */}\n\tcurrPage={${11:\"'Current page'\"}/* optional: Accessible label for the input displaying the current page */}\n\tpaginationTitle={${12:\"'Pagination'\"}/* optional: Accessible label for the pagination component */}\n\tpage={${13:42}/* required: The number of the current page */}\n\tonSetPage={${14:(event: React.SyntheticEvent<HTMLButtonElement>, page: number) => undefined as void}/* required: Function called when page is changed */}\n\tonNextClick={${15:() => undefined as any}/* optional: Function called when user clicks to navigate to next page */}\n\tonPreviousClick={${16:() => undefined as any}/* optional: Function called when user clicks to navigate to previous page */}\n\tonFirstClick={${17:() => undefined as any}/* optional: Function called when user clicks to navigate to first page */}\n\tonLastClick={${18:() => undefined as any}/* optional: Function called when user clicks to navigate to last page */}\n\tonPageInput={${19:() => undefined as any}/* optional: Function called when user inputs page number */}\n/>"},{"label":"OptionsToggle","content":"<OptionsToggle\n\titemsTitle={${1:\"'items'\"}/* optional: The type or title of the items being paginated */}\n\toptionsToggle={${2:\"'Select'\"}/* optional: The text to be displayed on the Options Toggle */}\n\titemsPerPageTitle={${3:\"'Items per page'\"}/* optional: The Title of the Pagination Options Menu */}\n\tfirstIndex={${4:0}/* optional: The first index of the items being paginated */}\n\tlastIndex={${5:0}/* optional: The last index of the items being paginated */}\n\titemCount={${6:0}/* optional: The total number of items being paginated */}\n\twidgetId={${7:\"''\"}/* optional: Id added to the title of the Pagination Options Menu */}\n\tshowToggle={${8:true}/* optional: showToggle */}\n\tonToggle={${9:(_isOpen: boolean) => undefined as any}/* optional: Event function that fires when user clicks the Options Menu toggle */}\n\tisOpen={${10:false}/* optional: Flag indicating if the Options Menu dropdown is open or not */}\n\tisDisabled={${11:false}/* optional: Flag indicating if the Options Menu is disabled */}\n\tparentRef={${12:null}/* optional:  */}\n\ttoggleTemplate={${13:''}/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonEnter={${14:null}/* optional: Callback for toggle open on keyboard entry */}\n/>"},{"label":"Pagination","content":"<Pagination\n\tclassName={${1:\"''\"}/* optional: Additional classes for the container. */}\n\titemCount={${2:42}/* required: Total number of items. */}\n\tvariant={${3:'top'}/* optional: Position where pagination is rendered. */}\n\tisDisabled={${4:false}/* optional: Flag indicating if pagination is disabled */}\n\tisCompact={${5:false}/* optional: Flag indicating if pagination is compact */}\n\tperPage={${6:42}/* optional: Number of items per page. */}\n\tperPageOptions={${7:[\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n]}/* optional: Select from options to number of items per page. */}\n\tfirstPage={${8:1}/* optional: Page we start at. */}\n\tpage={${9:1}/* optional: Current page number. */}\n\titemsStart={${10:null}/* optional: First index of items on current page. */}\n\titemsEnd={${11:null}/* optional: Last index of items on current page. */}\n\twidgetId={${12:\"'pagination-options-menu'\"}/* optional: ID to ideintify widget on page. */}\n\tdropDirection={${13:'up'}/* optional: Direction of dropdown context menu. */}\n\ttitles={${14:undefined}/* optional: Object with titles to display in pagination. */}\n\ttoggleTemplate={${15:'string'}/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonSetPage={${16:() => undefined}/* optional: Function called when user sets page. */}\n\tonFirstClick={${17:() => undefined}/* optional: Function called when user clicks on navigate to first page. */}\n\tonPreviousClick={${18:() => undefined}/* optional: Function called when user clicks on navigate to previous page. */}\n\tonNextClick={${19:() => undefined}/* optional: Function called when user clicks on navigate to next page. */}\n\tonLastClick={${20:() => undefined}/* optional: Function called when user clicks on navigate to last page. */}\n\tonPageInput={${21:() => undefined}/* optional: Function called when user inputs page number. */}\n\tonPerPageSelect={${22:() => undefined}/* optional: Function called when user selects number of items per page. */}\n>\n\t{${0:<>ReactNode</>}/* optional: What should be rendered inside */}\n</Pagination>"},{"label":"PaginationOptionsMenu","content":"<PaginationOptionsMenu\n\tclassName={${1:\"''\"}/* optional: Custom class name added to the Pagination Options Menu */}\n\twidgetId={${2:\"''\"}/* optional: Id added to the title of the Pagination Options Menu */}\n\tisDisabled={${3:false}/* optional: Flag indicating if Pagination Options Menu is disabled */}\n\tdropDirection={${4:'up'}/* optional: Menu will open up or open down from the Options menu toggle */}\n\tperPageOptions={${5:[]}/* optional: Array of titles and values which will be the options on the Options Menu dropdown */}\n\titemsPerPageTitle={${6:\"'Items per page'\"}/* optional: The Title of the Pagination Options Menu */}\n\tperPageSuffix={${7:\"'per page'\"}/* optional: The suffix to be displayed after each option on the Options Menu dropdown */}\n\titemsTitle={${8:\"'items'\"}/* optional: The type or title of the items being paginated */}\n\toptionsToggle={${9:\"'Select'\"}/* optional: The text to be displayed on the Options Toggle */}\n\titemCount={${10:0}/* optional: The total number of items being paginated */}\n\tfirstIndex={${11:0}/* optional: The first index of the items being paginated */}\n\tlastIndex={${12:0}/* optional: The last index of the items being paginated */}\n\tperPage={${13:0}/* optional: The number of items to be displayed per page */}\n\ttoggleTemplate={${14:({ firstIndex, lastIndex, itemCount, itemsTitle }: ToggleTemplateProps) => (\n  <React.Fragment>\n    <b>\n      {firstIndex} - {lastIndex}\n    </b>{' '}\n    of<b>{itemCount}</b> {itemsTitle}\n  </React.Fragment>\n)}/* optional: This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */}\n\tonPerPageSelect={${15:() => null as any}/* optional: Function called when user selects number of items per page. */}\n/>"},{"label":"ToggleTemplate","content":"<ToggleTemplate\n\tfirstIndex={${1:0}/* optional: The first index of the items being paginated */}\n\tlastIndex={${2:0}/* optional: The last index of the items being paginated */}\n\titemCount={${3:0}/* optional: The total number of items being paginated */}\n\titemsTitle={${4:\"'items'\"}/* optional: The type or title of the items being paginated */}\n/>"}]},{"group":"Popover","children":[{"label":"Popover","content":"<Popover\n\taria-label={${1:\"''\"}/* optional: Accessible label, required when header is not present */}\n\tappendTo={${2:() => document.body}/* optional: The element to append the popover to, defaults to body */}\n\tbodyContent={${3:<div>ReactNode</div>}/* required: Body content */}\n\tboundary={${4:'window'}/* optional: If enableFlip is true, the popover responds to this boundary */}\n\tclassName={${5:\"''\"}/* optional: Popover additional class */}\n\tcloseBtnAriaLabel={${6:\"'Close'\"}/* optional: Aria label for the Close button */}\n\tdistance={${7:25}/* optional: Distance of the popover to its target, defaults to 25 */}\n\tenableFlip={${8:true}/* optional: If true, tries to keep the popover in view by flipping it if necessary */}\n\tflipBehavior={${9:['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']}/* optional: The desired position to flip the popover to if the initial position is not possible. | By setting this prop to 'flip' it attempts to flip the popover to the opposite side if there is no space. | You can also pass an array of positions that determines the flip order. It should contain the initial position | followed by alternative positions if that position is unavailable. | Example: Initial position is 'top'. Button with popover is in the top right corner. 'flipBehavior' is set to | ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no | space to the right, so it finally shows the popover on the left. */}\n\tfooterContent={${10:null}/* optional: Footer content */}\n\theaderContent={${11:null}/* optional: Header content, leave empty for no header */}\n\thideOnOutsideClick={${12:true}/* optional: Hides the popover when a click occurs outside (only works if isVisible is not controlled by the user) */}\n\tisVisible={${13:null}/* optional: True to show the popover programmatically. Used in conjunction with the shouldClose prop. | By default, the popover child element handles click events automatically. If you want to control this programmatically, | the popover will not auto-close if the Close button is clicked, ESC key is used, or if a click occurs outside the popover. | Instead, the consumer is responsible for closing the popover themselves by adding a callback listener for the shouldClose prop. */}\n\tmaxWidth={${14:\"string\"}/* optional: Maximum width of the popover (default 18.75rem) */}\n\tonHidden={${15:(): void => null}/* optional: Lifecycle function invoked when the popover has fully transitioned out. */}\n\tonHide={${16:(): void => null}/* optional: Lifecycle function invoked when the popover begins to transition out. */}\n\tonMount={${17:(): void => null}/* optional: Lifecycle function invoked when the popover has been mounted to the DOM. */}\n\tonShow={${18:(): void => null}/* optional: Lifecycle function invoked when the popover begins to transition in. */}\n\tonShown={${19:(): void => null}/* optional: Lifecycle function invoked when the popover has fully transitioned in. */}\n\tposition={${20:'top'}/* optional: Popover position. Note: With 'enableFlip' set to true, | it will change the position if there is not enough space for the starting position. | The behavior of where it flips to can be controlled through the flipBehavior prop. */}\n\tshouldClose={${21:(): void => null}/* optional: Callback function that is only invoked when isVisible is also controlled. Called when the popover Close button is | clicked or the ESC key is used */}\n\tzIndex={${22:9999}/* optional: z-index of the popover */}\n\ttippyProps={${23:undefined}/* optional: additional Props to pass through to tippy.js */}\n>\n\t{${0:<p>ReactElement</p>}/* required: The reference element to which the popover is relatively placed to */}\n</Popover>"},{"label":"PopoverBody","content":"<PopoverBody\n\n/>"},{"label":"PopoverHeader","content":"<PopoverHeader\n\n/>"}]},{"group":"Progress","children":[{"label":"Progress","content":"<Progress\n\tclassName={${1:\"''\"}/* optional: Classname for progress component. */}\n\tsize={${2:null}/* optional: Size variant of progress. */}\n\tmeasureLocation={${3:'outside'}/* optional: Where the measure percent will be located. */}\n\tvariant={${4:'danger'}/* optional: Status variant of progress. */}\n\ttitle={${5:\"''\"}/* optional: Title above progress. */}\n\tlabel={${6:null}/* optional: Text description of current progress value to display instead of percentage. */}\n\tvalue={${7:0}/* optional: Actual value of progress. */}\n\tid={${8:\"''\"}/* optional: DOM id for progress component. */}\n\tmin={${9:0}/* optional: Minimal value of progress. */}\n\tmax={${10:100}/* optional: Maximum value of progress. */}\n\tvalueText={${11:\"null\"}/* optional: Accessible text description of current progress value, for when value is not a percentage. Use with label. */}\n/>"},{"label":"ProgressBar","content":"<ProgressBar\n\tclassName={${1:\"''\"}/* optional: Additional classes for Progres bar. */}\n\tvalue={${2:42}/* required: Actual progress value. */}\n\tariaProps={${3:{}/*unrecognizedType AriaProps undefined*/}/* required: Minimal value of progress. */}\n>\n\t{${0:<>ReactNode</>}/* optional: What should be rendered inside progress bar. */}\n</ProgressBar>"},{"label":"ProgressContainer","content":"<ProgressContainer\n\tariaProps={${1:{}/*unrecognizedType AriaProps undefined*/}/* required: Properties needed for aria support */}\n\tparentId={${2:\"string\"}/* required: Progress component DOM ID. */}\n\ttitle={${3:\"''\"}/* optional: Progress title. */}\n\tlabel={${4:null}/* optional: Label to indicate what progress is showing. */}\n\tvariant={${5:'danger'}/* optional: Type of progress status. */}\n\tmeasureLocation={${6:'outside'}/* optional: Location of progress value. */}\n\tvalue={${7:42}/* required: Actual progress value. */}\n/>"}]},{"group":"Radio","children":[{"label":"Radio","content":"<Radio\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the radio. */}\n\tid={${2:\"string\"}/* required: Id of the radio. */}\n\tisLabelWrapped={${3:true}/* optional: Flag to show if the radio label is wrapped on small screen. */}\n\tisLabelBeforeButton={${4:true}/* optional: Flag to show if the radio label is shown before the radio button. */}\n\tchecked={${5:true}/* optional: Flag to show if the radio is checked. */}\n\tisChecked={${6:true}/* optional: Flag to show if the radio is checked. */}\n\tisDisabled={${7:false}/* optional: Flag to show if the radio is disabled. */}\n\tisValid={${8:true}/* optional: Flag to show if the radio selection is valid or invalid. */}\n\tlabel={${9:<div>ReactNode</div>}/* optional: Label text of the radio. */}\n\tname={${10:\"string\"}/* required: Name for group of radios */}\n\tonChange={${11:(checked: boolean, event: React.FormEvent<HTMLInputElement>) => undefined as void}/* optional: A callback for when the radio selection changes. */}\n\taria-label={${12:\"string\"}/* optional: Aria label for the radio. */}\n/>"}]},{"group":"Select","children":[{"label":"CheckboxSelectGroup","content":"<CheckboxSelectGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the CheckboxSelectGroup control */}\n\tlabel={${2:\"''\"}/* optional: Group label */}\n\ttitleId={${3:\"''\"}/* optional: ID for title label */}\n>\n\t{${0:[]}/* optional: Checkboxes within group */}\n</CheckboxSelectGroup>"},{"label":"CheckboxSelectOption","content":"<CheckboxSelectOption\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Select Option */}\n\tindex={${2:0}/* optional: Internal index of the option */}\n\tvalue={${3:\"''\"}/* optional: The value for the option */}\n\tisDisabled={${4:false}/* optional: Flag indicating if the option is disabled */}\n\tisChecked={${5:false}/* optional: Internal flag indicating if the option is checked */}\n\tsendRef={${6:(ref: React.ReactNode, index: number) => undefined as void}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={${7:(index: number, position: string) => undefined as void}/* optional: Internal callback for keyboard navigation */}\n\tonClick={${8:(event: React.MouseEvent | React.ChangeEvent) => undefined as void}/* optional: Optional callback for click event */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Optional alternate display for the option */}\n</CheckboxSelectOption>"},{"label":"Select","content":"<Select\n\tclassName={${1:\"''\"}/* optional: Classes applied to the root of the Select */}\n\tdirection={${2:'up'}/* optional: Flag specifying which direction the Select menu expands */}\n\tisExpanded={${3:false}/* optional: Flag to indicate if select is expanded */}\n\tisGrouped={${4:false}/* optional: Flag to indicate if select options are grouped */}\n\tisPlain={${5:false}/* optional: Display the toggle with no border or background */}\n\tisDisabled={${6:false}/* optional: Flag to indicate if select is disabled */}\n\tisCreatable={${7:false}/* optional: Flag to indicate if the typeahead select allows new items */}\n\tcreateText={${8:\"'Create'\"}/* optional: Text displayed in typeahead select to prompt the user to create an item */}\n\tplaceholderText={${9:''}/* optional: Title text of Select */}\n\tnoResultsFoundText={${10:\"'No results found'\"}/* optional: Text to display in typeahead select when no results are found */}\n\tselections={${11:''}/* optional: Selected item for single select variant.  Array of selected items for multi select variants. */}\n\ttoggleId={${12:\"null\"}/* optional: Id for select toggle element */}\n\taria-label={${13:\"''\"}/* optional: Adds accessible text to Select */}\n\tariaLabelledBy={${14:\"''\"}/* optional: Id of label for the Select aria-labelledby */}\n\tariaLabelTypeAhead={${15:\"''\"}/* optional: Label for input field of type ahead select variants */}\n\tariaLabelClear={${16:\"'Clear all'\"}/* optional: Label for clear selection button of type ahead select variants */}\n\tariaLabelToggle={${17:\"'Options menu'\"}/* optional: Label for toggle of type ahead select variants */}\n\tariaLabelRemove={${18:\"'Remove'\"}/* optional: Label for remove chip button of multiple type ahead select variant */}\n\tonSelect={${19:(\n  event: React.MouseEvent | React.ChangeEvent,\n  value: string | SelectOptionObject,\n  isPlaceholder?: boolean\n) => undefined as void}/* optional: Callback for selection behavior */}\n\tonToggle={${20:(isExpanded: boolean) => undefined as void}/* required: Callback for toggle button behavior */}\n\tonClear={${21:(_e: React.MouseEvent) => undefined as void}/* optional: Callback for typeahead clear button */}\n\tonFilter={${22:null}/* optional: Optional callback for custom filtering */}\n\tonCreateOption={${23:(_newOptionValue: string) => undefined as void}/* optional: Optional callback for newly created options */}\n\tvariant={${24:'single'}/* optional: Variant of rendered Select */}\n\twidth={${25:''}/* optional: Width of the select container as a number of px or string percentage */}\n\tmaxHeight={${26:'string'}/* optional: Max height of the select container as a number of px or string percentage */}\n\ttoggleIcon={${27:null}/* optional: Icon element to render inside the select toggle */}\n\tcustomContent={${28:null}/* optional: Custom content to render in the select menu.  If this prop is defined, the variant prop will be ignored and the select will render with a single select toggle */}\n>\n\t{${0:[]}/* optional: Content rendered inside the Select */}\n</Select>"},{"label":"SelectGroup","content":"<SelectGroup\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the CheckboxSelectGroup control */}\n\tlabel={${2:\"''\"}/* optional: Group label */}\n\ttitleId={${3:\"''\"}/* optional: ID for title label */}\n>\n\t{${0:[]}/* optional: Checkboxes within group */}\n</SelectGroup>"},{"label":"SelectMenu","content":"<SelectMenu\n\tisCustomContent={${1:false}/* optional: Flag indicating that the children is custom content to render inside the SelectMenu.  If true, variant prop is ignored. */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the SelectMenu control */}\n\tisExpanded={${3:false}/* optional: Flag indicating the Select is expanded */}\n\tisGrouped={${4:false}/* optional: Flag indicating the Select options are grouped */}\n\tselected={${5:''}/* optional: Currently selected option (for single, typeahead variants) */}\n\tchecked={${6:[]}/* optional: Currently checked options (for checkbox variant) */}\n\topenedOnEnter={${7:false}/* optional: Internal flag for specifiying how the menu was opened */}\n\tmaxHeight={${8:''}/* optional: Flag to specify the  maximum height of the menu, as a string percentage or number of pixels */}\n\tnoResultsFoundText={${9:\"string\"}/* optional: Inner prop passed from parent */}\n\tcreateText={${10:\"string\"}/* optional: Inner prop passed from parent */}\n\tsendRef={${11:(ref: React.ReactNode, index: number) => undefined as void}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={${12:(index: number, position: string) => undefined as void}/* optional: Internal callback for keyboard navigation */}\n>\n\t{${0:[undefined as React.ReactElement]}/* required: Content rendered inside the SelectMenu */}\n</SelectMenu>"},{"label":"SelectOption","content":"<SelectOption\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Select Option */}\n\tindex={${2:0}/* optional: Internal index of the option */}\n\tcomponent={${3:'button'}/* optional: Indicates which component will be used as select item */}\n\tvalue={${4:''}/* optional: The value for the option, if passing an object you most provide a toString function */}\n\tisDisabled={${5:false}/* optional: Flag indicating if the option is disabled */}\n\tisPlaceholder={${6:false}/* optional: Flag indicating if the option acts as a placeholder */}\n\tisSelected={${7:false}/* optional: Internal flag indicating if the option is selected */}\n\tisChecked={${8:false}/* optional: Internal flag indicating if the option is checked */}\n\tisFocused={${9:false}/* optional: Internal flag indicating if the option is focused */}\n\tsendRef={${10:(ref: React.ReactNode, index: number) => undefined as void}/* optional: Internal callback for ref tracking */}\n\tkeyHandler={${11:(index: number, position: string) => undefined as void}/* optional: Internal callback for keyboard navigation */}\n\tonClick={${12:(event: React.MouseEvent | React.ChangeEvent) => undefined as void}/* optional: Optional callback for click event */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Optional alternate display for the option */}\n</SelectOption>"},{"label":"SelectToggle","content":"<SelectToggle\n\tid={${1:\"string\"}/* required: HTML ID of dropdown toggle */}\n\tclassName={${2:\"''\"}/* optional: Classes applied to root element of dropdown toggle */}\n\tisExpanded={${3:false}/* optional: Flag to indicate if select is expanded */}\n\tonToggle={${4:(isExpanded: boolean) => undefined as void}/* optional: Callback called when toggle is clicked */}\n\tonEnter={${5:() => undefined as void}/* optional: Callback for toggle open on keyboard entry */}\n\tonClose={${6:() => undefined as void}/* optional: Callback for toggle close */}\n\thandleTypeaheadKeys={${7:(position: string) => undefined as void}/* optional: Internal callback for toggle keyboard navigation */}\n\tparentRef={${8:{ current: document.createElement('div') }}/* required: Element which wraps toggle */}\n\tisFocused={${9:false}/* optional: Forces focus state */}\n\tisHovered={${10:false}/* optional: Forces hover state */}\n\tisActive={${11:false}/* optional: Forces active state */}\n\tisPlain={${12:false}/* optional: Display the toggle with no border or background */}\n\tisDisabled={${13:false}/* optional: Flag indicating if select is disabled */}\n\ttype={${14:'button'}/* optional: Type of the toggle button, defaults to 'button' */}\n\tariaLabelledBy={${15:\"''\"}/* optional: Id of label for the Select aria-labelledby */}\n\tariaLabelToggle={${16:\"''\"}/* optional: Label for toggle of select variants */}\n\tvariant={${17:false}/* optional: Flag for variant, determines toggle rules and interaction */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Anything which can be rendered as dropdown toggle */}\n</SelectToggle>"}]},{"group":"SkipToContent","children":[{"label":"SkipToContent","content":"<SkipToContent\n\tcomponent={${1:'a'}/* optional: Sets the base component to render. Defaults to an anchor */}\n\thref={${2:\"string\"}/* required: The skip to content link. */}\n\tclassName={${3:\"''\"}/* optional: Additional styles to apply to the skip to content component. */}\n\tshow={${4:false}/* optional: Forces the skip to component to display. This is primarily for demonstration purposes and would not normally be used. */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to display within the skip to content component, typically a string. */}\n</SkipToContent>"}]},{"group":"Switch","children":[{"label":"Switch","content":"<Switch\n\tid={${1:\"''\"}/* optional: id for the label. */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the Switch */}\n\tlabel={${3:\"''\"}/* optional: Text value for the label when on */}\n\tlabelOff={${4:\"''\"}/* optional: Text value for the label when off */}\n\tisChecked={${5:true}/* optional: Flag to show if the Switch is checked. */}\n\tisDisabled={${6:false}/* optional: Flag to show if the Switch is disabled. */}\n\tonChange={${7:() => undefined as any}/* optional: A callback for when the Switch selection changes. (isChecked, event) => {} */}\n\taria-label={${8:\"''\"}/* optional: Adds accessible text to the Switch, and should describe the isChecked=\"true\" state. When label is defined, aria-label should be set to the text string that is visible when isChecked is true. */}\n/>"}]},{"group":"Tabs","children":[{"label":"TabButton","content":"<TabButton\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Tab */}\n\thref={${2:\"string\"}/* optional: URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs variant=\"nav\"> should have an href. */}\n\ttabContentRef={${3:{ current: document.createElement('div') }}/* optional: child reference for case in which a TabContent section is defined outside of a Tabs component */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: content rendered inside the Tab content area. */}\n</TabButton>"},{"label":"TabContent","content":"<TabContent\n\n/>"},{"label":"Tabs","content":"<Tabs\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Tabs */}\n\tactiveKey={${2:0}/* optional: the index of the active tab */}\n\tonSelect={${3:() => undefined as any}/* optional: handle tab selection */}\n\tid={${4:\"string\"}/* optional: uniquely identifies the Tabs */}\n\tisFilled={${5:false}/* optional: enables the filled tab list layout */}\n\tisSecondary={${6:false}/* optional: enables Secondary Tab styling */}\n\tleftScrollAriaLabel={${7:\"'Scroll left'\"}/* optional: aria-label for the left Scroll Button */}\n\trightScrollAriaLabel={${8:\"'Scroll right'\"}/* optional: aria-label for the right Scroll Button */}\n\tvariant={${9:'div'}/* optional: determines what tag is used around the Tabs. Use \"nav\" to define the Tabs inside a navigation region */}\n\taria-label={${10:\"string\"}/* optional: provides an accessible label for the Tabs. Labels should be unique for each set of Tabs that are present on a page. When variant is set to nav, this prop should be defined to differentiate the Tabs from other navigation regions on the page. */}\n\tmountOnEnter={${11:false}/* optional: waits until the first \"enter\" transition to mount tab children (add them to the DOM) */}\n\tunmountOnExit={${12:false}/* optional: unmounts tab children (removes them from the DOM) when they are no longer visible */}\n>\n\t{${0:<div>ReactNode</div>}/* required: content rendered inside the Tabs Component. */}\n</Tabs>"}]},{"group":"Text","children":[{"label":"Text","content":"<Text\n\tcomponent={${1:'h1'}/* optional: The text component */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the Text */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered within the Text */}\n</Text>"},{"label":"TextContent","content":"<TextContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the TextContent */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered within the TextContent */}\n</TextContent>"},{"label":"TextList","content":"<TextList\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the TextList */}\n\tcomponent={${2:'ul'}/* optional: The text list component */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered within the TextList */}\n</TextList>"},{"label":"TextListItem","content":"<TextListItem\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the TextListItem */}\n\tcomponent={${2:'li'}/* optional: The text list item component */}\n>\n\t{${0:<>ReactNode</>}/* optional: Content rendered within the TextListItem */}\n</TextListItem>"}]},{"group":"TextArea","children":[{"label":"TextArea","content":"<TextArea\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the TextArea. */}\n\tisRequired={${2:false}/* optional: Flag to show if the TextArea is required. */}\n\tisValid={${3:true}/* optional: Flag to show if the TextArea is valid or invalid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={${4:'default'}/* optional: Value to indicate if the textarea is modified to show that validation state. | If set to success, textarea will be modified to indicate valid state. | If set to error, textarea will be modified to indicate error state. */}\n\tvalue={${5:'string'}/* optional: Value of the TextArea. */}\n\tonChange={${6:(value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => undefined as void}/* optional: A callback for when the TextArea value changes. */}\n\tresizeOrientation={${7:'both'}/* optional: Sets the orientation to limit the resize to */}\n\taria-label={${8:\"null\"}/* optional: Custom flag to show that the TextArea requires an associated id or aria-label. */}\n/>"}]},{"group":"TextInput","children":[{"label":"TextInput","content":"<TextInput\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the TextInput. */}\n\tisDisabled={${2:false}/* optional: Flag to show if the input is disabled. */}\n\tisReadOnly={${3:false}/* optional: Flag to show if the input is read only. */}\n\tisRequired={${4:false}/* optional: Flag to show if the input is required. */}\n\tisValid={${5:true}/* optional: Flag to show if the input is valid or invalid. This prop will be deprecated. You should use validated instead. */}\n\tvalidated={${6:'default'}/* optional:  */}\n\tonChange={${7:(): any => undefined}/* optional: A callback for when the input value changes. */}\n\ttype={${8:'text'}/* optional: Type that the input accepts. */}\n\tvalue={${9:'string'}/* optional: Value of the input. */}\n\taria-label={${10:\"null\"}/* optional: Aria-label. The input requires an associated id or aria-label. */}\n/>"}]},{"group":"Title","children":[{"label":"Title","content":"<Title\n\tsize={${1:{}/*unrecognizedType unknown undefined*/}/* required: the size of the Title */}\n\tclassName={${2:\"''\"}/* optional: Additional classes added to the Title */}\n\theadingLevel={${3:'h1'}/* optional: the heading level to use */}\n>\n\t{${0:''}/* optional: content rendered inside the Title */}\n</Title>"}]},{"group":"Tooltip","children":[{"label":"Tooltip","content":"<Tooltip\n\tappendTo={${1:() => document.body}/* optional: The element to append the tooltip to, defaults to body */}\n\taria={${2:'describedby'}/* optional: Aria-labelledby or aria-describedby for tooltip */}\n\tboundary={${3:'window'}/* optional: If enableFlip is true, the tooltip responds to this boundary */}\n\tclassName={${4:\"''\"}/* optional: Tooltip additional class */}\n\tcontent={${5:<div>ReactNode</div>}/* required: Tooltip content */}\n\tdistance={${6:15}/* optional: Distance of the tooltip to its target, defaults to 15 */}\n\tenableFlip={${7:true}/* optional: If true, tries to keep the tooltip in view by flipping it if necessary */}\n\tentryDelay={${8:500}/* optional: Delay in ms before the tooltip appears */}\n\texitDelay={${9:500}/* optional: Delay in ms before the tooltip disappears */}\n\tflipBehavior={${10:['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']}/* optional: The desired position to flip the tooltip to if the initial position is not possible. | By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space. | You can also pass an array of positions that determines the flip order. It should contain the initial position | followed by alternative positions if that position is unavailable. | Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to | ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no | space to the right, so it finally shows the tooltip on the left. */}\n\tisAppLauncher={${11:false}/* optional: If true, displays as an application launcher */}\n\tmaxWidth={${12:\"string\"}/* optional: Maximum width of the tooltip (default 12.5rem) */}\n\tposition={${13:'top'}/* optional: Tooltip position. Note: With 'enableFlip' set to true, | it will change the position if there is not enough space for the starting position. | The behavior of where it flips to can be controlled through the flipBehavior prop. */}\n\ttrigger={${14:\"'mouseenter focus'\"}/* optional: Tooltip trigger: click, mouseenter, focus, manual */}\n\tisContentLeftAligned={${15:false}/* optional: Flag to indicate that the text content is left aligned */}\n\tisVisible={${16:false}/* optional: value for visibility when trigger is 'manual' */}\n\tzIndex={${17:9999}/* optional: z-index of the tooltip */}\n\ttippyProps={${18:undefined}/* optional: additional Props to pass through to tippy.js */}\n\tid={${19:\"''\"}/* optional: ID */}\n>\n\t{${0:<p>ReactElement</p>}/* required: The reference element to which the tooltip is relatively placed to */}\n</Tooltip>"},{"label":"TooltipArrow","content":"<TooltipArrow\n\tclassName={${1:\"string\"}/* optional: className */}\n/>"},{"label":"TooltipContent","content":"<TooltipContent\n\tclassName={${1:\"string\"}/* optional: PopoverContent additional class */}\n\tisLeftAligned={${2:true}/* optional: Flag to align text to the left */}\n>\n\t{${0:<div>ReactNode</div>}/* required: PopoverContent content */}\n</TooltipContent>"}]},{"group":"Wizard","children":[{"label":"Wizard","content":"<Wizard\n\tisOpen={${1:false}/* optional: True to show the wizard (not applicable for isInPage) */}\n\tisInPage={${2:false}/* optional: True to show the wizard without the modal */}\n\tisCompactNav={${3:false}/* optional: If true makes the navigation more compact */}\n\tisFullHeight={${4:false}/* optional: True to set full height wizard */}\n\tisFullWidth={${5:false}/* optional: True to set full width wizard */}\n\twidth={${6:null}/* optional: Custom width of the wizard */}\n\theight={${7:null}/* optional: Custom height of the wizard */}\n\ttitle={${8:\"''\"}/* optional: The wizard title (required unless isInPage is used) */}\n\tdescription={${9:\"''\"}/* optional: The wizard description */}\n\tonClose={${10:() => undefined as any}/* optional: Callback function to close the wizard */}\n\tonGoToStep={${11:null}/* optional: Callback function when a step in the nav is clicked */}\n\tclassName={${12:\"''\"}/* optional: Additional classes spread to the Wizard */}\n\tsteps={${13:[]}/* required: The wizard steps configuration object */}\n\tstartAtStep={${14:1}/* optional: The current step the wizard is on (1 or higher) */}\n\tariaLabelNav={${15:\"'Steps'\"}/* optional: aria-label for the Nav */}\n\thasBodyPadding={${16:true}/* optional: Can remove the default padding around the main body content by setting this to false */}\n\tfooter={${17:null}/* optional: (Use to control the footer) Passing in a footer component lets you control the buttons yourself */}\n\tonSave={${18:() => undefined as void}/* optional: (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */}\n\tonNext={${19:null}/* optional: (Unused if footer is controlled) Callback function after Next button is clicked */}\n\tonBack={${20:null}/* optional: (Unused if footer is controlled) Callback function after Back button is clicked */}\n\tnextButtonText={${21:\"'Next'\"}/* optional: (Unused if footer is controlled) The Next button text */}\n\tbackButtonText={${22:\"'Back'\"}/* optional: (Unused if footer is controlled) The Back button text */}\n\tcancelButtonText={${23:\"'Cancel'\"}/* optional: (Unused if footer is controlled) The Cancel button text */}\n\tariaLabelCloseButton={${24:\"'Close'\"}/* optional: (Unused if footer is controlled) aria-label for the close button */}\n\tappendTo={${25:null}/* optional: The parent container to append the modal to. Defaults to document.body */}\n/>"},{"label":"WizardFooter","content":"<WizardFooter\n\n>\n\t{${0:'any'}/* required: Buttons in the footer */}\n</WizardFooter>"},{"label":"WizardFooterInternal","content":"<WizardFooterInternal\n\n/>"},{"label":"WizardHeader","content":"<WizardHeader\n\tonClose={${1:() => undefined}/* optional: Callback function called when the X (Close) button is clicked */}\n\ttitle={${2:\"string\"}/* required: Title of the wizard */}\n\tdescription={${3:\"string\"}/* optional: Description of the wizard */}\n\tariaLabelCloseButton={${4:\"string\"}/* optional: aria-label applied to the X (Close) button */}\n\ttitleId={${5:\"string\"}/* optional: id for the title */}\n\tdescriptionId={${6:\"string\"}/* optional: id for the description */}\n/>"},{"label":"WizardNav","content":"<WizardNav\n\tariaLabel={${1:\"string\"}/* optional: aria-label applied to the nav element */}\n\tisOpen={${2:false}/* optional: Whether the nav is expanded */}\n\treturnList={${3:false}/* optional: True to return the inner list without the wrapping nav element */}\n>\n\t{${0:'any'}/* optional: children should be WizardNavItem components */}\n</WizardNav>"},{"label":"WizardNavItem","content":"<WizardNavItem\n\ttext={${1:\"''\"}/* optional: The text to display in the nav item */}\n\tisCurrent={${2:false}/* optional: Whether the nav item is the currently active item */}\n\tisDisabled={${3:false}/* optional: Whether the nav item is disabled */}\n\tstep={${4:42}/* required: The step passed into the onNavItemClick callback */}\n\tonNavItemClick={${5:() => undefined}/* optional: Callback for when the nav item is clicked */}\n\tnavItemComponent={${6:'a'}/* optional: Component used to render WizardNavItem */}\n>\n\t{${0:<>ReactNode</>}/* optional: Can nest a WizardNav component for substeps */}\n</WizardNavItem>"},{"label":"WizardToggle","content":"<WizardToggle\n\tnav={${1:'any'}/* required: Function that returns the WizardNav component */}\n\tsteps={${2:[]}/* required: The wizard steps */}\n\tactiveStep={${3:{}/*unrecognizedType WizardStep undefined*/}/* required: The currently active WizardStep */}\n\thasBodyPadding={${4:true}/* optional: Set to false to remove body padding */}\n\tisNavOpen={${5:true}/* required: If the nav is open */}\n\tonNavToggle={${6:(isOpen: boolean) => undefined as void}/* required: Callback function for when the nav is toggled */}\n>\n\t{${0:<div>ReactNode</div>}/* required: The WizardFooter */}\n</WizardToggle>"}]}]},{"category":"Layouts","codeFragments":[{"group":"Bullseye","children":[{"label":"Bullseye","content":"<Bullseye\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Bullseye layout */}\n\tcomponent={${2:'div'}/* optional: Sets the base component to render. defaults to div */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Bullseye layout */}\n</Bullseye>"}]},{"group":"Flex","children":[{"label":"Flex","content":"<Flex\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Flex layout */}\n\tbreakpointMods={${2:[]}/* optional: An array of objects representing the various modifiers to apply to the flex component at various breakpoints */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Flex layout */}\n</Flex>"},{"label":"FlexItem","content":"<FlexItem\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Flex layout */}\n\tbreakpointMods={${2:[]}/* optional: An array of objects representing the various modifiers to apply to the flex item at various breakpoints */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Flex layout */}\n</FlexItem>"}]},{"group":"Gallery","children":[{"label":"Gallery","content":"<Gallery\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Gallery layout */}\n\tgutter={${2:null}/* optional: Adds space between children. */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Gallery layout */}\n</Gallery>"},{"label":"GalleryItem","content":"<GalleryItem\n\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Gallery Item */}\n</GalleryItem>"}]},{"group":"Grid","children":[{"label":"Grid","content":"<Grid\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Grid layout */}\n\tgutter={${2:null}/* optional: Adds space between children. */}\n\tspan={${3:null}/* optional: The number of rows a column in the grid should span.  Value should be a number 1-12 */}\n\tsm={${4:1}/* optional: the number of columns all grid items should span on a small device */}\n\tmd={${5:1}/* optional: the number of columns all grid items should span on a medium device */}\n\tlg={${6:1}/* optional: the number of columns all grid items should span on a large device */}\n\txl={${7:1}/* optional: the number of columns all grid items should span on a xLarge device */}\n\txl2={${8:1}/* optional: the number of columns all grid items should span on a 2xLarge device */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Grid layout */}\n</Grid>"},{"label":"GridItem","content":"<GridItem\n\tclassName={${1:\"''\"}/* optional: additional classes added to the Grid Layout Item */}\n\tspan={${2:null}/* optional: the number of columns the grid item spans. Value should be a number 1-12 */}\n\trowSpan={${3:null}/* optional: the number of rows the grid item spans. Value should be a number 1-12 */}\n\toffset={${4:null}/* optional: the number of columns a grid item is offset */}\n\tsm={${5:1}/* optional: the number of columns the grid item spans on small device. Value should be a number 1-12 */}\n\tsmRowSpan={${6:1}/* optional: the number of rows the grid item spans on medium device. Value should be a number 1-12 */}\n\tsmOffset={${7:1}/* optional: the number of columns the grid item is offset on small device. Value should be a number 1-12 */}\n\tmd={${8:1}/* optional: the number of columns the grid item spans on medium device. Value should be a number 1-12 */}\n\tmdRowSpan={${9:1}/* optional: the number of rows the grid item spans on medium device. Value should be a number 1-12 */}\n\tmdOffset={${10:1}/* optional: the number of columns the grid item is offset on medium device. Value should be a number 1-12 */}\n\tlg={${11:1}/* optional: the number of columns the grid item spans on large device. Value should be a number 1-12 */}\n\tlgRowSpan={${12:1}/* optional: the number of rows the grid item spans on large device. Value should be a number 1-12 */}\n\tlgOffset={${13:1}/* optional: the number of columns the grid item is offset on large device. Value should be a number 1-12 */}\n\txl={${14:1}/* optional: the number of columns the grid item spans on xLarge device. Value should be a number 1-12 */}\n\txlRowSpan={${15:1}/* optional: the number of rows the grid item spans on large device. Value should be a number 1-12 */}\n\txlOffset={${16:1}/* optional: the number of columns the grid item is offset on xLarge device. Value should be a number 1-12 */}\n\txl2={${17:1}/* optional: the number of columns the grid item spans on 2xLarge device. Value should be a number 1-12 */}\n\txl2RowSpan={${18:1}/* optional: the number of rows the grid item spans on 2xLarge device. Value should be a number 1-12 */}\n\txl2Offset={${19:1}/* optional: the number of columns the grid item is offset on 2xLarge device. Value should be a number 1-12 */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Grid Layout Item */}\n</GridItem>"}]},{"group":"Level","children":[{"label":"Level","content":"<Level\n\tgutter={${1:null}/* optional: Adds space between children. */}\n\tclassName={${2:\"''\"}/* optional: additional classes added to the Level layout */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Level layout */}\n</Level>"},{"label":"LevelItem","content":"<LevelItem\n\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Level Layout Item */}\n</LevelItem>"}]},{"group":"Split","children":[{"label":"Split","content":"<Split\n\tgutter={${1:null}/* optional: Adds space between children. */}\n\tclassName={${2:\"''\"}/* optional: additional classes added to the Split layout */}\n\tcomponent={${3:'div'}/* optional: Sets the base component to render. defaults to div */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Split layout */}\n</Split>"},{"label":"SplitItem","content":"<SplitItem\n\tisFilled={${1:false}/* optional: Flag indicating if this Split Layout item should fill the available horizontal space. */}\n\tclassName={${2:\"''\"}/* optional: additional classes added to the Split Layout Item */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Split Layout Item */}\n</SplitItem>"}]},{"group":"Stack","children":[{"label":"Stack","content":"<Stack\n\tgutter={${1:null}/* optional: Adds space between children. */}\n\tclassName={${2:\"''\"}/* optional: additional classes added to the Stack layout */}\n\tcomponent={${3:'div'}/* optional: Sets the base component to render. defaults to div */}\n>\n\t{${0:<>ReactNode</>}/* optional: content rendered inside the Stack layout */}\n</Stack>"},{"label":"StackItem","content":"<StackItem\n\tisFilled={${1:false}/* optional: Flag indicating if this Stack Layout item should fill the available vertical space. */}\n\tclassName={${2:\"''\"}/* optional: content rendered inside the Stack Layout Item */}\n>\n\t{${0:<>ReactNode</>}/* optional: additional classes added to the Stack Layout Item */}\n</StackItem>"}]},{"group":"Toolbar","children":[{"label":"Toolbar","content":"<Toolbar\n\tclassName={${1:\"null\"}/* optional: Classes applied to toolbar parent */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as toolbar content */}\n</Toolbar>"},{"label":"ToolbarGroup","content":"<ToolbarGroup\n\tclassName={${1:\"null\"}/* optional: Classes applied to toolbar group */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as one toolbar group */}\n</ToolbarGroup>"},{"label":"ToolbarItem","content":"<ToolbarItem\n\tclassName={${1:\"null\"}/* optional: Classes applied to toolbar item */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as toolbar item content */}\n</ToolbarItem>"},{"label":"ToolbarSection","content":"<ToolbarSection\n\tclassName={${1:\"null\"}/* optional: Classes applied to toolbar section */}\n\taria-label={${2:\"string\"}/* optional: Aria label applied to toolbar section */}\n>\n\t{${0:<>ReactNode</>}/* optional: Anything that can be rendered as toolbar section */}\n</ToolbarSection>"}]}]},{"category":"Beta","codeFragments":[{"group":"DataToolbar","children":[{"label":"DataToolbar","content":"<DataToolbar\n\tclearAllFilters={${1:() => undefined as void}/* optional: Optional callback for clearing all filters in the toolbar */}\n\tclearFiltersButtonText={${2:\"string\"}/* optional: Text to display in the clear all filters button */}\n\tcollapseListedFiltersBreakpoint={${3:'md'}/* optional: The breakpoint at which the listed fitlers in chip groups are collapsed down to a summary */}\n\tisExpanded={${4:true}/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\ttoggleIsExpanded={${5:() => undefined as void}/* optional: A callback for setting the isExpanded flag */}\n\tclassName={${6:\"string\"}/* optional: Classes applied to root element of the data toolbar */}\n\tid={${7:\"string\"}/* required: Id of the data toolbar */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to be rendered as rows in the data toolbar */}\n</DataToolbar>"},{"label":"DataToolbarChipGroupContent","content":"<DataToolbarChipGroupContent\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of the data toolbar content row */}\n\tisExpanded={${2:true}/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\tchipGroupContentRef={${3:{ current: document.createElement('div') }}/* optional: Chip group content reference for passing to data toolbar children */}\n\tclearAllFilters={${4:() => undefined as void}/* optional: optional callback for clearing all filters in the toolbar */}\n\tshowClearFiltersButton={${5:true}/* required: Flag indicating that the clear all filters button should be visible */}\n\tclearFiltersButtonText={${6:\"'Clear all filters'\"}/* optional: Text to display in the clear all filters button */}\n\tnumberOfFilters={${7:42}/* required: Total number of filters currently being applied across all DataToolbarFilter components */}\n\tcollapseListedFiltersBreakpoint={${8:'lg'}/* optional: The breakpoint at which the listed filters in chip groups are collapsed down to a summary */}\n/>"},{"label":"DataToolbarContent","content":"<DataToolbarContent\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of the data toolbar content row */}\n\tbreakpointMods={${2:[]}/* optional: An array of objects representing the various modifiers to apply to the content row at various breakpoints */}\n\tisExpanded={${3:false}/* optional: Flag indicating if a data toolbar toggle group's expandable content is expanded */}\n\tclearAllFilters={${4:() => undefined as void}/* optional: Optional callback for clearing all filters in the toolbar */}\n\tshowClearFiltersButton={${5:false}/* optional: Flag indicating that the clear all filters button should be visible */}\n\tclearFiltersButtonText={${6:\"string\"}/* optional: Text to display in the clear all filters button */}\n\ttoolbarId={${7:\"string\"}/* optional: Id of the parent DataToolbar component */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to be rendered as children of the content row */}\n</DataToolbarContent>"},{"label":"DataToolbarExpandableContent","content":"<DataToolbarExpandableContent\n\tclassName={${1:\"string\"}/* optional: Classes added to the root element of the data toolbar expandable content */}\n\tisExpanded={${2:false}/* optional: Flag indicating the expandable content is expanded */}\n\texpandableContentRef={${3:{ current: document.createElement('div') }}/* optional: Expandable content reference for passing to data toolbar children */}\n\tchipContainerRef={${4:{ current: document.createElement('div') }}/* optional: Chip container reference for passing to data toolbar children */}\n\tclearAllFilters={${5:() => undefined as void}/* optional: optional callback for clearing all filters in the toolbar */}\n\tclearFiltersButtonText={${6:\"'Clear all filters'\"}/* optional: Text to display in the clear all filters button */}\n\tshowClearFiltersButton={${7:true}/* required: Flag indicating that the clear all filters button should be visible */}\n/>"},{"label":"DataToolbarFilter","content":"<DataToolbarFilter\n\tchips={${1:[]}/* optional: An array of strings to be displayed as chips in the expandable content */}\n\tdeleteChip={${2:(category: string, chip: DataToolbarChip | string) => undefined as void}/* optional: Callback passed by consumer used to delete a chip from the chips[] */}\n\tcategoryName={${3:\"string\"}/* required: Unique category name to be used as a label for the chip group */}\n\tshowToolbarItem={${4:true}/* optional: Flag to show the toolbar item */}\n>\n\t{${0:<div>ReactNode</div>}/* required: Content to be rendered inside the data toolbar item associated with the chip group */}\n</DataToolbarFilter>"},{"label":"DataToolbarGroup","content":"<DataToolbarGroup\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of the data toolbar group */}\n\tvariant={${2:'filter-group'}/* optional: A type modifier which modifies spacing specifically depending on the type of group */}\n\tbreakpointMods={${3:[]}/* optional: Array of objects representing the various modifiers to apply to the data toolbar group at various breakpoints */}\n\tinnerRef={${4:{ current: document.createElement('div') }}/* optional: Reference to pass to this group if it has .pf-m-chip-container modifier */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to be rendered inside the data toolbar group */}\n</DataToolbarGroup>"},{"label":"DataToolbarItem","content":"<DataToolbarItem\n\tclassName={${1:\"string\"}/* optional: Classes applied to root element of the data toolbar item */}\n\tvariant={${2:'separator'}/* optional: A type modifier which modifies spacing specifically depending on the type of item */}\n\tbreakpointMods={${3:[]}/* optional: An array of objects representing the various modifiers to apply to the data toolbar item at various breakpoints */}\n\tid={${4:\"string\"}/* optional: id for this data toolbar item */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to be rendered inside the data toolbar item */}\n</DataToolbarItem>"}]},{"group":"Divider","children":[{"label":"Divider","content":"<Divider\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the divider */}\n\tcomponent={${2:'hr'}/* optional: The component type to use */}\n/>"}]},{"group":"Drawer","children":[{"label":"Drawer","content":"<Drawer\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Drawer. */}\n\tisExpanded={${2:false}/* optional: Indicate if the drawer is expanded */}\n\tisInline={${3:false}/* optional: Indicates if the content element and panel element are displayed side by side. */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content rendered in the left hand panel */}\n</Drawer>"},{"label":"DrawerContent","content":"<DrawerContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Drawer. */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to rendered in the drawer */}\n</DrawerContent>"},{"label":"DrawerPanelContent","content":"<DrawerPanelContent\n\tclassName={${1:\"''\"}/* optional: Additional classes added to the Drawer. */}\n\tnoPadding={${2:false}/* optional: Indicates if there should be padding around the drawer */}\n>\n\t{${0:<div>ReactNode</div>}/* optional: Content to rendered in the drawer */}\n</DrawerPanelContent>"}]},{"group":"OverflowMenu","children":[{"label":"OverflowMenu","content":"<OverflowMenu\n\tclassName={${1:\"string\"}/* optional: Additional classes added to the OverflowMenu. */}\n\tbreakpoint={${2:'md'}/* required: Indicates breakpoint at which to switch between horizontal menu and vertical dropdown */}\n>\n\t{${0:'any'}/* optional: Any elements that can be rendered in the menu */}\n</OverflowMenu>"},{"label":"OverflowMenuContent","content":"<OverflowMenuContent\n\n/>"},{"label":"OverflowMenuControl","content":"<OverflowMenuControl\n\n/>"}]}]}]}